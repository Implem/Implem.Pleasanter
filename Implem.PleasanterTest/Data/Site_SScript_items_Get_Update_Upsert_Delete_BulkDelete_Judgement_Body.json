{
    "Version": 1.017,
    "ReferenceType": "Results",
    "ServerScripts": [
        {
            "Title": "test",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "try {\r    // 対象サーバスクリプト\r    // ・items.Update\r    // ・items.Upsert\r    // ・items.Get\r    // ・items.BulkDelete\r    // ・items.Delete\r\r    // 処理概要\r    // 1. 「items.GetClosestSite()」で既存サイトのサイトの情報を取得\r    // 2. 「items.Upsert()」でサイト情報のサイトIDをもとにレコードを新規作成\r    // 3. 「items.Get()」でサイトIDをもとに一括作成したレコードの情報を取得\r    // 4. 「items.Update()」でレコード情報のうち1レコードを更新\r    // 5. 「items.Upsert()」でサイトIDをもとに全レコードを更新\r    // 6. 「items.Delete()」でレコード情報のうち1レコードを削除\r    // 7. 「items.BulkDelete()」でサイトIDをもとに全レコードを削除\r\r    // 変数宣言箇所\r    // 操作用サイト名\r    const siteName = 'サイト名：items更新系 - 操作用サイト';\r    // 操作用レコードのタイトル\r    const recordTitle = ['items.Update(), items.Delete()で使用するレコード', 'items.Upsert(), items.BulkDelete()で使用するレコード1', 'items.Upsert(), items.BulkDelete()で使用するレコード2'];\r    // 操作用レコードのレコードID\r    var recordIds = [];\r    // 各関数呼び出し時のデータ\r    var data = {};\r    // 新規作成時の状況\r    const initStatus = 100;\r    // 更新後の状況\r    const updatedStatus = 200;\r    // 対象サーバスクリプト名\r    var targetFunction;\r    // 成功メッセージ\r    const successMessage = '：成功';\r    // 失敗メッセージ\r    const failureMessage = '：失敗';\r    // 成功CSS\r    const successCSS = 'alert-information';\r    // 失敗CSS\r    const failureCSS = 'alert-error';\r\r    // ロジック箇所\r    // 1. 「items.GetClosestSite()」で既存サイトのサイトの情報を取得\r    const siteInfo = items.GetClosestSite(siteName);\r    const targetSiteId = siteInfo.SiteId;\r\r    // 2. 「items.Upsert()」でサイト情報のサイトIDをもとにレコードを新規作成\r    targetFunction = 'items.Upsert() - Create';\r    var upsertCreateResults = [];\r    var upsertCreateResult = true;\r    for (var Title of recordTitle) {\r        data = {\r            Keys: ['Title'],\r            Title: Title,\r            Status: initStatus\r        }\r        var tmpResult = items.Upsert(targetSiteId, JSON.stringify(data));\r        upsertCreateResults.push(tmpResult);\r    }\r    for (var Result of upsertCreateResults) {\r        if (Result === false) {\r            upsertCreateResult = false;\r            break;\r        }\r    }\r    if (upsertCreateResult === true) {\r        context.AddMessage(targetFunction + successMessage, successCSS);\r    } else {\r        context.AddMessage(targetFunction + failureMessage, failureCSS);\r    }\r\r    // 3. 「items.Get()」でサイトIDをもとに一括作成したレコードの情報を取得\r    targetFunction = 'items.Get()';\r    const getResults = items.Get(targetSiteId);\r    if (getResults.Length === 3) {\r        for (var getResult of getResults) recordIds.push({ResultId: getResult.Model.Title.Id, Title: getResult.Model.Title.Value});\r        context.AddMessage(targetFunction + successMessage, successCSS);\r    } else {\r        context.AddMessage(targetFunction + failureMessage, failureCSS);\r    }\r\r    // 4. 「items.Update()」でレコード情報のうち1レコードを更新\r    targetFunction = 'items.Update()';\r    const targetRecordId = recordIds[2];\r    const updateDeleteRecordId = targetRecordId['ResultId'];\r    data = {\r        Status: updatedStatus\r    }\r    if (items.Update(updateDeleteRecordId, JSON.stringify(data)) === true) {\r        context.AddMessage(targetFunction + successMessage, successCSS);\r    } else {\r        context.AddMessage(targetFunction + failureMessage, failureCSS);\r    }\r\r    // 5. 「items.Upsert()」でサイトIDをもとに全レコードを更新\r    targetFunction = 'items.Upsert() - Update';\r    var upsertUpdateResults = [];\r    var upsertUpdateResult = true;\r    for (var Title of recordTitle) {\r        data = {\r            Keys: ['Title'],\r            Title: Title,\r            Status: updatedStatus\r        }\r        var tmpResult = items.Upsert(targetSiteId, JSON.stringify(data));\r        upsertUpdateResults.push(tmpResult);\r    }\r    for (var Result of upsertUpdateResults) {\r        if (Result === false) {\r            upsertUpdateResult = false;\r            break;\r        }\r    }\r    if (upsertUpdateResult === true) {\r        context.AddMessage(targetFunction + successMessage, successCSS);\r    } else {\r        context.AddMessage(targetFunction + failureMessage, failureCSS);\r    }\r\r    // 6. 「items.Delete()」でレコード情報のうち1レコードを削除\r    targetFunction = 'items.Delete()';\r    if (items.Delete(updateDeleteRecordId) === true) {\r        context.AddMessage(targetFunction + successMessage, successCSS);\r    } else {\r        context.AddMessage(targetFunction + failureMessage, failureCSS);\r    }\r\r    // 7. 「items.BulkDelete()」でサイトIDをもとに全レコードを削除\r    targetFunction = 'items.BulkDelete()';\r    data = {\r        View: {\r            ColumnFilterHash: {\r                Status: 200\r            }\r        }\r    }\r    if (items.BulkDelete(targetSiteId, JSON.stringify(data)) === 2) {\r        context.AddMessage(targetFunction + successMessage, successCSS);\r    } else {\r        context.AddMessage(targetFunction + failureMessage, failureCSS);\r    }\r} catch (ex) {\r    context.Log(ex.stack);\r}\r",
            "Id": 1
        }
    ],
    "NoDisplayIfReadOnly": false
}