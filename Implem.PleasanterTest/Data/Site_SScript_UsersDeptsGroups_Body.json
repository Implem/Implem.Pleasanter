{
    "Version": 1.017,
    "ReferenceType": "Results",
    "ServerScripts": [
        {
            "Title": "test",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "// 事前準備\n// 下記の情報が登録されていること\n// ログインユーザ：1ユーザ\n// 組織：1組織\n// グループ：2グループ(親グループ・子グループ)\n// ログインユーザは組織、親グループに属していること\n// 組織にはログインユーザのみ所属していること\n// グループには親グループの子グループに子グループを登録していること\n// グループには組織が含まれていること\n\n// 対象機能\n// 1. users.Get\n// 2. depts.Get\n// 3. dept.GetMembers\n// 4. groups.Get\n// 5. group.GetChildren\n// 6. group.GetMembers\n// 7. group.ContainsChild\n// 8. group.ContainsDept\n// 9. group.ContainsUser\n// 10. groups.Update\n\n// 処理概要\n// 1-1. 「users.Get()」でログインユーザの情報を取得\n// 1-2. 取得したユーザ情報の「Name」を確認\n// 2-1. 「depts.Get()」でログインユーザの所属組織情報を取得\n// 2-2. 取得した組織情報の「DeptName」を確認\n// 3-1. 取得した組織情報をもとに「dept.GetMembers()」でメンバーを取得\n// 3-2. 取得したメンバーの「Name」を確認\n// 4-1. 「groups.Get()」でログインユーザが所属しているグループ情報を取得\n// 4-2. 取得したグループ情報の「GroupName」を確認\n// 5-1. 取得したグループ情報をもとに「group.GetChildren()」で子グループを取得\n// 5-2. 取得した子グループの「GroupName」を確認\n// 6-1. 取得したグループ情報をもとに「group.GetMembers()」で所属しているメンバーを取得\n// 6-2. 取得したメンバーの「UserId」を確認\n// 7-1. 取得したグループ情報をもとに「group.ContainsChild()」で子グループの存在を確認\n// 8-1. 取得したグループ情報をもとに「group.ContainsDept()」で組織の存在を確認\n// 9-1. 取得したグループ情報をもとに「group.ContainsUser()」でユーザの存在を確認\n// 10-1. 取得したグループ情報をもとに「groups.Update()」でグループのメンバーを更新\n// 10-2. グループの更新可否を確認\n\n// 変数宣言箇所\nconst logClass = { DEBUG: '【DEBUG】', INFO: '【INFO】' };\nvar targetFunction;\nvar result;\nconst loginUserId = context.UserId;\nconst loginUserBelongDeptId = context.DeptId;\nconst loginUserBelongGroupIds = context.Groups;\nconst userName = 'UsersDeptsGroupsテスト用ユーザ';\nconst deptName = 'UsersDeptsGroupsテスト用組織';\nconst groupName = 'UsersDeptsGroupsテスト用グループ';\nconst groupChildName = 'UsersDeptsGroupsテスト用グループの子グループ';\n\ntry {\n    // 実装箇所\n    context.Log(logClass['DEBUG'] + 'xUnit処理：開始');\n\n    // 1. users.Get\n    targetFunction = 'users.Get()';\n    // 1-1. 「users.Get()」でログインユーザの情報を取得\n    const loginUserInfo = users.Get(loginUserId);\n    // 1-2. 取得したユーザ情報の「Name」を確認\n    result = loginUserInfo.Name === userName;\n    judgeResult(result, targetFunction);\n\n    // 2. depts.Get\n    targetFunction = 'depts.Get()';\n    // 2-1. 「depts.Get()」でログインユーザの所属組織情報を取得\n    const loginUserBelongDeptInfo = depts.Get(loginUserBelongDeptId);\n    // 2-2. 取得した組織情報の「DeptName」を確認\n    result = loginUserBelongDeptInfo.DeptName === deptName;\n    judgeResult(result, targetFunction);\n\n    // 3. dept.GetMembers\n    targetFunction = 'dept.GetMembers()';\n    // 3-1. 取得した組織情報をもとに「dept.GetMembers()」でメンバーを取得\n    const loginUserBelongDeptMembers = loginUserBelongDeptInfo.GetMembers();\n    for (const loginUserBelongDeptMember of loginUserBelongDeptMembers) {\n        // 3-2. 取得したメンバーの「Name」を確認\n        result = loginUserBelongDeptMember.Name === userName;\n        judgeResult(result, targetFunction);\n    }\n\n    // 4. groups.Get\n    targetFunction = 'groups.Get()';\n    // 4-1. 「groups.Get()」でログインユーザが所属しているグループ情報を取得\n    const loginUserBelongGroupInfo = groups.Get(loginUserBelongGroupIds[0]);\n    // 4-2. 取得したグループ情報の「GroupName」を確認\n    result = loginUserBelongGroupInfo.GroupName === groupName;\n    judgeResult(result, targetFunction);\n\n    // 5. group.GetChildren\n    targetFunction = 'group.GetChildren()';\n    // 5-1. 取得したグループ情報をもとに「group.GetChildren()」で子グループを取得\n    const loginUserBelongGroupChildrenData = loginUserBelongGroupInfo.GetChildren();\n    for (const loginUserBelongGroupChildrenDatum of loginUserBelongGroupChildrenData) {\n        // 5-2. 取得した子グループの「GroupName」を確認\n        result = loginUserBelongGroupChildrenDatum.GroupName === groupChildName;\n        judgeResult(result, targetFunction);\n    }\n\n    // 6. group.GetMembers\n    targetFunction = 'group.GetMembers()';\n    // 6-1. 取得したグループ情報をもとに「group.GetMembers()」で所属しているメンバーを取得\n    const loginUserBelongGroupMemberData = loginUserBelongGroupInfo.GetMembers();\n    for (const loginUserBelongGroupMemberDatum of loginUserBelongGroupMemberData) {\n        // 6-2. 取得したメンバーの「UserId」を確認\n        if (loginUserBelongGroupMemberDatum.UserId === loginUserId ||loginUserBelongGroupMemberDatum.UserId === loginUserBelongDeptId) result = true;\n        judgeResult(result, targetFunction);\n    }\n\n    // 7. group.ContainsChild\n    targetFunction = 'group.ContainsChild()';\n    for (const loginUserBelongGroupChildrenDatum of loginUserBelongGroupChildrenData) {\n        // 7-1. 取得したグループ情報をもとに「group.ContainsChild()」で子グループの存在を確認\n        result = loginUserBelongGroupInfo.ContainsChild(loginUserBelongGroupChildrenDatum.GroupId) === true;\n        judgeResult(result, targetFunction);\n    }\n\n    // 8. group.ContainsDept\n    targetFunction = 'group.ContainsDept()';\n    // 8-1. 取得したグループ情報をもとに「group.ContainsDept()」で組織の存在を確認\n    result = loginUserBelongGroupInfo.ContainsDept(loginUserBelongDeptId) === true;\n    judgeResult(result, targetFunction);\n\n    // 9. group.ContainsUser\n    targetFunction = 'group.ContainsUser()';\n    // 9-1. 取得したグループ情報をもとに「group.ContainsUser()」でユーザの存在を確認\n    result = loginUserBelongGroupInfo.ContainsUser(loginUserId) === true;\n    judgeResult(result, targetFunction);\n\n    // 10. groups.Update\n    targetFunction = 'groups.Update()';\n    const groupMembers = [\n        'User,' + loginUserId + ',true',\n        'Dept,' + loginUserBelongDeptId + ',true'\n    ]\n    const data = {\n        GroupMembers: groupMembers\n    };\n    // 10-1. 取得したグループ情報をもとに「groups.Update()」でグループのメンバーを更新\n    // 10-2. グループの更新可否を確認\n    result = groups.Update(loginUserBelongGroupIds[0], JSON.stringify(data));\n    judgeResult(result, targetFunction);\n\n} catch (ex) {\ncontext.Log(logClass['DEBUG'] + targetFunction + 'xUnit処理：エラー');\ncontext.Log(ex.stack);\n} finally {\n    context.Log(logClass['DEBUG'] + 'xUnit処理：終了');\n}\n\n// 成功 or 失敗を判定\n//  - 引数 -\n// condition：判定条件\n// targetFunction：対象機能名\n// - 戻値 -\n// true：成功, false：失敗\nfunction judgeResult(condition, targetFunction) {\n    context.Log(logClass['DEBUG'] + targetFunction + '判定処理：開始');\n    try {\n        // 成功メッセージ\n        const successMessage = '：成功';\n        // 失敗メッセージ\n        const failureMessage = '：失敗';\n        // 成功CSS\n        const successCSS = 'alert-information';\n        // 失敗CSS\n        const failureCSS = 'alert-error';\n        context.Log(logClass['INFO'] + condition);\n        if (condition) {\n            context.Log(logClass['DEBUG'] + '判定結果：' + successMessage);\n            context.AddMessage(targetFunction + successMessage, successCSS);\n        } else {\n            context.Log(logClass['DEBUG'] + '判定結果：' + failureMessage);\n            context.AddMessage(targetFunction + failureMessage, failureCSS);\n        }\n    } catch (ex) {\n        context.Log(logClass['DEBUG'] + targetFunction + '判定処理：エラー');\n        context.Log(ex.stack);\n    } finally {\n        context.Log(logClass['DEBUG'] + targetFunction + '判定処理：終了');\n    }\n}\n",
            "Id": 1
        }
    ],
    "NoDisplayIfReadOnly": false
}