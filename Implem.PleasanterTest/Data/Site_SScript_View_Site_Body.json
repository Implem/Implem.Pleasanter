{
    "Version": 1.017,
    "ReferenceType": "Results",
    "GridColumns": [
        "ResultId",
        "Title",
        "Status"
    ],
    "EditorColumnHash": {
        "General": [
            "ResultId",
            "Ver",
            "Title",
            "Body",
            "Manager",
            "Owner",
            "Comments",
            "Status",
            "NumA"
        ]
    },
    "Columns": [
        {
            "ColumnName": "NumA",
            "LabelText": "view.Sorters"
        },
        {
            "ColumnName": "Title",
            "LabelText": "view.SearchTypes"
        },
        {
            "ColumnName": "Status",
            "LabelText": "view.Filters"
        }
    ],
    "ViewLatestId": 1,
    "ServerScripts": [
        {
            "Title": "test",
            "Name": "",
            "BeforeOpeningPage": true,
            "Body": "if (context.Action === 'index') {\n    try {\n        context.Log('【DEBUG】xUnit事前処理：開始');\n        // データ\n        const data = [\n            { No: 1, Title: '野原家の中', Status: 900, NumA: 1 },\n            { No: 2, Title: '部屋の中の野原', Status: 200, NumA: 2 },\n            { No: 3, Title: 'インプリム：中野', Status: 200, NumA: 3 },\n            { No: 4, Title: '東京都中野区', Status: 200, NumA: 4 },\n            { No: 5, Title: '中野区', Status: 100, NumA: 5 },\n            { No: 6, Title: '中野', Status: 100, NumA: 6 },\n            { No: 7, Title: '中 野', Status: 100, NumA: 7 },\n        ];\n        createRecord(context.SiteId, data);\n        context.Log('【DEBUG】xUnit事前処理：終了');\n        context.Log('【DEBUG】xUnit処理：開始');\n        // 対象機能\n        // 1. view.Id\n        // 2. view.Sorters\n        // 3. view.Filters\n        // 4. view.SearchTypes\n        // 5. view.FilterNegative\n        // 6. view.ClearFilters\n        // 7. view.FiltersCleared\n\n        // 処理概要\n        // 1-1.「view.Id」で選択しているビューIDを確認\n        // 2-1.「view.Sorters()」で「数値A(NumA)：昇順」をもとにデータを並び替え\n        // 2-2.「items.Get()」で並び替えしたデータを確認\n        // 3-1.「view.Filters」で「タイトル(Title)：中野」をもとにデータを絞り込み\n        // 3-2.「items.Get()」で絞り込みしたデータを確認\n        // 4-1.「view.SearchTypes()」で「タイトル(Title)：完全一致」をもとにデータを検索\n        // 4-2.「items.Get()」で検索したデータを確認\n        // 5-1.「view.FilterNegative()」で「タイトル(Title)：中野」をもとにデータの絞り込み\n        // 5-2.「items.Get()」で絞り込みしたデータを確認\n        // 6-1.「view.ClearFilters()」でデータの絞り込みを解除\n        // 6-2.「items.Get()」で絞り込みを解除したデータを確認\n        // 7-1.「view.FiltersCleared()」で「view.ClearFilters()」が実行されていることを確認\n\n        // サーバスクリプト(ID：1)：ServerScriptWhenViewProcessing\n        // ロジック箇所\n        // 1. view.Id\n        // 1-1.「view.Id」で選択しているビューIDを確認\n        judgeResult('view.Id === 0', 'view.Id');\n\n        // 2. view.Sorters\n        // 2-1.「view.Sorters()」で「数値A(NumA)：昇順」をもとにデータを並び替え\n        view.Sorters.NumA = 'desc'; // 7件\n        // 2-2.「items.Get()」で並び替えしたデータを確認\n        judgeResult('items.Get(2981).Length === 7', 'view.Sorters');\n\n        // 3. view.Filters\n        // 3-1.「view.Filters」で「タイトル(Title)：中野」をもとにデータを絞り込み\n        view.Filters.Title = '中野'; // 4件\n        // 3-2.「items.Get()」で絞り込みしたデータを確認\n        judgeResult('items.Get(2981).Length === 4', 'view.Filters');\n\n        // 4. view.SearchTypes\n        // 4-1.「view.SearchTypes()」で「タイトル(Title)：完全一致」をもとにデータを検索\n        view.SearchTypes.Title = 'ExactMatch'; // 1件\n        // 4-2.「items.Get()」で検索したデータを確認\n        judgeResult('items.Get(2981).Length === 1', 'view.SearchTypes');\n\n        // 5. view.FilterNegative\n        // 5-1.「view.FilterNegative()」で「タイトル(Title)：中野」をもとにデータの絞り込み\n        view.FilterNegative('Title'); // 6件\n        // 5-2.「items.Get()」で絞り込みしたデータを確認\n        judgeResult('items.Get(2981).Length === 6', 'view.FilterNegative');\n\n        // 6. view.ClearFilters\n        // 6-1.「view.ClearFilters()」でデータの絞り込みを解除\n        view.ClearFilters(); // 7件\n        // 6-2.「items.Get()」で絞り込みを解除したデータを確認\n        judgeResult('items.Get(2981).Length === 7', 'view.ClearFilters');\n\n        // 7. view.FiltersCleared\n        // 7-1.「view.FiltersCleared()」で「view.ClearFilters()」が実行されていることを確認\n        judgeResult('view.FiltersCleared === true', 'view.ClearFilters');\n\n        // 2. view.Sorters\n    } catch (ex) {\n        context.Log('【DEBUG】xUnit処理：実装エラー');\n        context.Log(ex.stack);\n    } finally {\n        context.Log('【DEBUG】xUnit処理：終了');\n    }\n\n    function createRecord(siteId, data) {\n        context.Log('【DEBUG】データ作成処理：開始');\n        try {\n            for (const datum of data) {\n                const apiModel = items.NewResult();\n                apiModel.Title = datum['Title'];\n                apiModel.Status = datum['Status'];\n                apiModel.NumA = datum['NumA'];\n                apiModel.Create(siteId);\n            }\n        } catch (ex) {\n            context.Log('【DEBUG】データ作成処理：実装エラー');\n            context.Log(ex.stack);\n        } finally {\n            context.Log('【DEBUG】データ作成処理：終了');\n        }\n    }\n\n    // 成功 or 失敗を判定\n    //  - 引数 -\n    // condition：判定条件\n    // targetFunction：対象機能名\n    function judgeResult(condition, targetFunction) {\n        context.Log('【DEBUG】' + targetFunction + '判定処理：開始');\n        try {\n            // 成功メッセージ\n            const successMessage = '：成功';\n            // 失敗メッセージ\n            const failureMessage = '：失敗';\n            // 成功CSS\n            const successCSS = 'alert-information';\n            // 失敗CSS\n            const failureCSS = 'alert-error';\n            context.Log('【INFO 】条件：' + condition);\n            if (condition) {\n                context.Log('【DEBUG】判定結果：成功');\n                context.AddMessage(targetFunction + successMessage, successCSS);\n            } else {\n                context.Log('【DEBUG】判定結果：失敗');\n                context.AddMessage(targetFunction + failureMessage, failureCSS);\n            }\n        } catch (ex) {\n            context.Log('【DEBUG】' + targetFunction + '判定処理：実装エラー');\n            context.Log(ex.stack);\n        } finally {\n            context.Log('【DEBUG】' + targetFunction + '判定処理：終了');\n        }\n    }\n}\n",
            "Id": 3
        }
    ],
    "UseNegativeFilters": true,
    "NoDisplayIfReadOnly": false
}