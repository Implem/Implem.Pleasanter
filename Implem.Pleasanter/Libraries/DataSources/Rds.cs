using Implem.DefinitionAccessor;
using Implem.Libraries.Classes;
using Implem.Libraries.DataSources.SqlServer;
using Implem.Libraries.Utilities;
using Implem.ParameterAccessor.Parts;
using Implem.Pleasanter.Libraries.Extensions;
using Implem.Pleasanter.Libraries.Requests;
using Implem.Pleasanter.Libraries.Server;
using Implem.Pleasanter.Libraries.Settings;
using Implem.Pleasanter.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
namespace Implem.Pleasanter.Libraries.DataSources
{
    public static class Rds
    {
        public static void ExecuteNonQuery(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            if (statements?.Any() == true)
            {
                using (var io = Def.SqlIoByUser(
                    rdsUser: context.RdsUser(),
                    connectionString: connectionString,
                    transactional: transactional,
                    writeSqlToDebugLog: writeSqlToDebugLog,
                    statements: statements))
                {
                    io.ExecuteNonQuery();
                }
            }
        }

        public static bool ExecuteScalar_bool(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_bool();
            }
        }

        public static int ExecuteScalar_int(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_int();
            }
        }

        public static long ExecuteScalar_long(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_long();
            }
        }

        public static decimal ExecuteScalar_decimal(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_decimal();
            }
        }

        public static DateTime ExecuteScalar_datetime(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_datetime();
            }
        }

        public static string ExecuteScalar_string(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_string();
            }
        }

        public static byte[] ExecuteScalar_bytes(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_bytes();
            }
        }

        public static SqlResponse ExecuteScalar_response(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool selectIdentity = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                selectIdentity: selectIdentity,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteScalar_response();
            }
        }

        public static DataTable ExecuteTable(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteTable();
            }
        }

        public static DataSet ExecuteDataSet(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteDataSet();
            }
        }

        public static List<SqlResponse> ExecuteDataSet_responses(
            Context context,
            string connectionString = null,
            bool transactional = false,
            bool writeSqlToDebugLog = true,
            params SqlStatement[] statements)
        {
            using (var io = Def.SqlIoByUser(
                rdsUser: context.RdsUser(),
                connectionString: connectionString,
                transactional: transactional,
                writeSqlToDebugLog: writeSqlToDebugLog,
                statements: statements))
            {
                return io.ExecuteDataSet_responses();
            }
        }

        public static SqlSelect SelectCount(
            string tableName,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string dataTableName = "Count",
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null)
        {
            return Select(
                tableName: tableName,
                tableType: tableType,
                dataTableName: dataTableName,
                column: new SqlColumnCollection().Add(
                    columnBracket: "*",
                    function: Sqls.Functions.Count),
                join: join,
                where: where,
                param: param);
        }

        public static SqlStatement RowCount(string dataTableName = null)
        {
            return new SqlStatement(
                commandText: "select '{\"Count\":' + convert(nvarchar(20),@@rowcount) + '}'\n",
                dataTableName: dataTableName);
        }

        public static SqlStatement If(string _if)
        {
            return new SqlStatement("if (" + _if + ") begin\n");
        }

        public static SqlStatement End()
        {
            return new SqlStatement("end\n");
        }

        public static SqlStatement Raw(string raw)
        {
            return new SqlStatement(raw);
        }

        public static int Count(DataSet dataSet)
        {
            return dataSet != null && dataSet.Tables.Contains("Count")
                ? dataSet.Tables["Count"].AsEnumerable().Sum(dataRow => dataRow[0].ToInt())
                : 0;
        }

        public static string DataColumnName(ColumnNameInfo column, string columnName)
        {
            return column?.Joined == true
                ? column.TableAlias + "," + columnName
                : columnName;
        }

        public static string IdColumn(string tableName)
        {
            switch (tableName)
            {
                case "Tenants": return "TenantId";
                case "Depts": return "DeptId";
                case "Groups": return "GroupId";
                case "Registrations": return "RegistrationId";
                case "Users": return "UserId";
                case "Sites": return "SiteId";
                case "Issues": return "IssueId";
                case "Results": return "ResultId";
                case "Wikis": return "WikiId";
                default: return null;
            }
        }

        public static string IdColumnBracket(this SiteSettings ss)
        {
            return $"[{ss.ReferenceType}].[{IdColumn(ss.ReferenceType)}]";
        }

        public static SqlWhereCollection Or(
            this SqlWhereCollection self,
            SqlWhereCollection or,
            bool _using = true)
        {
            return self.Add(or: or, _using: _using);
        }

        public static SqlWhereCollection Bool(
            this SqlWhereCollection where, Column column, string _operator)
        {
            return where.Add(
                tableName: column.TableName(),
                columnBrackets: new string[] { "[" + column.Name + "]" },
                _operator: _operator);
        }

        public static SqlStatement TenantsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement DemosStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement SessionsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement SysLogsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement StatusesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement ReminderSchedulesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement DeptsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement GroupsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement GroupMembersStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement RegistrationsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement UsersStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement LoginKeysStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement MailAddressesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement OutgoingMailsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement SearchIndexesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement ItemsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement SitesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement OrdersStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement ExportSettingsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement LinksStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement BinariesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement PermissionsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement IssuesStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement ResultsStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlStatement WikisStatement(
            string commandText,
            SqlParamCollection param = null)
        {
            return new SqlStatement
            {
                CommandText = commandText,
                SqlParamCollection = param
            };
        }

        public static SqlSelect Select(
            string tableName,
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[" + tableName + "]",
                HistoryTableBracket = "[" + tableName + "_history]",
                DeletedTableBracket = "[" + tableName + "_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlColumnCollection ItemTitle(
            this SqlColumnCollection self,
            string tableName,
            string _as = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    tableName: tableName + "_Items",
                    columnBracket: "[Title]",
                    columnName: "ItemTitle",
                    _as: _as ?? "ItemTitle")
                : self;
        }

        public static SqlColumnCollection WithItemTitle(
            this SqlColumnCollection sqlColumn,
            SiteSettings ss,
            Column column)
        {
            if (column != null)
            {
                sqlColumn.Add(column: column);
                var link = column.SiteSettings.Links
                    .Where(o => ss.JoinedSsHash.ContainsKey(o.SiteId))
                    .FirstOrDefault(o => o.ColumnName == column.Name);
                if (link != null)
                {
                    var linkedTableName = (!column.TableAlias.IsNullOrEmpty()
                        ? column.TableAlias + "-"
                        : string.Empty)
                            + link.LinkedTableName();
                    sqlColumn.Add(
                        columnBracket: "[Title]",
                        tableName: linkedTableName + "_Items",
                        _as: linkedTableName + ",ItemTitle");
                }
            }
            return sqlColumn;
        }

        public static SqlGroupByCollection WithItemTitle(
            this SqlGroupByCollection groupBy,
            SiteSettings ss,
            Column column)
        {
            if (column != null)
            {
                groupBy.Add(column: column);
                var link = column.SiteSettings.Links
                    .Where(o => ss.JoinedSsHash.ContainsKey(o.SiteId))
                    .FirstOrDefault(o => o.ColumnName == column.Name);
                if (link != null)
                {
                    var linkedTableName = (!column.TableAlias.IsNullOrEmpty()
                        ? column.TableAlias + "-"
                        : string.Empty)
                            + link.LinkedTableName();
                    groupBy.Add(
                        columnBracket: "[Title]",
                        tableName: linkedTableName + "_Items");
                }
            }
            return groupBy;
        }

        public static SqlColumnCollection Add(
            this SqlColumnCollection self,
            Column column,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            bool _using = true)
        {
            return column != null && _using
                ? self.Add(
                   tableName: column.TableName(),
                   columnBracket: ColumnBracket(column),
                   _as: _as ?? column.ColumnName,
                   function: function)
                : self;
        }

        public static SqlGroupByCollection Add(
            this SqlGroupByCollection self,
            Column column,
            bool _using = true)
        {
            return column != null && _using
                ? self.Add(
                   tableName: column.TableName(),
                   columnBracket: ColumnBracket(column))
                : self;
        }

        public static string ColumnBracket(Column column)
        {
            switch (column.SiteSettings.ReferenceType)
            {
                case "Tenants":
                    switch (column.Name)
                    {
                        case "TenantId": return "[TenantId]";
                        case "Ver": return "[Ver]";
                        case "TenantName": return "[TenantName]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "ContractSettings": return "[ContractSettings]";
                        case "ContractDeadline": return "[ContractDeadline]";
                        case "DisableAllUsersPermission": return "[DisableAllUsersPermission]";
                        case "LogoType": return "[LogoType]";
                        case "HtmlTitleTop": return "[HtmlTitleTop]";
                        case "HtmlTitleSite": return "[HtmlTitleSite]";
                        case "HtmlTitleRecord": return "[HtmlTitleRecord]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Demos":
                    switch (column.Name)
                    {
                        case "DemoId": return "[DemoId]";
                        case "Ver": return "[Ver]";
                        case "TenantId": return "[TenantId]";
                        case "Title": return "[Title]";
                        case "LoginId": return "[LoginId]";
                        case "Passphrase": return "[Passphrase]";
                        case "MailAddress": return "[MailAddress]";
                        case "Initialized": return "[Initialized]";
                        case "TimeLag": return "[TimeLag]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Sessions":
                    switch (column.Name)
                    {
                        case "SessionGuid": return "[SessionGuid]";
                        case "Key": return "[Key]";
                        case "Page": return "[Page]";
                        case "Value": return "[Value]";
                        case "ReadOnce": return "[ReadOnce]";
                        case "UserArea": return "[UserArea]";
                        case "Ver": return "[Ver]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "SysLogs":
                    switch (column.Name)
                    {
                        case "CreatedTime": return "[CreatedTime]";
                        case "SysLogId": return "[SysLogId]";
                        case "Ver": return "[Ver]";
                        case "StartTime": return "[StartTime]";
                        case "EndTime": return "[EndTime]";
                        case "SysLogType": return "[SysLogType]";
                        case "OnAzure": return "[OnAzure]";
                        case "MachineName": return "[MachineName]";
                        case "ServiceName": return "[ServiceName]";
                        case "TenantName": return "[TenantName]";
                        case "Application": return "[Application]";
                        case "Class": return "[Class]";
                        case "Method": return "[Method]";
                        case "RequestData": return "[RequestData]";
                        case "HttpMethod": return "[HttpMethod]";
                        case "RequestSize": return "[RequestSize]";
                        case "ResponseSize": return "[ResponseSize]";
                        case "Elapsed": return "[Elapsed]";
                        case "ApplicationAge": return "[ApplicationAge]";
                        case "ApplicationRequestInterval": return "[ApplicationRequestInterval]";
                        case "SessionAge": return "[SessionAge]";
                        case "SessionRequestInterval": return "[SessionRequestInterval]";
                        case "WorkingSet64": return "[WorkingSet64]";
                        case "VirtualMemorySize64": return "[VirtualMemorySize64]";
                        case "ProcessId": return "[ProcessId]";
                        case "ProcessName": return "[ProcessName]";
                        case "BasePriority": return "[BasePriority]";
                        case "Url": return "[Url]";
                        case "UrlReferer": return "[UrlReferer]";
                        case "UserHostName": return "[UserHostName]";
                        case "UserHostAddress": return "[UserHostAddress]";
                        case "UserLanguage": return "[UserLanguage]";
                        case "UserAgent": return "[UserAgent]";
                        case "SessionGuid": return "[SessionGuid]";
                        case "ErrMessage": return "[ErrMessage]";
                        case "ErrStackTrace": return "[ErrStackTrace]";
                        case "Title": return "[Title]";
                        case "InDebug": return "[InDebug]";
                        case "AssemblyVersion": return "[AssemblyVersion]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Statuses":
                    switch (column.Name)
                    {
                        case "TenantId": return "[TenantId]";
                        case "StatusId": return "[StatusId]";
                        case "Ver": return "[Ver]";
                        case "Value": return "[Value]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "ReminderSchedules":
                    switch (column.Name)
                    {
                        case "SiteId": return "[SiteId]";
                        case "Id": return "[Id]";
                        case "Ver": return "[Ver]";
                        case "ScheduledTime": return "[ScheduledTime]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Depts":
                    switch (column.Name)
                    {
                        case "TenantId": return "[TenantId]";
                        case "DeptId": return "[DeptId]";
                        case "Ver": return "[Ver]";
                        case "DeptCode": return "[DeptCode]";
                        case "Dept": return "[DeptId]";
                        case "DeptName": return "[DeptName]";
                        case "Body": return "[Body]";
                        case "Title": return "[Title]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Groups":
                    switch (column.Name)
                    {
                        case "TenantId": return "[TenantId]";
                        case "GroupId": return "[GroupId]";
                        case "Ver": return "[Ver]";
                        case "GroupName": return "[GroupName]";
                        case "Body": return "[Body]";
                        case "Title": return "[Title]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "GroupMembers":
                    switch (column.Name)
                    {
                        case "GroupId": return "[GroupId]";
                        case "DeptId": return "[DeptId]";
                        case "UserId": return "[UserId]";
                        case "Ver": return "[Ver]";
                        case "Admin": return "[Admin]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Registrations":
                    switch (column.Name)
                    {
                        case "TenantId": return "[TenantId]";
                        case "RegistrationId": return "[RegistrationId]";
                        case "Ver": return "[Ver]";
                        case "MailAddress": return "[MailAddress]";
                        case "Invitee": return "[Invitee]";
                        case "InviteeName": return "[InviteeName]";
                        case "LoginId": return "[LoginId]";
                        case "Name": return "[Name]";
                        case "Password": return "[Password]";
                        case "PasswordValidate": return "[PasswordValidate]";
                        case "Language": return "[Language]";
                        case "Passphrase": return "[Passphrase]";
                        case "Invitingflg": return "[Invitingflg]";
                        case "UserId": return "[UserId]";
                        case "DeptId": return "[DeptId]";
                        case "GroupId": return "[GroupId]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Users":
                    switch (column.Name)
                    {
                        case "TenantId": return "[TenantId]";
                        case "UserId": return "[UserId]";
                        case "Ver": return "[Ver]";
                        case "LoginId": return "[LoginId]";
                        case "GlobalId": return "[GlobalId]";
                        case "Name": return "[Name]";
                        case "UserCode": return "[UserCode]";
                        case "Password": return "[Password]";
                        case "PasswordValidate": return "[PasswordValidate]";
                        case "PasswordDummy": return "[PasswordDummy]";
                        case "RememberMe": return "[RememberMe]";
                        case "LastName": return "[LastName]";
                        case "FirstName": return "[FirstName]";
                        case "Birthday": return "[Birthday]";
                        case "Gender": return "[Gender]";
                        case "Language": return "[Language]";
                        case "TimeZone": return "[TimeZone]";
                        case "TimeZoneInfo": return "[TimeZoneInfo]";
                        case "DeptCode": return "[DeptCode]";
                        case "DeptId": return "[DeptId]";
                        case "Dept": return "[DeptId]";
                        case "FirstAndLastNameOrder": return "[FirstAndLastNameOrder]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "LastLoginTime": return "[LastLoginTime]";
                        case "PasswordExpirationTime": return "[PasswordExpirationTime]";
                        case "PasswordChangeTime": return "[PasswordChangeTime]";
                        case "NumberOfLogins": return "[NumberOfLogins]";
                        case "NumberOfDenial": return "[NumberOfDenial]";
                        case "TenantManager": return "[TenantManager]";
                        case "ServiceManager": return "[ServiceManager]";
                        case "Disabled": return "[Disabled]";
                        case "Lockout": return "[Lockout]";
                        case "LockoutCounter": return "[LockoutCounter]";
                        case "Developer": return "[Developer]";
                        case "UserSettings": return "[UserSettings]";
                        case "ApiKey": return "[ApiKey]";
                        case "OldPassword": return "[OldPassword]";
                        case "ChangedPassword": return "[ChangedPassword]";
                        case "ChangedPasswordValidator": return "[ChangedPasswordValidator]";
                        case "AfterResetPassword": return "[AfterResetPassword]";
                        case "AfterResetPasswordValidator": return "[AfterResetPasswordValidator]";
                        case "MailAddresses": return "[MailAddresses]";
                        case "DemoMailAddress": return "[DemoMailAddress]";
                        case "SessionGuid": return "[SessionGuid]";
                        case "LdapSearchRoot": return "[LdapSearchRoot]";
                        case "SynchronizedTime": return "[SynchronizedTime]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "LoginKeys":
                    switch (column.Name)
                    {
                        case "LoginId": return "[LoginId]";
                        case "Key": return "[Key]";
                        case "Ver": return "[Ver]";
                        case "TenantNames": return "[TenantNames]";
                        case "TenantId": return "[TenantId]";
                        case "UserId": return "[UserId]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "MailAddresses":
                    switch (column.Name)
                    {
                        case "OwnerId": return "[OwnerId]";
                        case "OwnerType": return "[OwnerType]";
                        case "MailAddressId": return "[MailAddressId]";
                        case "Ver": return "[Ver]";
                        case "MailAddress": return "[MailAddress]";
                        case "Title": return "[Title]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "OutgoingMails":
                    switch (column.Name)
                    {
                        case "ReferenceType": return "[ReferenceType]";
                        case "ReferenceId": return "[ReferenceId]";
                        case "ReferenceVer": return "[ReferenceVer]";
                        case "OutgoingMailId": return "[OutgoingMailId]";
                        case "Ver": return "[Ver]";
                        case "Host": return "[Host]";
                        case "Port": return "[Port]";
                        case "From": return "[From]";
                        case "To": return "[To]";
                        case "Cc": return "[Cc]";
                        case "Bcc": return "[Bcc]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "SentTime": return "[SentTime]";
                        case "DestinationSearchRange": return "[DestinationSearchRange]";
                        case "DestinationSearchText": return "[DestinationSearchText]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "SearchIndexes":
                    switch (column.Name)
                    {
                        case "Word": return "[Word]";
                        case "ReferenceId": return "[ReferenceId]";
                        case "Ver": return "[Ver]";
                        case "Priority": return "[Priority]";
                        case "ReferenceType": return "[ReferenceType]";
                        case "Title": return "[Title]";
                        case "Subset": return "[Subset]";
                        case "InheritPermission": return "[InheritPermission]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Items":
                    switch (column.Name)
                    {
                        case "ReferenceId": return "[ReferenceId]";
                        case "Ver": return "[Ver]";
                        case "ReferenceType": return "[ReferenceType]";
                        case "SiteId": return "[SiteId]";
                        case "Title": return "[Title]";
                        case "Site": return "[Site]";
                        case "FullText": return "[FullText]";
                        case "SearchIndexCreatedTime": return "[SearchIndexCreatedTime]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Sites":
                    switch (column.Name)
                    {
                        case "TenantId": return "[TenantId]";
                        case "SiteId": return "[SiteId]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "Ver": return "[Ver]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "TitleBody": return "[TitleBody]";
                        case "GridGuide": return "[GridGuide]";
                        case "EditorGuide": return "[EditorGuide]";
                        case "ReferenceType": return "[ReferenceType]";
                        case "ParentId": return "[ParentId]";
                        case "InheritPermission": return "[InheritPermission]";
                        case "SiteSettings": return "[SiteSettings]";
                        case "Publish": return "[Publish]";
                        case "LockedTime": return "[LockedTime]";
                        case "LockedUser": return "[LockedUser]";
                        case "Ancestors": return "[Ancestors]";
                        case "SiteMenu": return "[SiteMenu]";
                        case "MonitorChangesColumns": return "[MonitorChangesColumns]";
                        case "TitleColumns": return "[TitleColumns]";
                        case "Export": return "[Export]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Orders":
                    switch (column.Name)
                    {
                        case "ReferenceId": return "[ReferenceId]";
                        case "ReferenceType": return "[ReferenceType]";
                        case "OwnerId": return "[OwnerId]";
                        case "Ver": return "[Ver]";
                        case "Data": return "[Data]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "ExportSettings":
                    switch (column.Name)
                    {
                        case "ReferenceType": return "[ReferenceType]";
                        case "ReferenceId": return "[ReferenceId]";
                        case "Title": return "[Title]";
                        case "ExportSettingId": return "[ExportSettingId]";
                        case "Ver": return "[Ver]";
                        case "AddHeader": return "[AddHeader]";
                        case "ExportColumns": return "[ExportColumns]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Links":
                    switch (column.Name)
                    {
                        case "DestinationId": return "[DestinationId]";
                        case "SourceId": return "[SourceId]";
                        case "Ver": return "[Ver]";
                        case "ReferenceType": return "[ReferenceType]";
                        case "SiteId": return "[SiteId]";
                        case "Title": return "[Title]";
                        case "Subset": return "[Subset]";
                        case "SiteTitle": return "[Title]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Binaries":
                    switch (column.Name)
                    {
                        case "BinaryId": return "[BinaryId]";
                        case "TenantId": return "[TenantId]";
                        case "ReferenceId": return "[ReferenceId]";
                        case "Guid": return "[Guid]";
                        case "Ver": return "[Ver]";
                        case "BinaryType": return "[BinaryType]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "Bin": return "[Bin]";
                        case "Thumbnail": return "[Thumbnail]";
                        case "Icon": return "[Icon]";
                        case "FileName": return "[FileName]";
                        case "Extension": return "[Extension]";
                        case "Size": return "[Size]";
                        case "ContentType": return "[ContentType]";
                        case "BinarySettings": return "[BinarySettings]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Permissions":
                    switch (column.Name)
                    {
                        case "ReferenceId": return "[ReferenceId]";
                        case "DeptId": return "[DeptId]";
                        case "GroupId": return "[GroupId]";
                        case "UserId": return "[UserId]";
                        case "Ver": return "[Ver]";
                        case "DeptName": return "[DeptName]";
                        case "GroupName": return "[GroupName]";
                        case "Name": return "[Name]";
                        case "PermissionType": return "[PermissionType]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Issues":
                    switch (column.Name)
                    {
                        case "SiteId": return "[SiteId]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "IssueId": return "[IssueId]";
                        case "Ver": return "[Ver]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "TitleBody": return "[TitleBody]";
                        case "StartTime": return "[StartTime]";
                        case "CompletionTime": return "[CompletionTime]";
                        case "WorkValue": return "[WorkValue]";
                        case "ProgressRate": return "[ProgressRate]";
                        case "RemainingWorkValue": return "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))";
                        case "Status": return "[Status]";
                        case "Manager": return "[Manager]";
                        case "Owner": return "[Owner]";
                        case "SiteTitle": return "[SiteId]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Results":
                    switch (column.Name)
                    {
                        case "SiteId": return "[SiteId]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "ResultId": return "[ResultId]";
                        case "Ver": return "[Ver]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "TitleBody": return "[TitleBody]";
                        case "Status": return "[Status]";
                        case "Manager": return "[Manager]";
                        case "Owner": return "[Owner]";
                        case "SiteTitle": return "[SiteId]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                case "Wikis":
                    switch (column.Name)
                    {
                        case "SiteId": return "[SiteId]";
                        case "UpdatedTime": return "[UpdatedTime]";
                        case "WikiId": return "[WikiId]";
                        case "Ver": return "[Ver]";
                        case "Title": return "[Title]";
                        case "Body": return "[Body]";
                        case "TitleBody": return "[TitleBody]";
                        case "Comments": return "[Comments]";
                        case "Creator": return "[Creator]";
                        case "Updator": return "[Updator]";
                        case "CreatedTime": return "[CreatedTime]";
                        case "VerUp": return "[VerUp]";
                        case "Timestamp": return "[Timestamp]";
                        default: 
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? $"[{column.Name}]"
                                : null;
                    }
                default: return null;
            }
        }

        public static SqlOrderByCollection Add(
            this SqlOrderByCollection self,
            Column column,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            Sqls.Functions function = Sqls.Functions.None,
            bool _using = true)
        {
            if (!_using || column == null) return self;
            switch (column.SiteSettings.ReferenceType)
            {
                case "Tenants":
                    switch (column.Name)
                    {
                        case "TenantId":
                            return self.Tenants_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Tenants_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TenantName":
                            return self.Tenants_TenantName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Tenants_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Tenants_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ContractSettings":
                            return self.Tenants_ContractSettings(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ContractDeadline":
                            return self.Tenants_ContractDeadline(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DisableAllUsersPermission":
                            return self.Tenants_DisableAllUsersPermission(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LogoType":
                            return self.Tenants_LogoType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "HtmlTitleTop":
                            return self.Tenants_HtmlTitleTop(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "HtmlTitleSite":
                            return self.Tenants_HtmlTitleSite(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "HtmlTitleRecord":
                            return self.Tenants_HtmlTitleRecord(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Tenants_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Tenants_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Tenants_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Tenants_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Tenants_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Demos":
                    switch (column.Name)
                    {
                        case "DemoId":
                            return self.Demos_DemoId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Demos_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TenantId":
                            return self.Demos_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Demos_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LoginId":
                            return self.Demos_LoginId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Passphrase":
                            return self.Demos_Passphrase(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "MailAddress":
                            return self.Demos_MailAddress(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Initialized":
                            return self.Demos_Initialized(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Demos_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Demos_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Demos_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Demos_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Demos_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Sessions":
                    switch (column.Name)
                    {
                        case "SessionGuid":
                            return self.Sessions_SessionGuid(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Key":
                            return self.Sessions_Key(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Page":
                            return self.Sessions_Page(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Value":
                            return self.Sessions_Value(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReadOnce":
                            return self.Sessions_ReadOnce(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserArea":
                            return self.Sessions_UserArea(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Sessions_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Sessions_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Sessions_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Sessions_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Sessions_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Sessions_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "SysLogs":
                    switch (column.Name)
                    {
                        case "CreatedTime":
                            return self.SysLogs_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SysLogId":
                            return self.SysLogs_SysLogId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.SysLogs_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SysLogType":
                            return self.SysLogs_SysLogType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "OnAzure":
                            return self.SysLogs_OnAzure(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "MachineName":
                            return self.SysLogs_MachineName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ServiceName":
                            return self.SysLogs_ServiceName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TenantName":
                            return self.SysLogs_TenantName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Application":
                            return self.SysLogs_Application(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Class":
                            return self.SysLogs_Class(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Method":
                            return self.SysLogs_Method(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "RequestData":
                            return self.SysLogs_RequestData(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "HttpMethod":
                            return self.SysLogs_HttpMethod(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "RequestSize":
                            return self.SysLogs_RequestSize(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ResponseSize":
                            return self.SysLogs_ResponseSize(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Elapsed":
                            return self.SysLogs_Elapsed(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ApplicationAge":
                            return self.SysLogs_ApplicationAge(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ApplicationRequestInterval":
                            return self.SysLogs_ApplicationRequestInterval(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SessionAge":
                            return self.SysLogs_SessionAge(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SessionRequestInterval":
                            return self.SysLogs_SessionRequestInterval(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "WorkingSet64":
                            return self.SysLogs_WorkingSet64(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "VirtualMemorySize64":
                            return self.SysLogs_VirtualMemorySize64(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ProcessId":
                            return self.SysLogs_ProcessId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ProcessName":
                            return self.SysLogs_ProcessName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "BasePriority":
                            return self.SysLogs_BasePriority(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Url":
                            return self.SysLogs_Url(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UrlReferer":
                            return self.SysLogs_UrlReferer(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserHostName":
                            return self.SysLogs_UserHostName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserHostAddress":
                            return self.SysLogs_UserHostAddress(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserLanguage":
                            return self.SysLogs_UserLanguage(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserAgent":
                            return self.SysLogs_UserAgent(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SessionGuid":
                            return self.SysLogs_SessionGuid(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ErrMessage":
                            return self.SysLogs_ErrMessage(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ErrStackTrace":
                            return self.SysLogs_ErrStackTrace(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "InDebug":
                            return self.SysLogs_InDebug(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "AssemblyVersion":
                            return self.SysLogs_AssemblyVersion(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.SysLogs_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.SysLogs_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.SysLogs_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.SysLogs_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Statuses":
                    switch (column.Name)
                    {
                        case "TenantId":
                            return self.Statuses_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "StatusId":
                            return self.Statuses_StatusId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Statuses_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Value":
                            return self.Statuses_Value(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Statuses_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Statuses_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Statuses_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Statuses_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Statuses_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "ReminderSchedules":
                    switch (column.Name)
                    {
                        case "SiteId":
                            return self.ReminderSchedules_SiteId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Id":
                            return self.ReminderSchedules_Id(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.ReminderSchedules_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ScheduledTime":
                            return self.ReminderSchedules_ScheduledTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.ReminderSchedules_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.ReminderSchedules_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.ReminderSchedules_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.ReminderSchedules_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.ReminderSchedules_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Depts":
                    switch (column.Name)
                    {
                        case "TenantId":
                            return self.Depts_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptId":
                            return self.Depts_DeptId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Depts_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptCode":
                            return self.Depts_DeptCode(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Dept":
                            return self.Depts_Dept(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptName":
                            return self.Depts_DeptName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Depts_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Depts_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Depts_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Depts_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Depts_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Depts_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Groups":
                    switch (column.Name)
                    {
                        case "TenantId":
                            return self.Groups_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "GroupId":
                            return self.Groups_GroupId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Groups_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "GroupName":
                            return self.Groups_GroupName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Groups_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Groups_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Groups_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Groups_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Groups_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Groups_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "GroupMembers":
                    switch (column.Name)
                    {
                        case "GroupId":
                            return self.GroupMembers_GroupId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptId":
                            return self.GroupMembers_DeptId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserId":
                            return self.GroupMembers_UserId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.GroupMembers_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Admin":
                            return self.GroupMembers_Admin(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.GroupMembers_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.GroupMembers_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.GroupMembers_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.GroupMembers_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.GroupMembers_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Registrations":
                    switch (column.Name)
                    {
                        case "TenantId":
                            return self.Registrations_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "RegistrationId":
                            return self.Registrations_RegistrationId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Registrations_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "MailAddress":
                            return self.Registrations_MailAddress(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Invitee":
                            return self.Registrations_Invitee(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "InviteeName":
                            return self.Registrations_InviteeName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LoginId":
                            return self.Registrations_LoginId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Name":
                            return self.Registrations_Name(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Password":
                            return self.Registrations_Password(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Language":
                            return self.Registrations_Language(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Passphrase":
                            return self.Registrations_Passphrase(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Invitingflg":
                            return self.Registrations_Invitingflg(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserId":
                            return self.Registrations_UserId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptId":
                            return self.Registrations_DeptId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "GroupId":
                            return self.Registrations_GroupId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Registrations_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Registrations_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Registrations_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Registrations_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Registrations_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Users":
                    switch (column.Name)
                    {
                        case "TenantId":
                            return self.Users_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserId":
                            return self.Users_UserId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Users_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LoginId":
                            return self.Users_LoginId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "GlobalId":
                            return self.Users_GlobalId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Name":
                            return self.Users_Name(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserCode":
                            return self.Users_UserCode(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Password":
                            return self.Users_Password(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LastName":
                            return self.Users_LastName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "FirstName":
                            return self.Users_FirstName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Birthday":
                            return self.Users_Birthday(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Gender":
                            return self.Users_Gender(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Language":
                            return self.Users_Language(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TimeZone":
                            return self.Users_TimeZone(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptCode":
                            return self.Users_DeptCode(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptId":
                            return self.Users_DeptId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Dept":
                            return self.Users_Dept(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "FirstAndLastNameOrder":
                            return self.Users_FirstAndLastNameOrder(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Users_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LastLoginTime":
                            return self.Users_LastLoginTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "PasswordExpirationTime":
                            return self.Users_PasswordExpirationTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "PasswordChangeTime":
                            return self.Users_PasswordChangeTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "NumberOfLogins":
                            return self.Users_NumberOfLogins(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "NumberOfDenial":
                            return self.Users_NumberOfDenial(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TenantManager":
                            return self.Users_TenantManager(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ServiceManager":
                            return self.Users_ServiceManager(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Disabled":
                            return self.Users_Disabled(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Lockout":
                            return self.Users_Lockout(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LockoutCounter":
                            return self.Users_LockoutCounter(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Developer":
                            return self.Users_Developer(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserSettings":
                            return self.Users_UserSettings(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ApiKey":
                            return self.Users_ApiKey(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LdapSearchRoot":
                            return self.Users_LdapSearchRoot(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SynchronizedTime":
                            return self.Users_SynchronizedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Users_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Users_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Users_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Users_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Users_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "LoginKeys":
                    switch (column.Name)
                    {
                        case "LoginId":
                            return self.LoginKeys_LoginId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Key":
                            return self.LoginKeys_Key(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.LoginKeys_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TenantNames":
                            return self.LoginKeys_TenantNames(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TenantId":
                            return self.LoginKeys_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserId":
                            return self.LoginKeys_UserId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.LoginKeys_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.LoginKeys_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.LoginKeys_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.LoginKeys_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.LoginKeys_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "MailAddresses":
                    switch (column.Name)
                    {
                        case "OwnerId":
                            return self.MailAddresses_OwnerId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "OwnerType":
                            return self.MailAddresses_OwnerType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "MailAddressId":
                            return self.MailAddresses_MailAddressId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.MailAddresses_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "MailAddress":
                            return self.MailAddresses_MailAddress(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.MailAddresses_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.MailAddresses_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.MailAddresses_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.MailAddresses_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.MailAddresses_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "OutgoingMails":
                    switch (column.Name)
                    {
                        case "ReferenceType":
                            return self.OutgoingMails_ReferenceType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceId":
                            return self.OutgoingMails_ReferenceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceVer":
                            return self.OutgoingMails_ReferenceVer(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "OutgoingMailId":
                            return self.OutgoingMails_OutgoingMailId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.OutgoingMails_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Host":
                            return self.OutgoingMails_Host(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Port":
                            return self.OutgoingMails_Port(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "From":
                            return self.OutgoingMails_From(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "To":
                            return self.OutgoingMails_To(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Cc":
                            return self.OutgoingMails_Cc(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Bcc":
                            return self.OutgoingMails_Bcc(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.OutgoingMails_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.OutgoingMails_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SentTime":
                            return self.OutgoingMails_SentTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.OutgoingMails_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.OutgoingMails_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.OutgoingMails_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.OutgoingMails_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.OutgoingMails_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "SearchIndexes":
                    switch (column.Name)
                    {
                        case "Word":
                            return self.SearchIndexes_Word(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceId":
                            return self.SearchIndexes_ReferenceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.SearchIndexes_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Priority":
                            return self.SearchIndexes_Priority(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceType":
                            return self.SearchIndexes_ReferenceType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.SearchIndexes_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Subset":
                            return self.SearchIndexes_Subset(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "InheritPermission":
                            return self.SearchIndexes_InheritPermission(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.SearchIndexes_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.SearchIndexes_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.SearchIndexes_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.SearchIndexes_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.SearchIndexes_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Items":
                    switch (column.Name)
                    {
                        case "ReferenceId":
                            return self.Items_ReferenceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Items_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceType":
                            return self.Items_ReferenceType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SiteId":
                            return self.Items_SiteId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Items_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "FullText":
                            return self.Items_FullText(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SearchIndexCreatedTime":
                            return self.Items_SearchIndexCreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Items_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Items_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Items_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Items_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Items_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Sites":
                    switch (column.Name)
                    {
                        case "TenantId":
                            return self.Sites_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SiteId":
                            return self.Sites_SiteId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Sites_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Sites_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Sites_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Sites_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TitleBody":
                            return self.Sites_TitleBody(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "GridGuide":
                            return self.Sites_GridGuide(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "EditorGuide":
                            return self.Sites_EditorGuide(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceType":
                            return self.Sites_ReferenceType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ParentId":
                            return self.Sites_ParentId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "InheritPermission":
                            return self.Sites_InheritPermission(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SiteSettings":
                            return self.Sites_SiteSettings(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Publish":
                            return self.Sites_Publish(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LockedTime":
                            return self.Sites_LockedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "LockedUser":
                            return self.Sites_LockedUser(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Sites_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Sites_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Sites_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Sites_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Orders":
                    switch (column.Name)
                    {
                        case "ReferenceId":
                            return self.Orders_ReferenceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceType":
                            return self.Orders_ReferenceType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "OwnerId":
                            return self.Orders_OwnerId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Orders_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Data":
                            return self.Orders_Data(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Orders_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Orders_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Orders_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Orders_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Orders_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "ExportSettings":
                    switch (column.Name)
                    {
                        case "ReferenceType":
                            return self.ExportSettings_ReferenceType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceId":
                            return self.ExportSettings_ReferenceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.ExportSettings_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ExportSettingId":
                            return self.ExportSettings_ExportSettingId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.ExportSettings_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "AddHeader":
                            return self.ExportSettings_AddHeader(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ExportColumns":
                            return self.ExportSettings_ExportColumns(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.ExportSettings_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.ExportSettings_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.ExportSettings_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.ExportSettings_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.ExportSettings_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Links":
                    switch (column.Name)
                    {
                        case "DestinationId":
                            return self.Links_DestinationId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SourceId":
                            return self.Links_SourceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Links_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceType":
                            return self.Links_ReferenceType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SiteId":
                            return self.Links_SiteId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Links_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Subset":
                            return self.Links_Subset(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SiteTitle":
                            return self.Links_SiteTitle(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Links_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Links_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Links_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Links_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Links_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Binaries":
                    switch (column.Name)
                    {
                        case "BinaryId":
                            return self.Binaries_BinaryId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TenantId":
                            return self.Binaries_TenantId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ReferenceId":
                            return self.Binaries_ReferenceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Guid":
                            return self.Binaries_Guid(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Binaries_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "BinaryType":
                            return self.Binaries_BinaryType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Binaries_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Binaries_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Bin":
                            return self.Binaries_Bin(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Thumbnail":
                            return self.Binaries_Thumbnail(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Icon":
                            return self.Binaries_Icon(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "FileName":
                            return self.Binaries_FileName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Extension":
                            return self.Binaries_Extension(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Size":
                            return self.Binaries_Size(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ContentType":
                            return self.Binaries_ContentType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "BinarySettings":
                            return self.Binaries_BinarySettings(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Binaries_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Binaries_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Binaries_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Binaries_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Binaries_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Permissions":
                    switch (column.Name)
                    {
                        case "ReferenceId":
                            return self.Permissions_ReferenceId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptId":
                            return self.Permissions_DeptId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "GroupId":
                            return self.Permissions_GroupId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UserId":
                            return self.Permissions_UserId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Permissions_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "DeptName":
                            return self.Permissions_DeptName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "GroupName":
                            return self.Permissions_GroupName(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Name":
                            return self.Permissions_Name(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "PermissionType":
                            return self.Permissions_PermissionType(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Permissions_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Permissions_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Permissions_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Permissions_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Permissions_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Issues":
                    switch (column.Name)
                    {
                        case "SiteId":
                            return self.Issues_SiteId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Issues_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "IssueId":
                            return self.Issues_IssueId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Issues_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Issues_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Issues_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TitleBody":
                            return self.Issues_TitleBody(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "StartTime":
                            return self.Issues_StartTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CompletionTime":
                            return self.Issues_CompletionTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "WorkValue":
                            return self.Issues_WorkValue(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ProgressRate":
                            return self.Issues_ProgressRate(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "RemainingWorkValue":
                            return self.Issues_RemainingWorkValue(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Status":
                            return self.Issues_Status(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Manager":
                            return self.Issues_Manager(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Owner":
                            return self.Issues_Owner(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SiteTitle":
                            return self.Issues_SiteTitle(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Issues_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Issues_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Issues_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Issues_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Results":
                    switch (column.Name)
                    {
                        case "SiteId":
                            return self.Results_SiteId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Results_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "ResultId":
                            return self.Results_ResultId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Results_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Results_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Results_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TitleBody":
                            return self.Results_TitleBody(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Status":
                            return self.Results_Status(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Manager":
                            return self.Results_Manager(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Owner":
                            return self.Results_Owner(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "SiteTitle":
                            return self.Results_SiteTitle(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Results_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Results_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Results_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Results_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                case "Wikis":
                    switch (column.Name)
                    {
                        case "SiteId":
                            return self.Wikis_SiteId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "UpdatedTime":
                            return self.Wikis_UpdatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "WikiId":
                            return self.Wikis_WikiId(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Ver":
                            return self.Wikis_Ver(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Title":
                            return self.Wikis_Title(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Body":
                            return self.Wikis_Body(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "TitleBody":
                            return self.Wikis_TitleBody(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Comments":
                            return self.Wikis_Comments(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Creator":
                            return self.Wikis_Creator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "Updator":
                            return self.Wikis_Updator(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        case "CreatedTime":
                            return self.Wikis_CreatedTime(
                                tableName: column.TableName(),
                                orderType: orderType,
                                function: function);
                        default:
                            return Def.ExtendedColumnTypes.ContainsKey(column.Name)
                                ? self.Add(
                                    columnBracket: $"[{column.Name}]",
                                    orderType: orderType,
                                    tableName: column.TableName(),
                                    function: function)
                                : self;
                    }
                default: return null;
            }
        }

        public static List<SqlStatement> OnCreatingExtendedSqls(
            this List<SqlStatement> statements, long siteId)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnCreating)
                .ExtendedSqls(statements, siteId);
            return statements;
        }

        public static List<SqlStatement> OnCreatedExtendedSqls(
            this List<SqlStatement> statements, long siteId, long id)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnCreated)
                .ExtendedSqls(statements, siteId, id);
            return statements;
        }

        public static List<SqlStatement> OnUpdatingExtendedSqls(
            this List<SqlStatement> statements, long siteId, long id, DateTime timestamp)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnUpdating)
                .ExtendedSqls(statements, siteId, id, timestamp);
            return statements;
        }

        public static List<SqlStatement> OnUpdatedExtendedSqls(
            this List<SqlStatement> statements, long siteId, long id)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnUpdated)
                .ExtendedSqls(statements, siteId, id);
            return statements;
        }

        public static List<SqlStatement> OnDeletingExtendedSqls(
            this List<SqlStatement> statements, long siteId, long id)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnDeleting)
                .ExtendedSqls(statements, siteId, id);
            return statements;
        }

        public static List<SqlStatement> OnDeletedExtendedSqls(
            this List<SqlStatement> statements, long siteId, long id)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnDeleted)
                .ExtendedSqls(statements, siteId, id);
            return statements;
        }

        public static List<SqlStatement> OnBulkDeletingExtendedSqls(
            this List<SqlStatement> statements, long siteId)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnBulkDeleting)
                .ExtendedSqls(statements, siteId);
            return statements;
        }

        public static List<SqlStatement> OnBulkDeletedExtendedSqls(
            this List<SqlStatement> statements, long siteId)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnBulkDeleted)
                .ExtendedSqls(statements, siteId);
            return statements;
        }

        public static List<SqlStatement> OnImportingExtendedSqls(
            this List<SqlStatement> statements, long siteId)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnImporting)
                .ExtendedSqls(statements, siteId);
            return statements;
        }

        public static List<SqlStatement> OnImportedExtendedSqls(
            this List<SqlStatement> statements, long siteId)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnImported)
                .ExtendedSqls(statements, siteId);
            return statements;
        }

         public static SqlWhereCollection OnSelectingWhereExtendedSqls(
            this SqlWhereCollection where, SiteSettings ss)
        {
            Parameters.ExtendedSqls?
                .Where(o => o.OnSelectingWhere)
                .ExtendedSqlsWhere(where, ss);
            return where;
        }

        public static IEnumerable<ExtendedSql> ExtendedSqls(long siteId, long id)
        {
            return Parameters.ExtendedSqls?
                .Where(o => o.SiteIdList?.Contains(siteId) == true)
                .Where(o => o.IdList?.Any() != true || o.IdList.Contains(id))
                .Where(o => !o.Disabled);
        }

        private static void ExtendedSqls(
            this IEnumerable<ExtendedSql> self,
            List<SqlStatement> statements,
            long siteId,
            long id = 0,
            DateTime? timestamp = null)
        {
            self
                .Where(o => o.SiteIdList?.Contains(siteId) == true)
                .Where(o => o.IdList?.Any() != true || o.IdList.Contains(id))
                .Where(o => !o.Disabled)
                .ForEach(o =>
                    statements.Add(new SqlStatement()
                    {
                        CommandText = o.CommandText
                            .Replace("{{SiteId}}", siteId.ToString())
                            .Replace("{{Id}}", id.ToString())
                            .Replace("{{Timestamp}}", timestamp?.ToString("yyyy/M/d H:m:s.fff"))
                    }));
        }

        private static void ExtendedSqlsWhere(
            this IEnumerable<ExtendedSql> self,
            SqlWhereCollection where,
            SiteSettings ss,
            long id = 0,
            DateTime? timestamp = null)
        {
            self
                .Where(o => o.SiteIdList?.Contains(ss.SiteId) == true)
                .Where(o => o.IdList?.Any() != true || o.IdList.Contains(id))
                .Where(o => !o.Disabled)
                .ForEach(o =>
                    where.Add(new SqlWhereCollection()
                       .Add(
                            tableName: ss.ReferenceType,
                            raw: o.CommandText
                                .Replace("{{SiteId}}", ss.SiteId.ToString())
                                .Replace("{{Id}}", id.ToString())
                                .Replace("{{Timestamp}}", timestamp?.ToString("yyyy/M/d H:m:s.fff")))));
        }

        public static IssuesWhereCollection OnSelectingIssuesWhereExtendedSqls(
            this IssuesWhereCollection Where,
            IssueModel issueModel)
        {
            Parameters.ExtendedSqls?
                    .Where(o => o.OnSelectingWhere)
                    .ExtendedSqlsWhereIssues(Where, issueModel);
            return Where;
        }

        private static void ExtendedSqlsWhereIssues(
            this IEnumerable<ExtendedSql> self,
            IssuesWhereCollection where,
            IssueModel issueModel,
            long id = 0,
            DateTime? timestamp = null)
        {
            self
                .Where(o => o.SiteIdList?.Contains(issueModel.SiteId) == true)
                .Where(o => o.IdList?.Any() != true || o.IdList.Contains(id))
                .Where(o => !o.Disabled)
                .ForEach(o =>
                    where.Add(new IssuesWhereCollection()
                        .Add(
                            raw: o.CommandText
                                .Replace("{{SiteId}}", issueModel.SiteId.ToString())
                                .Replace("{{Id}}", id.ToString())
                                .Replace("{{Timestamp}}", timestamp?.ToString("yyyy/M/d H:m:s.fff")))));
        }

        public static ResultsWhereCollection OnSelectingResultsWhereExtendedSqls(
            this ResultsWhereCollection Where,
            ResultModel resultModel)
        {
            Parameters.ExtendedSqls?
                    .Where(o => o.OnSelectingWhere)
                    .ExtendedSqlsWhereResults(Where, resultModel);
            return Where;
        }

        private static void ExtendedSqlsWhereResults(
            this IEnumerable<ExtendedSql> self,
            ResultsWhereCollection where,
            ResultModel resultModel,
            long id = 0,
            DateTime? timestamp = null)
        {
            self
                .Where(o => o.SiteIdList?.Contains(resultModel.SiteId) == true)
                .Where(o => o.IdList?.Any() != true || o.IdList.Contains(id))
                .Where(o => !o.Disabled)
                .ForEach(o =>
                    where.Add(new ResultsWhereCollection()
                        .Add(
                            raw: o.CommandText
                                .Replace("{{SiteId}}", resultModel.SiteId.ToString())
                                .Replace("{{Id}}", id.ToString())
                                .Replace("{{Timestamp}}", timestamp?.ToString("yyyy/M/d H:m:s.fff")))));
        }

        public static SqlSelect SelectTenants(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectDemos(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectSessions(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectSysLogs(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectStatuses(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectReminderSchedules(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectDepts(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectGroups(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectGroupMembers(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectRegistrations(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectUsers(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectLoginKeys(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectMailAddresses(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectOutgoingMails(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectSearchIndexes(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectItems(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectSites(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectOrders(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectExportSettings(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectLinks(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectBinaries(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectPermissions(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectIssues(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectResults(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlSelect SelectWikis(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            string _as = null,
            SqlColumnCollection column = null,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            SqlGroupByCollection groupBy = null,
            SqlHavingCollection having = null,
            SqlOrderByCollection orderBy = null,
            SqlParamCollection param = null,
            bool distinct = false,
            int top = 0,
            int offset = 0,
            int pageSize = 0,
            Sqls.UnionTypes unionType = Sqls.UnionTypes.None,
            bool _using = true)
        {
            return new SqlSelect
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                As = _as,
                SqlColumnCollection = column,
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                SqlGroupByCollection = groupBy,
                SqlHavingCollection = having,
                SqlOrderByCollection = orderBy,
                SqlParamCollection = param,
                Distinct = distinct,
                Top = top,
                Offset = offset,
                PageSize = pageSize,
                UnionType = unionType,
                Using = _using
            };
        }

        public static SqlExists ExistsTenants(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsDemos(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsSessions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsSysLogs(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsStatuses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsReminderSchedules(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsDepts(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsGroups(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsGroupMembers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsRegistrations(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsUsers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsLoginKeys(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsMailAddresses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsOutgoingMails(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsSearchIndexes(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsItems(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsSites(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsOrders(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsExportSettings(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsLinks(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsBinaries(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsPermissions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsIssues(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsResults(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlExists ExistsWikis(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool not = false,
            SqlJoinCollection join = null,
            SqlWhereCollection where = null,
            bool _using = true)
        {
            return new SqlExists
            {
                TableType = tableType,
                Not = not,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlJoinCollection = join,
                SqlWhereCollection = where,
                Using = _using
            };
        }

        public static SqlInsert InsertTenants(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertTenants(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Tenants] on;")
                : new SqlStatement("set identity_insert [Tenants] off;");
        }

        public static SqlStatement IdentityInsertTenants_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Tenants_Deleted] on;")
                : new SqlStatement("set identity_insert [Tenants_Deleted] off;");
        }

        public static SqlStatement IdentityInsertTenants_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Tenants_History] on;")
                : new SqlStatement("set identity_insert [Tenants_History] off;");
        }

        public static SqlInsert InsertDemos(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertDemos(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Demos] on;")
                : new SqlStatement("set identity_insert [Demos] off;");
        }

        public static SqlStatement IdentityInsertDemos_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Demos_Deleted] on;")
                : new SqlStatement("set identity_insert [Demos_Deleted] off;");
        }

        public static SqlStatement IdentityInsertDemos_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Demos_History] on;")
                : new SqlStatement("set identity_insert [Demos_History] off;");
        }

        public static SqlInsert InsertSessions(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertSessions(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sessions] on;")
                : new SqlStatement("set identity_insert [Sessions] off;");
        }

        public static SqlStatement IdentityInsertSessions_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sessions_Deleted] on;")
                : new SqlStatement("set identity_insert [Sessions_Deleted] off;");
        }

        public static SqlStatement IdentityInsertSessions_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sessions_History] on;")
                : new SqlStatement("set identity_insert [Sessions_History] off;");
        }

        public static SqlInsert InsertSysLogs(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertSysLogs(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SysLogs] on;")
                : new SqlStatement("set identity_insert [SysLogs] off;");
        }

        public static SqlStatement IdentityInsertSysLogs_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SysLogs_Deleted] on;")
                : new SqlStatement("set identity_insert [SysLogs_Deleted] off;");
        }

        public static SqlStatement IdentityInsertSysLogs_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SysLogs_History] on;")
                : new SqlStatement("set identity_insert [SysLogs_History] off;");
        }

        public static SqlInsert InsertStatuses(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertStatuses(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Statuses] on;")
                : new SqlStatement("set identity_insert [Statuses] off;");
        }

        public static SqlStatement IdentityInsertStatuses_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Statuses_Deleted] on;")
                : new SqlStatement("set identity_insert [Statuses_Deleted] off;");
        }

        public static SqlStatement IdentityInsertStatuses_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Statuses_History] on;")
                : new SqlStatement("set identity_insert [Statuses_History] off;");
        }

        public static SqlInsert InsertReminderSchedules(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertReminderSchedules(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ReminderSchedules] on;")
                : new SqlStatement("set identity_insert [ReminderSchedules] off;");
        }

        public static SqlStatement IdentityInsertReminderSchedules_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ReminderSchedules_Deleted] on;")
                : new SqlStatement("set identity_insert [ReminderSchedules_Deleted] off;");
        }

        public static SqlStatement IdentityInsertReminderSchedules_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ReminderSchedules_History] on;")
                : new SqlStatement("set identity_insert [ReminderSchedules_History] off;");
        }

        public static SqlInsert InsertDepts(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertDepts(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Depts] on;")
                : new SqlStatement("set identity_insert [Depts] off;");
        }

        public static SqlStatement IdentityInsertDepts_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Depts_Deleted] on;")
                : new SqlStatement("set identity_insert [Depts_Deleted] off;");
        }

        public static SqlStatement IdentityInsertDepts_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Depts_History] on;")
                : new SqlStatement("set identity_insert [Depts_History] off;");
        }

        public static SqlInsert InsertGroups(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertGroups(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Groups] on;")
                : new SqlStatement("set identity_insert [Groups] off;");
        }

        public static SqlStatement IdentityInsertGroups_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Groups_Deleted] on;")
                : new SqlStatement("set identity_insert [Groups_Deleted] off;");
        }

        public static SqlStatement IdentityInsertGroups_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Groups_History] on;")
                : new SqlStatement("set identity_insert [Groups_History] off;");
        }

        public static SqlInsert InsertGroupMembers(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertGroupMembers(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [GroupMembers] on;")
                : new SqlStatement("set identity_insert [GroupMembers] off;");
        }

        public static SqlStatement IdentityInsertGroupMembers_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [GroupMembers_Deleted] on;")
                : new SqlStatement("set identity_insert [GroupMembers_Deleted] off;");
        }

        public static SqlStatement IdentityInsertGroupMembers_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [GroupMembers_History] on;")
                : new SqlStatement("set identity_insert [GroupMembers_History] off;");
        }

        public static SqlInsert InsertRegistrations(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertRegistrations(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Registrations] on;")
                : new SqlStatement("set identity_insert [Registrations] off;");
        }

        public static SqlStatement IdentityInsertRegistrations_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Registrations_Deleted] on;")
                : new SqlStatement("set identity_insert [Registrations_Deleted] off;");
        }

        public static SqlStatement IdentityInsertRegistrations_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Registrations_History] on;")
                : new SqlStatement("set identity_insert [Registrations_History] off;");
        }

        public static SqlInsert InsertUsers(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertUsers(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Users] on;")
                : new SqlStatement("set identity_insert [Users] off;");
        }

        public static SqlStatement IdentityInsertUsers_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Users_Deleted] on;")
                : new SqlStatement("set identity_insert [Users_Deleted] off;");
        }

        public static SqlStatement IdentityInsertUsers_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Users_History] on;")
                : new SqlStatement("set identity_insert [Users_History] off;");
        }

        public static SqlInsert InsertLoginKeys(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertLoginKeys(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [LoginKeys] on;")
                : new SqlStatement("set identity_insert [LoginKeys] off;");
        }

        public static SqlStatement IdentityInsertLoginKeys_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [LoginKeys_Deleted] on;")
                : new SqlStatement("set identity_insert [LoginKeys_Deleted] off;");
        }

        public static SqlStatement IdentityInsertLoginKeys_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [LoginKeys_History] on;")
                : new SqlStatement("set identity_insert [LoginKeys_History] off;");
        }

        public static SqlInsert InsertMailAddresses(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertMailAddresses(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [MailAddresses] on;")
                : new SqlStatement("set identity_insert [MailAddresses] off;");
        }

        public static SqlStatement IdentityInsertMailAddresses_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [MailAddresses_Deleted] on;")
                : new SqlStatement("set identity_insert [MailAddresses_Deleted] off;");
        }

        public static SqlStatement IdentityInsertMailAddresses_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [MailAddresses_History] on;")
                : new SqlStatement("set identity_insert [MailAddresses_History] off;");
        }

        public static SqlInsert InsertOutgoingMails(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertOutgoingMails(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [OutgoingMails] on;")
                : new SqlStatement("set identity_insert [OutgoingMails] off;");
        }

        public static SqlStatement IdentityInsertOutgoingMails_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [OutgoingMails_Deleted] on;")
                : new SqlStatement("set identity_insert [OutgoingMails_Deleted] off;");
        }

        public static SqlStatement IdentityInsertOutgoingMails_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [OutgoingMails_History] on;")
                : new SqlStatement("set identity_insert [OutgoingMails_History] off;");
        }

        public static SqlInsert InsertSearchIndexes(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertSearchIndexes(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SearchIndexes] on;")
                : new SqlStatement("set identity_insert [SearchIndexes] off;");
        }

        public static SqlStatement IdentityInsertSearchIndexes_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SearchIndexes_Deleted] on;")
                : new SqlStatement("set identity_insert [SearchIndexes_Deleted] off;");
        }

        public static SqlStatement IdentityInsertSearchIndexes_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [SearchIndexes_History] on;")
                : new SqlStatement("set identity_insert [SearchIndexes_History] off;");
        }

        public static SqlInsert InsertItems(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertItems(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Items] on;")
                : new SqlStatement("set identity_insert [Items] off;");
        }

        public static SqlStatement IdentityInsertItems_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Items_Deleted] on;")
                : new SqlStatement("set identity_insert [Items_Deleted] off;");
        }

        public static SqlStatement IdentityInsertItems_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Items_History] on;")
                : new SqlStatement("set identity_insert [Items_History] off;");
        }

        public static SqlInsert InsertSites(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertSites(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sites] on;")
                : new SqlStatement("set identity_insert [Sites] off;");
        }

        public static SqlStatement IdentityInsertSites_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sites_Deleted] on;")
                : new SqlStatement("set identity_insert [Sites_Deleted] off;");
        }

        public static SqlStatement IdentityInsertSites_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Sites_History] on;")
                : new SqlStatement("set identity_insert [Sites_History] off;");
        }

        public static SqlInsert InsertOrders(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertOrders(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Orders] on;")
                : new SqlStatement("set identity_insert [Orders] off;");
        }

        public static SqlStatement IdentityInsertOrders_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Orders_Deleted] on;")
                : new SqlStatement("set identity_insert [Orders_Deleted] off;");
        }

        public static SqlStatement IdentityInsertOrders_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Orders_History] on;")
                : new SqlStatement("set identity_insert [Orders_History] off;");
        }

        public static SqlInsert InsertExportSettings(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertExportSettings(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ExportSettings] on;")
                : new SqlStatement("set identity_insert [ExportSettings] off;");
        }

        public static SqlStatement IdentityInsertExportSettings_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ExportSettings_Deleted] on;")
                : new SqlStatement("set identity_insert [ExportSettings_Deleted] off;");
        }

        public static SqlStatement IdentityInsertExportSettings_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [ExportSettings_History] on;")
                : new SqlStatement("set identity_insert [ExportSettings_History] off;");
        }

        public static SqlInsert InsertLinks(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertLinks(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Links] on;")
                : new SqlStatement("set identity_insert [Links] off;");
        }

        public static SqlStatement IdentityInsertLinks_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Links_Deleted] on;")
                : new SqlStatement("set identity_insert [Links_Deleted] off;");
        }

        public static SqlStatement IdentityInsertLinks_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Links_History] on;")
                : new SqlStatement("set identity_insert [Links_History] off;");
        }

        public static SqlInsert InsertBinaries(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertBinaries(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Binaries] on;")
                : new SqlStatement("set identity_insert [Binaries] off;");
        }

        public static SqlStatement IdentityInsertBinaries_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Binaries_Deleted] on;")
                : new SqlStatement("set identity_insert [Binaries_Deleted] off;");
        }

        public static SqlStatement IdentityInsertBinaries_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Binaries_History] on;")
                : new SqlStatement("set identity_insert [Binaries_History] off;");
        }

        public static SqlInsert InsertPermissions(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertPermissions(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Permissions] on;")
                : new SqlStatement("set identity_insert [Permissions] off;");
        }

        public static SqlStatement IdentityInsertPermissions_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Permissions_Deleted] on;")
                : new SqlStatement("set identity_insert [Permissions_Deleted] off;");
        }

        public static SqlStatement IdentityInsertPermissions_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Permissions_History] on;")
                : new SqlStatement("set identity_insert [Permissions_History] off;");
        }

        public static SqlInsert InsertIssues(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertIssues(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Issues] on;")
                : new SqlStatement("set identity_insert [Issues] off;");
        }

        public static SqlStatement IdentityInsertIssues_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Issues_Deleted] on;")
                : new SqlStatement("set identity_insert [Issues_Deleted] off;");
        }

        public static SqlStatement IdentityInsertIssues_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Issues_History] on;")
                : new SqlStatement("set identity_insert [Issues_History] off;");
        }

        public static SqlInsert InsertResults(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertResults(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Results] on;")
                : new SqlStatement("set identity_insert [Results] off;");
        }

        public static SqlStatement IdentityInsertResults_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Results_Deleted] on;")
                : new SqlStatement("set identity_insert [Results_Deleted] off;");
        }

        public static SqlStatement IdentityInsertResults_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Results_History] on;")
                : new SqlStatement("set identity_insert [Results_History] off;");
        }

        public static SqlInsert InsertWikis(
            string dataTableName = null,
            bool selectIdentity = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlParamCollection param = null,
            SqlStatement select = null,
            bool addUpdatorParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SelectIdentity = selectIdentity,
                SqlParamCollection = param,
                Select = select,
                AddUpdatorParam = addUpdatorParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlStatement IdentityInsertWikis(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Wikis] on;")
                : new SqlStatement("set identity_insert [Wikis] off;");
        }

        public static SqlStatement IdentityInsertWikis_Deleted(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Wikis_Deleted] on;")
                : new SqlStatement("set identity_insert [Wikis_Deleted] off;");
        }

        public static SqlStatement IdentityInsertWikis_History(bool on)
        {
            return on
                ? new SqlStatement("set identity_insert [Wikis_History] on;")
                : new SqlStatement("set identity_insert [Wikis_History] off;");
        }

        public static SqlUpdate UpdateTenants(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateDemos(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateSessions(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateSysLogs(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateStatuses(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateReminderSchedules(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateDepts(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateGroups(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateGroupMembers(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateRegistrations(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateUsers(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateLoginKeys(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateMailAddresses(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateOutgoingMails(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateSearchIndexes(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateItems(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateSites(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateOrders(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateExportSettings(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateLinks(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateBinaries(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdatePermissions(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateIssues(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateResults(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdate UpdateWikis(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdate
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertTenants(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertDemos(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertSessions(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertSysLogs(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertStatuses(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertReminderSchedules(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertDepts(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertGroups(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertGroupMembers(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertRegistrations(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertUsers(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertLoginKeys(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertMailAddresses(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertOutgoingMails(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertSearchIndexes(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertItems(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertSites(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertOrders(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertExportSettings(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertLinks(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertBinaries(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertPermissions(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertIssues(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertResults(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlUpdateOrInsert UpdateOrInsertWikis(
            string dataTableName = null,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            bool selectIdentity = false,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            bool addUpdatorParam = true,
            bool addUpdatedTimeParam = true,
            string _if = null,
            bool _using = true)
        {
            return new SqlUpdateOrInsert
            {
                DataTableName = dataTableName,
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SelectIdentity = selectIdentity,
                SqlWhereCollection = where,
                SqlParamCollection = param,
                AddUpdatorParam = addUpdatorParam,
                AddUpdatedTimeParam = addUpdatedTimeParam,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteTenants(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteTenantsStatement(),
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteDemos(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteDemosStatement(),
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteSessions(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteSessionsStatement(),
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteSysLogs(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteSysLogsStatement(),
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteStatuses(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteStatusesStatement(),
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteReminderSchedules(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteReminderSchedulesStatement(),
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteDepts(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteDeptsStatement(),
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteGroups(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteGroupsStatement(),
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteGroupMembers(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteGroupMembersStatement(),
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteRegistrations(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteRegistrationsStatement(),
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteUsers(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteUsersStatement(),
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteLoginKeys(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteLoginKeysStatement(),
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteMailAddresses(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteMailAddressesStatement(),
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteOutgoingMails(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteOutgoingMailsStatement(),
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteSearchIndexes(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteSearchIndexesStatement(),
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteItems(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteItemsStatement(),
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteSites(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteSitesStatement(),
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteOrders(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteOrdersStatement(),
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteExportSettings(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteExportSettingsStatement(),
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteLinks(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteLinksStatement(),
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteBinaries(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteBinariesStatement(),
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeletePermissions(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeletePermissionsStatement(),
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteIssues(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteIssuesStatement(),
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteResults(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteResultsStatement(),
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlDelete DeleteWikis(
            string dataTableName = null,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlDelete()
            {
                DataTableName = dataTableName,
                CommandText = DeleteWikisStatement(),
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteTenants(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteDemos(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteSessions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteSysLogs(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteStatuses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteReminderSchedules(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteDepts(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteGroups(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteGroupMembers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteRegistrations(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteUsers(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteLoginKeys(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteMailAddresses(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteOutgoingMails(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteSearchIndexes(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteItems(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteSites(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteOrders(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteExportSettings(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteLinks(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteBinaries(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeletePermissions(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteIssues(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteResults(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlPhysicalDelete PhysicalDeleteWikis(
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlPhysicalDelete()
            {
                TableType = tableType,
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreTenants(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreTenantsStatement(), 
                TableBracket = "[Tenants]",
                HistoryTableBracket = "[Tenants_history]",
                DeletedTableBracket = "[Tenants_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreDemos(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreDemosStatement(), 
                TableBracket = "[Demos]",
                HistoryTableBracket = "[Demos_history]",
                DeletedTableBracket = "[Demos_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreSessions(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreSessionsStatement(), 
                TableBracket = "[Sessions]",
                HistoryTableBracket = "[Sessions_history]",
                DeletedTableBracket = "[Sessions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreSysLogs(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreSysLogsStatement(), 
                TableBracket = "[SysLogs]",
                HistoryTableBracket = "[SysLogs_history]",
                DeletedTableBracket = "[SysLogs_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreStatuses(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreStatusesStatement(), 
                TableBracket = "[Statuses]",
                HistoryTableBracket = "[Statuses_history]",
                DeletedTableBracket = "[Statuses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreReminderSchedules(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreReminderSchedulesStatement(), 
                TableBracket = "[ReminderSchedules]",
                HistoryTableBracket = "[ReminderSchedules_history]",
                DeletedTableBracket = "[ReminderSchedules_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreDepts(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreDeptsStatement(), 
                TableBracket = "[Depts]",
                HistoryTableBracket = "[Depts_history]",
                DeletedTableBracket = "[Depts_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreGroups(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreGroupsStatement(), 
                TableBracket = "[Groups]",
                HistoryTableBracket = "[Groups_history]",
                DeletedTableBracket = "[Groups_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreGroupMembers(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreGroupMembersStatement(), 
                TableBracket = "[GroupMembers]",
                HistoryTableBracket = "[GroupMembers_history]",
                DeletedTableBracket = "[GroupMembers_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreRegistrations(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreRegistrationsStatement(), 
                TableBracket = "[Registrations]",
                HistoryTableBracket = "[Registrations_history]",
                DeletedTableBracket = "[Registrations_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreUsers(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreUsersStatement(), 
                TableBracket = "[Users]",
                HistoryTableBracket = "[Users_history]",
                DeletedTableBracket = "[Users_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreLoginKeys(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreLoginKeysStatement(), 
                TableBracket = "[LoginKeys]",
                HistoryTableBracket = "[LoginKeys_history]",
                DeletedTableBracket = "[LoginKeys_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreMailAddresses(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreMailAddressesStatement(), 
                TableBracket = "[MailAddresses]",
                HistoryTableBracket = "[MailAddresses_history]",
                DeletedTableBracket = "[MailAddresses_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreOutgoingMails(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreOutgoingMailsStatement(), 
                TableBracket = "[OutgoingMails]",
                HistoryTableBracket = "[OutgoingMails_history]",
                DeletedTableBracket = "[OutgoingMails_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreSearchIndexes(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreSearchIndexesStatement(), 
                TableBracket = "[SearchIndexes]",
                HistoryTableBracket = "[SearchIndexes_history]",
                DeletedTableBracket = "[SearchIndexes_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreItems(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreItemsStatement(), 
                TableBracket = "[Items]",
                HistoryTableBracket = "[Items_history]",
                DeletedTableBracket = "[Items_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreSites(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreSitesStatement(), 
                TableBracket = "[Sites]",
                HistoryTableBracket = "[Sites_history]",
                DeletedTableBracket = "[Sites_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreOrders(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreOrdersStatement(), 
                TableBracket = "[Orders]",
                HistoryTableBracket = "[Orders_history]",
                DeletedTableBracket = "[Orders_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreExportSettings(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreExportSettingsStatement(), 
                TableBracket = "[ExportSettings]",
                HistoryTableBracket = "[ExportSettings_history]",
                DeletedTableBracket = "[ExportSettings_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreLinks(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreLinksStatement(), 
                TableBracket = "[Links]",
                HistoryTableBracket = "[Links_history]",
                DeletedTableBracket = "[Links_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreBinaries(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreBinariesStatement(), 
                TableBracket = "[Binaries]",
                HistoryTableBracket = "[Binaries_history]",
                DeletedTableBracket = "[Binaries_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestorePermissions(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestorePermissionsStatement(), 
                TableBracket = "[Permissions]",
                HistoryTableBracket = "[Permissions_history]",
                DeletedTableBracket = "[Permissions_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreIssues(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreIssuesStatement(), 
                TableBracket = "[Issues]",
                HistoryTableBracket = "[Issues_history]",
                DeletedTableBracket = "[Issues_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreResults(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreResultsStatement(), 
                TableBracket = "[Results]",
                HistoryTableBracket = "[Results_history]",
                DeletedTableBracket = "[Results_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static SqlRestore RestoreWikis(
            SqlWhereCollection where = null,
            SqlParamCollection param = null,
            string _if = null,
            bool _using = true)
        {
            return new SqlRestore()
            {
                CommandText = RestoreWikisStatement(), 
                TableBracket = "[Wikis]",
                HistoryTableBracket = "[Wikis_history]",
                DeletedTableBracket = "[Wikis_deleted]",
                SqlWhereCollection = where,
                SqlParamCollection = param,
                If = _if,
                Using = _using
            };
        }

        public static IEnumerable<SqlStatement> Aggregations(
            SiteSettings ss,
            Sqls.TableTypes tableType,
            SqlJoinCollection join,
            SqlWhereCollection where)
        {
            switch (ss.ReferenceType)
            {
                case "Tenants":
                    return TenantsAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: TenantsWhere()
                            .TenantId_In(sub: SelectTenants(
                                tableType: tableType,
                                column: TenantsColumn().TenantId(),
                                join: join,
                                where: where)));
                case "Depts":
                    return DeptsAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: DeptsWhere()
                            .DeptId_In(sub: SelectDepts(
                                tableType: tableType,
                                column: DeptsColumn().DeptId(),
                                join: join,
                                where: where)));
                case "Groups":
                    return GroupsAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: GroupsWhere()
                            .GroupId_In(sub: SelectGroups(
                                tableType: tableType,
                                column: GroupsColumn().GroupId(),
                                join: join,
                                where: where)));
                case "Registrations":
                    return RegistrationsAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: RegistrationsWhere()
                            .RegistrationId_In(sub: SelectRegistrations(
                                tableType: tableType,
                                column: RegistrationsColumn().RegistrationId(),
                                join: join,
                                where: where)));
                case "Users":
                    return UsersAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: UsersWhere()
                            .UserId_In(sub: SelectUsers(
                                tableType: tableType,
                                column: UsersColumn().UserId(),
                                join: join,
                                where: where)));
                case "Sites":
                    return SitesAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: SitesWhere()
                            .SiteId_In(sub: SelectSites(
                                tableType: tableType,
                                column: SitesColumn().SiteId(),
                                join: join,
                                where: where)));
                case "Issues":
                    return IssuesAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: IssuesWhere()
                            .IssueId_In(sub: SelectIssues(
                                tableType: tableType,
                                column: IssuesColumn().IssueId(),
                                join: join,
                                where: where)));
                case "Results":
                    return ResultsAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: ResultsWhere()
                            .ResultId_In(sub: SelectResults(
                                tableType: tableType,
                                column: ResultsColumn().ResultId(),
                                join: join,
                                where: where)));
                case "Wikis":
                    return WikisAggregations(
                        aggregations: ss.Aggregations,
                        tableType: tableType,
                        where: WikisWhere()
                            .WikiId_In(sub: SelectWikis(
                                tableType: tableType,
                                column: WikisColumn().WikiId(),
                                join: join,
                                where: where)));
                default:
                    return null;
            }
        }

        public static IEnumerable<SqlStatement> TenantsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectTenants(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: TenantsColumn().TenantsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = TenantsGroupBy();
                    var column = TenantsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.TenantsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.TenantsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.TenantsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.TenantsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.TenantsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectTenants(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> DemosAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectDemos(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: DemosColumn().DemosCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = DemosGroupBy();
                    var column = DemosColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.DemosGroupBy(columnName: data.Aggregation.GroupBy);
                            column.DemosColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.DemosCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.DemosColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.DemosColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectDemos(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> SessionsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectSessions(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: SessionsColumn().SessionsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = SessionsGroupBy();
                    var column = SessionsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.SessionsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.SessionsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.SessionsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.SessionsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.SessionsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectSessions(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> SysLogsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectSysLogs(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: SysLogsColumn().SysLogsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = SysLogsGroupBy();
                    var column = SysLogsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.SysLogsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.SysLogsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.SysLogsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.SysLogsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.SysLogsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectSysLogs(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> StatusesAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectStatuses(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: StatusesColumn().StatusesCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = StatusesGroupBy();
                    var column = StatusesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.StatusesGroupBy(columnName: data.Aggregation.GroupBy);
                            column.StatusesColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.StatusesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.StatusesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.StatusesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectStatuses(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> ReminderSchedulesAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectReminderSchedules(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: ReminderSchedulesColumn().ReminderSchedulesCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = ReminderSchedulesGroupBy();
                    var column = ReminderSchedulesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.ReminderSchedulesGroupBy(columnName: data.Aggregation.GroupBy);
                            column.ReminderSchedulesColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.ReminderSchedulesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ReminderSchedulesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ReminderSchedulesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectReminderSchedules(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> DeptsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectDepts(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: DeptsColumn().DeptsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = DeptsGroupBy();
                    var column = DeptsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.DeptsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.DeptsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.DeptsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.DeptsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.DeptsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectDepts(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> GroupsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectGroups(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: GroupsColumn().GroupsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = GroupsGroupBy();
                    var column = GroupsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.GroupsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.GroupsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.GroupsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.GroupsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.GroupsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectGroups(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> GroupMembersAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectGroupMembers(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: GroupMembersColumn().GroupMembersCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = GroupMembersGroupBy();
                    var column = GroupMembersColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.GroupMembersGroupBy(columnName: data.Aggregation.GroupBy);
                            column.GroupMembersColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.GroupMembersCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.GroupMembersColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.GroupMembersColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectGroupMembers(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> RegistrationsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectRegistrations(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: RegistrationsColumn().RegistrationsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = RegistrationsGroupBy();
                    var column = RegistrationsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.RegistrationsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.RegistrationsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.RegistrationsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.RegistrationsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.RegistrationsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectRegistrations(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> UsersAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectUsers(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: UsersColumn().UsersCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = UsersGroupBy();
                    var column = UsersColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.UsersGroupBy(columnName: data.Aggregation.GroupBy);
                            column.UsersColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.UsersCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.UsersColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.UsersColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectUsers(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> LoginKeysAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectLoginKeys(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: LoginKeysColumn().LoginKeysCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = LoginKeysGroupBy();
                    var column = LoginKeysColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.LoginKeysGroupBy(columnName: data.Aggregation.GroupBy);
                            column.LoginKeysColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.LoginKeysCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.LoginKeysColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.LoginKeysColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectLoginKeys(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> MailAddressesAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectMailAddresses(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: MailAddressesColumn().MailAddressesCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = MailAddressesGroupBy();
                    var column = MailAddressesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.MailAddressesGroupBy(columnName: data.Aggregation.GroupBy);
                            column.MailAddressesColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.MailAddressesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.MailAddressesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.MailAddressesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectMailAddresses(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> OutgoingMailsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectOutgoingMails(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: OutgoingMailsColumn().OutgoingMailsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = OutgoingMailsGroupBy();
                    var column = OutgoingMailsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.OutgoingMailsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.OutgoingMailsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.OutgoingMailsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.OutgoingMailsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.OutgoingMailsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectOutgoingMails(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> SearchIndexesAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectSearchIndexes(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: SearchIndexesColumn().SearchIndexesCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = SearchIndexesGroupBy();
                    var column = SearchIndexesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.SearchIndexesGroupBy(columnName: data.Aggregation.GroupBy);
                            column.SearchIndexesColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.SearchIndexesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                case "Priority":
                                    column.Priority(function: Sqls.Functions.Sum);
                                    break;
                                default:
                                    column.SearchIndexesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                case "Priority":
                                    column.Priority(function: Sqls.Functions.Avg);
                                    break;
                                default:
                                    column.SearchIndexesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectSearchIndexes(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> ItemsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectItems(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: ItemsColumn().ItemsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = ItemsGroupBy();
                    var column = ItemsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.ItemsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.ItemsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.ItemsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ItemsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ItemsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectItems(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> SitesAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectSites(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: SitesColumn().SitesCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = SitesGroupBy();
                    var column = SitesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.SitesGroupBy(columnName: data.Aggregation.GroupBy);
                            column.SitesColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.SitesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.SitesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.SitesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectSites(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> OrdersAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectOrders(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: OrdersColumn().OrdersCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = OrdersGroupBy();
                    var column = OrdersColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.OrdersGroupBy(columnName: data.Aggregation.GroupBy);
                            column.OrdersColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.OrdersCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.OrdersColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.OrdersColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectOrders(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> ExportSettingsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectExportSettings(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: ExportSettingsColumn().ExportSettingsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = ExportSettingsGroupBy();
                    var column = ExportSettingsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.ExportSettingsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.ExportSettingsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.ExportSettingsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ExportSettingsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ExportSettingsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectExportSettings(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> LinksAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectLinks(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: LinksColumn().LinksCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = LinksGroupBy();
                    var column = LinksColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.LinksGroupBy(columnName: data.Aggregation.GroupBy);
                            column.LinksColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.LinksCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.LinksColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.LinksColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectLinks(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> BinariesAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectBinaries(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: BinariesColumn().BinariesCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = BinariesGroupBy();
                    var column = BinariesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.BinariesGroupBy(columnName: data.Aggregation.GroupBy);
                            column.BinariesColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.BinariesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.BinariesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.BinariesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectBinaries(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> PermissionsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectPermissions(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: PermissionsColumn().PermissionsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = PermissionsGroupBy();
                    var column = PermissionsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.PermissionsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.PermissionsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.PermissionsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                case "PermissionType":
                                    column.PermissionType(function: Sqls.Functions.Sum);
                                    break;
                                default:
                                    column.PermissionsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                case "PermissionType":
                                    column.PermissionType(function: Sqls.Functions.Avg);
                                    break;
                                default:
                                    column.PermissionsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectPermissions(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> IssuesAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectIssues(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: IssuesColumn().IssuesCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = IssuesGroupBy();
                    var column = IssuesColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "Status":
                            groupBy.Status();
                            column.Status();
                            break;
                        case "Manager":
                            groupBy.Manager();
                            column.Manager();
                            break;
                        case "Owner":
                            groupBy.Owner();
                            column.Owner();
                            break;
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.IssuesGroupBy(columnName: data.Aggregation.GroupBy);
                            column.IssuesColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.IssuesCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                case "WorkValue":
                                    column.WorkValue(function: Sqls.Functions.Sum);
                                    break;
                                case "RemainingWorkValue":
                                    column.RemainingWorkValue(function: Sqls.Functions.Sum);
                                    break;
                                default:
                                    column.IssuesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                case "WorkValue":
                                    column.WorkValue(function: Sqls.Functions.Avg);
                                    break;
                                case "RemainingWorkValue":
                                    column.RemainingWorkValue(function: Sqls.Functions.Avg);
                                    break;
                                default:
                                    column.IssuesColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectIssues(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            statementCollection.Add(SelectIssues(
                dataTableName: "OverdueCount",
                column: IssuesColumn().IssuesCount(_as: "OverdueCount"),
                where: new SqlWhereCollection(where.ToArray())
                    .Add(
                        tableName: "Issues",
                        columnBrackets: new string[] { "[Status]" },
                        name: "_U",
                        _operator: "<{0}".Params(Parameters.General.CompletionCode))
                    .Add(
                        tableName: "Issues",
                        columnBrackets: new string[] { "[CompletionTime]" },
                        _operator: "<getdate()")));
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> ResultsAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectResults(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: ResultsColumn().ResultsCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = ResultsGroupBy();
                    var column = ResultsColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "Status":
                            groupBy.Status();
                            column.Status();
                            break;
                        case "Manager":
                            groupBy.Manager();
                            column.Manager();
                            break;
                        case "Owner":
                            groupBy.Owner();
                            column.Owner();
                            break;
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.ResultsGroupBy(columnName: data.Aggregation.GroupBy);
                            column.ResultsColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.ResultsCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ResultsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.ResultsColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectResults(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static IEnumerable<SqlStatement> WikisAggregations(
            IEnumerable<Aggregation> aggregations,
            Sqls.TableTypes tableType,
            SqlWhereCollection where)
        {
            var statementCollection = new List<SqlStatement>()
            {
                SelectWikis(
                    dataTableName: "Count",
                    tableType: tableType,
                    column: WikisColumn().WikisCount(),
                    where: where)
            };
            if (tableType != Sqls.TableTypes.Normal)
            {
                return statementCollection;
            }
            aggregations
                .Select((o, i) => new { Aggregation = o, Index = i })
                .ForEach(data =>
                {
                    var groupBy = WikisGroupBy();
                    var column = WikisColumn();
                    switch (data.Aggregation.GroupBy)
                    {
                        case "[NotGroupBy]":
                            break;
                        default:
                            groupBy.WikisGroupBy(columnName: data.Aggregation.GroupBy);
                            column.WikisColumn(columnName: data.Aggregation.GroupBy);
                            break;
                    }
                    switch (data.Aggregation.Type)
                    {
                        case Aggregation.Types.Count:
                            column.WikisCount(); break;
                        case Aggregation.Types.Total:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.WikisColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Sum);
                                    break;
                            }
                            break;
                        case Aggregation.Types.Average:
                            switch (data.Aggregation.Target)
                            {
                                default:
                                    column.WikisColumn(
                                        columnName: data.Aggregation.Target,
                                        function: Sqls.Functions.Avg);
                                    break;
                            }
                            break;
                        default: break;
                    }
                    var statement = SelectWikis(
                        dataTableName: "Aggregation" + data.Index,
                        column: column,
                        where: where,
                        groupBy: groupBy);
                    statementCollection.Add(statement);
                });
            return statementCollection;
        }

        public static string DeleteTenantsStatement()
        {
            return @"
                update [Tenants]
                set
                    [Tenants].[Updator] = @_U,
                    [Tenants].[UpdatedTime] = getdate() {0};
                insert into [Tenants_deleted]
                (
                    [Tenants_deleted].[TenantId],
                    [Tenants_deleted].[Ver],
                    [Tenants_deleted].[TenantName],
                    [Tenants_deleted].[Title],
                    [Tenants_deleted].[Body],
                    [Tenants_deleted].[ContractSettings],
                    [Tenants_deleted].[ContractDeadline],
                    [Tenants_deleted].[DisableAllUsersPermission],
                    [Tenants_deleted].[LogoType],
                    [Tenants_deleted].[HtmlTitleTop],
                    [Tenants_deleted].[HtmlTitleSite],
                    [Tenants_deleted].[HtmlTitleRecord],
                    [Tenants_deleted].[Comments],
                    [Tenants_deleted].[Creator],
                    [Tenants_deleted].[Updator],
                    [Tenants_deleted].[CreatedTime],
                    [Tenants_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Tenants].[TenantId],
                    [Tenants].[Ver],
                    [Tenants].[TenantName],
                    [Tenants].[Title],
                    [Tenants].[Body],
                    [Tenants].[ContractSettings],
                    [Tenants].[ContractDeadline],
                    [Tenants].[DisableAllUsersPermission],
                    [Tenants].[LogoType],
                    [Tenants].[HtmlTitleTop],
                    [Tenants].[HtmlTitleSite],
                    [Tenants].[HtmlTitleRecord],
                    [Tenants].[Comments],
                    [Tenants].[Creator],
                    [Tenants].[Updator],
                    [Tenants].[CreatedTime],
                    [Tenants].[UpdatedTime] 
                    {2}
                from [Tenants] {0});
                delete from [Tenants] {0}".Params(DeleteParams(tableName: "Tenants"));
        }

        public static string DeleteDemosStatement()
        {
            return @"
                update [Demos]
                set
                    [Demos].[Updator] = @_U,
                    [Demos].[UpdatedTime] = getdate() {0};
                insert into [Demos_deleted]
                (
                    [Demos_deleted].[DemoId],
                    [Demos_deleted].[Ver],
                    [Demos_deleted].[TenantId],
                    [Demos_deleted].[Title],
                    [Demos_deleted].[LoginId],
                    [Demos_deleted].[Passphrase],
                    [Demos_deleted].[MailAddress],
                    [Demos_deleted].[Initialized],
                    [Demos_deleted].[Comments],
                    [Demos_deleted].[Creator],
                    [Demos_deleted].[Updator],
                    [Demos_deleted].[CreatedTime],
                    [Demos_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Demos].[DemoId],
                    [Demos].[Ver],
                    [Demos].[TenantId],
                    [Demos].[Title],
                    [Demos].[LoginId],
                    [Demos].[Passphrase],
                    [Demos].[MailAddress],
                    [Demos].[Initialized],
                    [Demos].[Comments],
                    [Demos].[Creator],
                    [Demos].[Updator],
                    [Demos].[CreatedTime],
                    [Demos].[UpdatedTime] 
                    {2}
                from [Demos] {0});
                delete from [Demos] {0}".Params(DeleteParams(tableName: "Demos"));
        }

        public static string DeleteSessionsStatement()
        {
            return @"
                update [Sessions]
                set
                    [Sessions].[Updator] = @_U,
                    [Sessions].[UpdatedTime] = getdate() {0};
                insert into [Sessions_deleted]
                (
                    [Sessions_deleted].[SessionGuid],
                    [Sessions_deleted].[Key],
                    [Sessions_deleted].[Page],
                    [Sessions_deleted].[Value],
                    [Sessions_deleted].[ReadOnce],
                    [Sessions_deleted].[UserArea],
                    [Sessions_deleted].[Ver],
                    [Sessions_deleted].[Comments],
                    [Sessions_deleted].[Creator],
                    [Sessions_deleted].[Updator],
                    [Sessions_deleted].[CreatedTime],
                    [Sessions_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Sessions].[SessionGuid],
                    [Sessions].[Key],
                    [Sessions].[Page],
                    [Sessions].[Value],
                    [Sessions].[ReadOnce],
                    [Sessions].[UserArea],
                    [Sessions].[Ver],
                    [Sessions].[Comments],
                    [Sessions].[Creator],
                    [Sessions].[Updator],
                    [Sessions].[CreatedTime],
                    [Sessions].[UpdatedTime] 
                    {2}
                from [Sessions] {0});
                delete from [Sessions] {0}".Params(DeleteParams(tableName: "Sessions"));
        }

        public static string DeleteSysLogsStatement()
        {
            return @"
                update [SysLogs]
                set
                    [SysLogs].[Updator] = @_U,
                    [SysLogs].[UpdatedTime] = getdate() {0};
                insert into [SysLogs_deleted]
                (
                    [SysLogs_deleted].[CreatedTime],
                    [SysLogs_deleted].[SysLogId],
                    [SysLogs_deleted].[Ver],
                    [SysLogs_deleted].[SysLogType],
                    [SysLogs_deleted].[OnAzure],
                    [SysLogs_deleted].[MachineName],
                    [SysLogs_deleted].[ServiceName],
                    [SysLogs_deleted].[TenantName],
                    [SysLogs_deleted].[Application],
                    [SysLogs_deleted].[Class],
                    [SysLogs_deleted].[Method],
                    [SysLogs_deleted].[RequestData],
                    [SysLogs_deleted].[HttpMethod],
                    [SysLogs_deleted].[RequestSize],
                    [SysLogs_deleted].[ResponseSize],
                    [SysLogs_deleted].[Elapsed],
                    [SysLogs_deleted].[ApplicationAge],
                    [SysLogs_deleted].[ApplicationRequestInterval],
                    [SysLogs_deleted].[SessionAge],
                    [SysLogs_deleted].[SessionRequestInterval],
                    [SysLogs_deleted].[WorkingSet64],
                    [SysLogs_deleted].[VirtualMemorySize64],
                    [SysLogs_deleted].[ProcessId],
                    [SysLogs_deleted].[ProcessName],
                    [SysLogs_deleted].[BasePriority],
                    [SysLogs_deleted].[Url],
                    [SysLogs_deleted].[UrlReferer],
                    [SysLogs_deleted].[UserHostName],
                    [SysLogs_deleted].[UserHostAddress],
                    [SysLogs_deleted].[UserLanguage],
                    [SysLogs_deleted].[UserAgent],
                    [SysLogs_deleted].[SessionGuid],
                    [SysLogs_deleted].[ErrMessage],
                    [SysLogs_deleted].[ErrStackTrace],
                    [SysLogs_deleted].[InDebug],
                    [SysLogs_deleted].[AssemblyVersion],
                    [SysLogs_deleted].[Comments],
                    [SysLogs_deleted].[Creator],
                    [SysLogs_deleted].[Updator],
                    [SysLogs_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [SysLogs].[CreatedTime],
                    [SysLogs].[SysLogId],
                    [SysLogs].[Ver],
                    [SysLogs].[SysLogType],
                    [SysLogs].[OnAzure],
                    [SysLogs].[MachineName],
                    [SysLogs].[ServiceName],
                    [SysLogs].[TenantName],
                    [SysLogs].[Application],
                    [SysLogs].[Class],
                    [SysLogs].[Method],
                    [SysLogs].[RequestData],
                    [SysLogs].[HttpMethod],
                    [SysLogs].[RequestSize],
                    [SysLogs].[ResponseSize],
                    [SysLogs].[Elapsed],
                    [SysLogs].[ApplicationAge],
                    [SysLogs].[ApplicationRequestInterval],
                    [SysLogs].[SessionAge],
                    [SysLogs].[SessionRequestInterval],
                    [SysLogs].[WorkingSet64],
                    [SysLogs].[VirtualMemorySize64],
                    [SysLogs].[ProcessId],
                    [SysLogs].[ProcessName],
                    [SysLogs].[BasePriority],
                    [SysLogs].[Url],
                    [SysLogs].[UrlReferer],
                    [SysLogs].[UserHostName],
                    [SysLogs].[UserHostAddress],
                    [SysLogs].[UserLanguage],
                    [SysLogs].[UserAgent],
                    [SysLogs].[SessionGuid],
                    [SysLogs].[ErrMessage],
                    [SysLogs].[ErrStackTrace],
                    [SysLogs].[InDebug],
                    [SysLogs].[AssemblyVersion],
                    [SysLogs].[Comments],
                    [SysLogs].[Creator],
                    [SysLogs].[Updator],
                    [SysLogs].[UpdatedTime] 
                    {2}
                from [SysLogs] {0});
                delete from [SysLogs] {0}".Params(DeleteParams(tableName: "SysLogs"));
        }

        public static string DeleteStatusesStatement()
        {
            return @"
                update [Statuses]
                set
                    [Statuses].[Updator] = @_U,
                    [Statuses].[UpdatedTime] = getdate() {0};
                insert into [Statuses_deleted]
                (
                    [Statuses_deleted].[TenantId],
                    [Statuses_deleted].[StatusId],
                    [Statuses_deleted].[Ver],
                    [Statuses_deleted].[Value],
                    [Statuses_deleted].[Comments],
                    [Statuses_deleted].[Creator],
                    [Statuses_deleted].[Updator],
                    [Statuses_deleted].[CreatedTime],
                    [Statuses_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Statuses].[TenantId],
                    [Statuses].[StatusId],
                    [Statuses].[Ver],
                    [Statuses].[Value],
                    [Statuses].[Comments],
                    [Statuses].[Creator],
                    [Statuses].[Updator],
                    [Statuses].[CreatedTime],
                    [Statuses].[UpdatedTime] 
                    {2}
                from [Statuses] {0});
                delete from [Statuses] {0}".Params(DeleteParams(tableName: "Statuses"));
        }

        public static string DeleteReminderSchedulesStatement()
        {
            return @"
                update [ReminderSchedules]
                set
                    [ReminderSchedules].[Updator] = @_U,
                    [ReminderSchedules].[UpdatedTime] = getdate() {0};
                insert into [ReminderSchedules_deleted]
                (
                    [ReminderSchedules_deleted].[SiteId],
                    [ReminderSchedules_deleted].[Id],
                    [ReminderSchedules_deleted].[Ver],
                    [ReminderSchedules_deleted].[ScheduledTime],
                    [ReminderSchedules_deleted].[Comments],
                    [ReminderSchedules_deleted].[Creator],
                    [ReminderSchedules_deleted].[Updator],
                    [ReminderSchedules_deleted].[CreatedTime],
                    [ReminderSchedules_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [ReminderSchedules].[SiteId],
                    [ReminderSchedules].[Id],
                    [ReminderSchedules].[Ver],
                    [ReminderSchedules].[ScheduledTime],
                    [ReminderSchedules].[Comments],
                    [ReminderSchedules].[Creator],
                    [ReminderSchedules].[Updator],
                    [ReminderSchedules].[CreatedTime],
                    [ReminderSchedules].[UpdatedTime] 
                    {2}
                from [ReminderSchedules] {0});
                delete from [ReminderSchedules] {0}".Params(DeleteParams(tableName: "ReminderSchedules"));
        }

        public static string DeleteDeptsStatement()
        {
            return @"
                update [Depts]
                set
                    [Depts].[Updator] = @_U,
                    [Depts].[UpdatedTime] = getdate() {0};
                insert into [Depts_deleted]
                (
                    [Depts_deleted].[TenantId],
                    [Depts_deleted].[DeptId],
                    [Depts_deleted].[Ver],
                    [Depts_deleted].[DeptCode],
                    [Depts_deleted].[DeptName],
                    [Depts_deleted].[Body],
                    [Depts_deleted].[Comments],
                    [Depts_deleted].[Creator],
                    [Depts_deleted].[Updator],
                    [Depts_deleted].[CreatedTime],
                    [Depts_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Depts].[TenantId],
                    [Depts].[DeptId],
                    [Depts].[Ver],
                    [Depts].[DeptCode],
                    [Depts].[DeptName],
                    [Depts].[Body],
                    [Depts].[Comments],
                    [Depts].[Creator],
                    [Depts].[Updator],
                    [Depts].[CreatedTime],
                    [Depts].[UpdatedTime] 
                    {2}
                from [Depts] {0});
                delete from [Depts] {0}".Params(DeleteParams(tableName: "Depts"));
        }

        public static string DeleteGroupsStatement()
        {
            return @"
                update [Groups]
                set
                    [Groups].[Updator] = @_U,
                    [Groups].[UpdatedTime] = getdate() {0};
                insert into [Groups_deleted]
                (
                    [Groups_deleted].[TenantId],
                    [Groups_deleted].[GroupId],
                    [Groups_deleted].[Ver],
                    [Groups_deleted].[GroupName],
                    [Groups_deleted].[Body],
                    [Groups_deleted].[Comments],
                    [Groups_deleted].[Creator],
                    [Groups_deleted].[Updator],
                    [Groups_deleted].[CreatedTime],
                    [Groups_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Groups].[TenantId],
                    [Groups].[GroupId],
                    [Groups].[Ver],
                    [Groups].[GroupName],
                    [Groups].[Body],
                    [Groups].[Comments],
                    [Groups].[Creator],
                    [Groups].[Updator],
                    [Groups].[CreatedTime],
                    [Groups].[UpdatedTime] 
                    {2}
                from [Groups] {0});
                delete from [Groups] {0}".Params(DeleteParams(tableName: "Groups"));
        }

        public static string DeleteGroupMembersStatement()
        {
            return @"
                update [GroupMembers]
                set
                    [GroupMembers].[Updator] = @_U,
                    [GroupMembers].[UpdatedTime] = getdate() {0};
                insert into [GroupMembers_deleted]
                (
                    [GroupMembers_deleted].[GroupId],
                    [GroupMembers_deleted].[DeptId],
                    [GroupMembers_deleted].[UserId],
                    [GroupMembers_deleted].[Ver],
                    [GroupMembers_deleted].[Admin],
                    [GroupMembers_deleted].[Comments],
                    [GroupMembers_deleted].[Creator],
                    [GroupMembers_deleted].[Updator],
                    [GroupMembers_deleted].[CreatedTime],
                    [GroupMembers_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [GroupMembers].[GroupId],
                    [GroupMembers].[DeptId],
                    [GroupMembers].[UserId],
                    [GroupMembers].[Ver],
                    [GroupMembers].[Admin],
                    [GroupMembers].[Comments],
                    [GroupMembers].[Creator],
                    [GroupMembers].[Updator],
                    [GroupMembers].[CreatedTime],
                    [GroupMembers].[UpdatedTime] 
                    {2}
                from [GroupMembers] {0});
                delete from [GroupMembers] {0}".Params(DeleteParams(tableName: "GroupMembers"));
        }

        public static string DeleteRegistrationsStatement()
        {
            return @"
                update [Registrations]
                set
                    [Registrations].[Updator] = @_U,
                    [Registrations].[UpdatedTime] = getdate() {0};
                insert into [Registrations_deleted]
                (
                    [Registrations_deleted].[TenantId],
                    [Registrations_deleted].[RegistrationId],
                    [Registrations_deleted].[Ver],
                    [Registrations_deleted].[MailAddress],
                    [Registrations_deleted].[Invitee],
                    [Registrations_deleted].[InviteeName],
                    [Registrations_deleted].[LoginId],
                    [Registrations_deleted].[Name],
                    [Registrations_deleted].[Password],
                    [Registrations_deleted].[Language],
                    [Registrations_deleted].[Passphrase],
                    [Registrations_deleted].[Invitingflg],
                    [Registrations_deleted].[UserId],
                    [Registrations_deleted].[DeptId],
                    [Registrations_deleted].[GroupId],
                    [Registrations_deleted].[Comments],
                    [Registrations_deleted].[Creator],
                    [Registrations_deleted].[Updator],
                    [Registrations_deleted].[CreatedTime],
                    [Registrations_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Registrations].[TenantId],
                    [Registrations].[RegistrationId],
                    [Registrations].[Ver],
                    [Registrations].[MailAddress],
                    [Registrations].[Invitee],
                    [Registrations].[InviteeName],
                    [Registrations].[LoginId],
                    [Registrations].[Name],
                    [Registrations].[Password],
                    [Registrations].[Language],
                    [Registrations].[Passphrase],
                    [Registrations].[Invitingflg],
                    [Registrations].[UserId],
                    [Registrations].[DeptId],
                    [Registrations].[GroupId],
                    [Registrations].[Comments],
                    [Registrations].[Creator],
                    [Registrations].[Updator],
                    [Registrations].[CreatedTime],
                    [Registrations].[UpdatedTime] 
                    {2}
                from [Registrations] {0});
                delete from [Registrations] {0}".Params(DeleteParams(tableName: "Registrations"));
        }

        public static string DeleteUsersStatement()
        {
            return @"
                update [Users]
                set
                    [Users].[Updator] = @_U,
                    [Users].[UpdatedTime] = getdate() {0};
                insert into [Users_deleted]
                (
                    [Users_deleted].[TenantId],
                    [Users_deleted].[UserId],
                    [Users_deleted].[Ver],
                    [Users_deleted].[LoginId],
                    [Users_deleted].[GlobalId],
                    [Users_deleted].[Name],
                    [Users_deleted].[UserCode],
                    [Users_deleted].[Password],
                    [Users_deleted].[LastName],
                    [Users_deleted].[FirstName],
                    [Users_deleted].[Birthday],
                    [Users_deleted].[Gender],
                    [Users_deleted].[Language],
                    [Users_deleted].[TimeZone],
                    [Users_deleted].[DeptId],
                    [Users_deleted].[FirstAndLastNameOrder],
                    [Users_deleted].[Body],
                    [Users_deleted].[LastLoginTime],
                    [Users_deleted].[PasswordExpirationTime],
                    [Users_deleted].[PasswordChangeTime],
                    [Users_deleted].[NumberOfLogins],
                    [Users_deleted].[NumberOfDenial],
                    [Users_deleted].[TenantManager],
                    [Users_deleted].[ServiceManager],
                    [Users_deleted].[Disabled],
                    [Users_deleted].[Lockout],
                    [Users_deleted].[LockoutCounter],
                    [Users_deleted].[Developer],
                    [Users_deleted].[UserSettings],
                    [Users_deleted].[ApiKey],
                    [Users_deleted].[LdapSearchRoot],
                    [Users_deleted].[SynchronizedTime],
                    [Users_deleted].[Comments],
                    [Users_deleted].[Creator],
                    [Users_deleted].[Updator],
                    [Users_deleted].[CreatedTime],
                    [Users_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Users].[TenantId],
                    [Users].[UserId],
                    [Users].[Ver],
                    [Users].[LoginId],
                    [Users].[GlobalId],
                    [Users].[Name],
                    [Users].[UserCode],
                    [Users].[Password],
                    [Users].[LastName],
                    [Users].[FirstName],
                    [Users].[Birthday],
                    [Users].[Gender],
                    [Users].[Language],
                    [Users].[TimeZone],
                    [Users].[DeptId],
                    [Users].[FirstAndLastNameOrder],
                    [Users].[Body],
                    [Users].[LastLoginTime],
                    [Users].[PasswordExpirationTime],
                    [Users].[PasswordChangeTime],
                    [Users].[NumberOfLogins],
                    [Users].[NumberOfDenial],
                    [Users].[TenantManager],
                    [Users].[ServiceManager],
                    [Users].[Disabled],
                    [Users].[Lockout],
                    [Users].[LockoutCounter],
                    [Users].[Developer],
                    [Users].[UserSettings],
                    [Users].[ApiKey],
                    [Users].[LdapSearchRoot],
                    [Users].[SynchronizedTime],
                    [Users].[Comments],
                    [Users].[Creator],
                    [Users].[Updator],
                    [Users].[CreatedTime],
                    [Users].[UpdatedTime] 
                    {2}
                from [Users] {0});
                delete from [Users] {0}".Params(DeleteParams(tableName: "Users"));
        }

        public static string DeleteLoginKeysStatement()
        {
            return @"
                update [LoginKeys]
                set
                    [LoginKeys].[Updator] = @_U,
                    [LoginKeys].[UpdatedTime] = getdate() {0};
                insert into [LoginKeys_deleted]
                (
                    [LoginKeys_deleted].[LoginId],
                    [LoginKeys_deleted].[Key],
                    [LoginKeys_deleted].[Ver],
                    [LoginKeys_deleted].[TenantNames],
                    [LoginKeys_deleted].[TenantId],
                    [LoginKeys_deleted].[UserId],
                    [LoginKeys_deleted].[Comments],
                    [LoginKeys_deleted].[Creator],
                    [LoginKeys_deleted].[Updator],
                    [LoginKeys_deleted].[CreatedTime],
                    [LoginKeys_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [LoginKeys].[LoginId],
                    [LoginKeys].[Key],
                    [LoginKeys].[Ver],
                    [LoginKeys].[TenantNames],
                    [LoginKeys].[TenantId],
                    [LoginKeys].[UserId],
                    [LoginKeys].[Comments],
                    [LoginKeys].[Creator],
                    [LoginKeys].[Updator],
                    [LoginKeys].[CreatedTime],
                    [LoginKeys].[UpdatedTime] 
                    {2}
                from [LoginKeys] {0});
                delete from [LoginKeys] {0}".Params(DeleteParams(tableName: "LoginKeys"));
        }

        public static string DeleteMailAddressesStatement()
        {
            return @"
                update [MailAddresses]
                set
                    [MailAddresses].[Updator] = @_U,
                    [MailAddresses].[UpdatedTime] = getdate() {0};
                insert into [MailAddresses_deleted]
                (
                    [MailAddresses_deleted].[OwnerId],
                    [MailAddresses_deleted].[OwnerType],
                    [MailAddresses_deleted].[MailAddressId],
                    [MailAddresses_deleted].[Ver],
                    [MailAddresses_deleted].[MailAddress],
                    [MailAddresses_deleted].[Comments],
                    [MailAddresses_deleted].[Creator],
                    [MailAddresses_deleted].[Updator],
                    [MailAddresses_deleted].[CreatedTime],
                    [MailAddresses_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [MailAddresses].[OwnerId],
                    [MailAddresses].[OwnerType],
                    [MailAddresses].[MailAddressId],
                    [MailAddresses].[Ver],
                    [MailAddresses].[MailAddress],
                    [MailAddresses].[Comments],
                    [MailAddresses].[Creator],
                    [MailAddresses].[Updator],
                    [MailAddresses].[CreatedTime],
                    [MailAddresses].[UpdatedTime] 
                    {2}
                from [MailAddresses] {0});
                delete from [MailAddresses] {0}".Params(DeleteParams(tableName: "MailAddresses"));
        }

        public static string DeleteOutgoingMailsStatement()
        {
            return @"
                update [OutgoingMails]
                set
                    [OutgoingMails].[Updator] = @_U,
                    [OutgoingMails].[UpdatedTime] = getdate() {0};
                insert into [OutgoingMails_deleted]
                (
                    [OutgoingMails_deleted].[ReferenceType],
                    [OutgoingMails_deleted].[ReferenceId],
                    [OutgoingMails_deleted].[ReferenceVer],
                    [OutgoingMails_deleted].[OutgoingMailId],
                    [OutgoingMails_deleted].[Ver],
                    [OutgoingMails_deleted].[Host],
                    [OutgoingMails_deleted].[Port],
                    [OutgoingMails_deleted].[From],
                    [OutgoingMails_deleted].[To],
                    [OutgoingMails_deleted].[Cc],
                    [OutgoingMails_deleted].[Bcc],
                    [OutgoingMails_deleted].[Title],
                    [OutgoingMails_deleted].[Body],
                    [OutgoingMails_deleted].[SentTime],
                    [OutgoingMails_deleted].[Comments],
                    [OutgoingMails_deleted].[Creator],
                    [OutgoingMails_deleted].[Updator],
                    [OutgoingMails_deleted].[CreatedTime],
                    [OutgoingMails_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [OutgoingMails].[ReferenceType],
                    [OutgoingMails].[ReferenceId],
                    [OutgoingMails].[ReferenceVer],
                    [OutgoingMails].[OutgoingMailId],
                    [OutgoingMails].[Ver],
                    [OutgoingMails].[Host],
                    [OutgoingMails].[Port],
                    [OutgoingMails].[From],
                    [OutgoingMails].[To],
                    [OutgoingMails].[Cc],
                    [OutgoingMails].[Bcc],
                    [OutgoingMails].[Title],
                    [OutgoingMails].[Body],
                    [OutgoingMails].[SentTime],
                    [OutgoingMails].[Comments],
                    [OutgoingMails].[Creator],
                    [OutgoingMails].[Updator],
                    [OutgoingMails].[CreatedTime],
                    [OutgoingMails].[UpdatedTime] 
                    {2}
                from [OutgoingMails] {0});
                delete from [OutgoingMails] {0}".Params(DeleteParams(tableName: "OutgoingMails"));
        }

        public static string DeleteSearchIndexesStatement()
        {
            return @"
                update [SearchIndexes]
                set
                    [SearchIndexes].[Updator] = @_U,
                    [SearchIndexes].[UpdatedTime] = getdate() {0};
                insert into [SearchIndexes_deleted]
                (
                    [SearchIndexes_deleted].[Word],
                    [SearchIndexes_deleted].[ReferenceId],
                    [SearchIndexes_deleted].[Ver],
                    [SearchIndexes_deleted].[Priority],
                    [SearchIndexes_deleted].[Comments],
                    [SearchIndexes_deleted].[Creator],
                    [SearchIndexes_deleted].[Updator],
                    [SearchIndexes_deleted].[CreatedTime],
                    [SearchIndexes_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [SearchIndexes].[Word],
                    [SearchIndexes].[ReferenceId],
                    [SearchIndexes].[Ver],
                    [SearchIndexes].[Priority],
                    [SearchIndexes].[Comments],
                    [SearchIndexes].[Creator],
                    [SearchIndexes].[Updator],
                    [SearchIndexes].[CreatedTime],
                    [SearchIndexes].[UpdatedTime] 
                    {2}
                from [SearchIndexes] {0});
                delete from [SearchIndexes] {0}".Params(DeleteParams(tableName: "SearchIndexes"));
        }

        public static string DeleteItemsStatement()
        {
            return @"
                update [Items]
                set
                    [Items].[Updator] = @_U,
                    [Items].[UpdatedTime] = getdate() {0};
                insert into [Items_deleted]
                (
                    [Items_deleted].[ReferenceId],
                    [Items_deleted].[Ver],
                    [Items_deleted].[ReferenceType],
                    [Items_deleted].[SiteId],
                    [Items_deleted].[Title],
                    [Items_deleted].[FullText],
                    [Items_deleted].[SearchIndexCreatedTime],
                    [Items_deleted].[Comments],
                    [Items_deleted].[Creator],
                    [Items_deleted].[Updator],
                    [Items_deleted].[CreatedTime],
                    [Items_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Items].[ReferenceId],
                    [Items].[Ver],
                    [Items].[ReferenceType],
                    [Items].[SiteId],
                    [Items].[Title],
                    [Items].[FullText],
                    [Items].[SearchIndexCreatedTime],
                    [Items].[Comments],
                    [Items].[Creator],
                    [Items].[Updator],
                    [Items].[CreatedTime],
                    [Items].[UpdatedTime] 
                    {2}
                from [Items] {0});
                delete from [Items] {0}".Params(DeleteParams(tableName: "Items"));
        }

        public static string DeleteSitesStatement()
        {
            return @"
                update [Sites]
                set
                    [Sites].[Updator] = @_U,
                    [Sites].[UpdatedTime] = getdate() {0};
                insert into [Sites_deleted]
                (
                    [Sites_deleted].[TenantId],
                    [Sites_deleted].[SiteId],
                    [Sites_deleted].[UpdatedTime],
                    [Sites_deleted].[Ver],
                    [Sites_deleted].[Title],
                    [Sites_deleted].[Body],
                    [Sites_deleted].[GridGuide],
                    [Sites_deleted].[EditorGuide],
                    [Sites_deleted].[ReferenceType],
                    [Sites_deleted].[ParentId],
                    [Sites_deleted].[InheritPermission],
                    [Sites_deleted].[SiteSettings],
                    [Sites_deleted].[Publish],
                    [Sites_deleted].[LockedTime],
                    [Sites_deleted].[LockedUser],
                    [Sites_deleted].[Comments],
                    [Sites_deleted].[Creator],
                    [Sites_deleted].[Updator],
                    [Sites_deleted].[CreatedTime]
                    {1}
                )
                (
                select
                    [Sites].[TenantId],
                    [Sites].[SiteId],
                    [Sites].[UpdatedTime],
                    [Sites].[Ver],
                    [Sites].[Title],
                    [Sites].[Body],
                    [Sites].[GridGuide],
                    [Sites].[EditorGuide],
                    [Sites].[ReferenceType],
                    [Sites].[ParentId],
                    [Sites].[InheritPermission],
                    [Sites].[SiteSettings],
                    [Sites].[Publish],
                    [Sites].[LockedTime],
                    [Sites].[LockedUser],
                    [Sites].[Comments],
                    [Sites].[Creator],
                    [Sites].[Updator],
                    [Sites].[CreatedTime] 
                    {2}
                from [Sites] {0});
                delete from [Sites] {0}".Params(DeleteParams(tableName: "Sites"));
        }

        public static string DeleteOrdersStatement()
        {
            return @"
                update [Orders]
                set
                    [Orders].[Updator] = @_U,
                    [Orders].[UpdatedTime] = getdate() {0};
                insert into [Orders_deleted]
                (
                    [Orders_deleted].[ReferenceId],
                    [Orders_deleted].[ReferenceType],
                    [Orders_deleted].[OwnerId],
                    [Orders_deleted].[Ver],
                    [Orders_deleted].[Data],
                    [Orders_deleted].[Comments],
                    [Orders_deleted].[Creator],
                    [Orders_deleted].[Updator],
                    [Orders_deleted].[CreatedTime],
                    [Orders_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Orders].[ReferenceId],
                    [Orders].[ReferenceType],
                    [Orders].[OwnerId],
                    [Orders].[Ver],
                    [Orders].[Data],
                    [Orders].[Comments],
                    [Orders].[Creator],
                    [Orders].[Updator],
                    [Orders].[CreatedTime],
                    [Orders].[UpdatedTime] 
                    {2}
                from [Orders] {0});
                delete from [Orders] {0}".Params(DeleteParams(tableName: "Orders"));
        }

        public static string DeleteExportSettingsStatement()
        {
            return @"
                update [ExportSettings]
                set
                    [ExportSettings].[Updator] = @_U,
                    [ExportSettings].[UpdatedTime] = getdate() {0};
                insert into [ExportSettings_deleted]
                (
                    [ExportSettings_deleted].[ReferenceType],
                    [ExportSettings_deleted].[ReferenceId],
                    [ExportSettings_deleted].[Title],
                    [ExportSettings_deleted].[ExportSettingId],
                    [ExportSettings_deleted].[Ver],
                    [ExportSettings_deleted].[AddHeader],
                    [ExportSettings_deleted].[ExportColumns],
                    [ExportSettings_deleted].[Comments],
                    [ExportSettings_deleted].[Creator],
                    [ExportSettings_deleted].[Updator],
                    [ExportSettings_deleted].[CreatedTime],
                    [ExportSettings_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [ExportSettings].[ReferenceType],
                    [ExportSettings].[ReferenceId],
                    [ExportSettings].[Title],
                    [ExportSettings].[ExportSettingId],
                    [ExportSettings].[Ver],
                    [ExportSettings].[AddHeader],
                    [ExportSettings].[ExportColumns],
                    [ExportSettings].[Comments],
                    [ExportSettings].[Creator],
                    [ExportSettings].[Updator],
                    [ExportSettings].[CreatedTime],
                    [ExportSettings].[UpdatedTime] 
                    {2}
                from [ExportSettings] {0});
                delete from [ExportSettings] {0}".Params(DeleteParams(tableName: "ExportSettings"));
        }

        public static string DeleteLinksStatement()
        {
            return @"
                update [Links]
                set
                    [Links].[Updator] = @_U,
                    [Links].[UpdatedTime] = getdate() {0};
                insert into [Links_deleted]
                (
                    [Links_deleted].[DestinationId],
                    [Links_deleted].[SourceId],
                    [Links_deleted].[Ver],
                    [Links_deleted].[Comments],
                    [Links_deleted].[Creator],
                    [Links_deleted].[Updator],
                    [Links_deleted].[CreatedTime],
                    [Links_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Links].[DestinationId],
                    [Links].[SourceId],
                    [Links].[Ver],
                    [Links].[Comments],
                    [Links].[Creator],
                    [Links].[Updator],
                    [Links].[CreatedTime],
                    [Links].[UpdatedTime] 
                    {2}
                from [Links] {0});
                delete from [Links] {0}".Params(DeleteParams(tableName: "Links"));
        }

        public static string DeleteBinariesStatement()
        {
            return @"
                update [Binaries]
                set
                    [Binaries].[Updator] = @_U,
                    [Binaries].[UpdatedTime] = getdate() {0};
                insert into [Binaries_deleted]
                (
                    [Binaries_deleted].[BinaryId],
                    [Binaries_deleted].[TenantId],
                    [Binaries_deleted].[ReferenceId],
                    [Binaries_deleted].[Guid],
                    [Binaries_deleted].[Ver],
                    [Binaries_deleted].[BinaryType],
                    [Binaries_deleted].[Title],
                    [Binaries_deleted].[Body],
                    [Binaries_deleted].[Bin],
                    [Binaries_deleted].[Thumbnail],
                    [Binaries_deleted].[Icon],
                    [Binaries_deleted].[FileName],
                    [Binaries_deleted].[Extension],
                    [Binaries_deleted].[Size],
                    [Binaries_deleted].[ContentType],
                    [Binaries_deleted].[BinarySettings],
                    [Binaries_deleted].[Comments],
                    [Binaries_deleted].[Creator],
                    [Binaries_deleted].[Updator],
                    [Binaries_deleted].[CreatedTime],
                    [Binaries_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Binaries].[BinaryId],
                    [Binaries].[TenantId],
                    [Binaries].[ReferenceId],
                    [Binaries].[Guid],
                    [Binaries].[Ver],
                    [Binaries].[BinaryType],
                    [Binaries].[Title],
                    [Binaries].[Body],
                    [Binaries].[Bin],
                    [Binaries].[Thumbnail],
                    [Binaries].[Icon],
                    [Binaries].[FileName],
                    [Binaries].[Extension],
                    [Binaries].[Size],
                    [Binaries].[ContentType],
                    [Binaries].[BinarySettings],
                    [Binaries].[Comments],
                    [Binaries].[Creator],
                    [Binaries].[Updator],
                    [Binaries].[CreatedTime],
                    [Binaries].[UpdatedTime] 
                    {2}
                from [Binaries] {0});
                delete from [Binaries] {0}".Params(DeleteParams(tableName: "Binaries"));
        }

        public static string DeletePermissionsStatement()
        {
            return @"
                update [Permissions]
                set
                    [Permissions].[Updator] = @_U,
                    [Permissions].[UpdatedTime] = getdate() {0};
                insert into [Permissions_deleted]
                (
                    [Permissions_deleted].[ReferenceId],
                    [Permissions_deleted].[DeptId],
                    [Permissions_deleted].[GroupId],
                    [Permissions_deleted].[UserId],
                    [Permissions_deleted].[Ver],
                    [Permissions_deleted].[PermissionType],
                    [Permissions_deleted].[Comments],
                    [Permissions_deleted].[Creator],
                    [Permissions_deleted].[Updator],
                    [Permissions_deleted].[CreatedTime],
                    [Permissions_deleted].[UpdatedTime]
                    {1}
                )
                (
                select
                    [Permissions].[ReferenceId],
                    [Permissions].[DeptId],
                    [Permissions].[GroupId],
                    [Permissions].[UserId],
                    [Permissions].[Ver],
                    [Permissions].[PermissionType],
                    [Permissions].[Comments],
                    [Permissions].[Creator],
                    [Permissions].[Updator],
                    [Permissions].[CreatedTime],
                    [Permissions].[UpdatedTime] 
                    {2}
                from [Permissions] {0});
                delete from [Permissions] {0}".Params(DeleteParams(tableName: "Permissions"));
        }

        public static string DeleteIssuesStatement()
        {
            return @"
                update [Issues]
                set
                    [Issues].[Updator] = @_U,
                    [Issues].[UpdatedTime] = getdate() {0};
                insert into [Issues_deleted]
                (
                    [Issues_deleted].[SiteId],
                    [Issues_deleted].[UpdatedTime],
                    [Issues_deleted].[IssueId],
                    [Issues_deleted].[Ver],
                    [Issues_deleted].[Title],
                    [Issues_deleted].[Body],
                    [Issues_deleted].[StartTime],
                    [Issues_deleted].[CompletionTime],
                    [Issues_deleted].[WorkValue],
                    [Issues_deleted].[ProgressRate],
                    [Issues_deleted].[Status],
                    [Issues_deleted].[Manager],
                    [Issues_deleted].[Owner],
                    [Issues_deleted].[Comments],
                    [Issues_deleted].[Creator],
                    [Issues_deleted].[Updator],
                    [Issues_deleted].[CreatedTime]
                    {1}
                )
                (
                select
                    [Issues].[SiteId],
                    [Issues].[UpdatedTime],
                    [Issues].[IssueId],
                    [Issues].[Ver],
                    [Issues].[Title],
                    [Issues].[Body],
                    [Issues].[StartTime],
                    [Issues].[CompletionTime],
                    [Issues].[WorkValue],
                    [Issues].[ProgressRate],
                    [Issues].[Status],
                    [Issues].[Manager],
                    [Issues].[Owner],
                    [Issues].[Comments],
                    [Issues].[Creator],
                    [Issues].[Updator],
                    [Issues].[CreatedTime] 
                    {2}
                from [Issues] {0});
                delete from [Issues] {0}".Params(DeleteParams(tableName: "Issues"));
        }

        public static string DeleteResultsStatement()
        {
            return @"
                update [Results]
                set
                    [Results].[Updator] = @_U,
                    [Results].[UpdatedTime] = getdate() {0};
                insert into [Results_deleted]
                (
                    [Results_deleted].[SiteId],
                    [Results_deleted].[UpdatedTime],
                    [Results_deleted].[ResultId],
                    [Results_deleted].[Ver],
                    [Results_deleted].[Title],
                    [Results_deleted].[Body],
                    [Results_deleted].[Status],
                    [Results_deleted].[Manager],
                    [Results_deleted].[Owner],
                    [Results_deleted].[Comments],
                    [Results_deleted].[Creator],
                    [Results_deleted].[Updator],
                    [Results_deleted].[CreatedTime]
                    {1}
                )
                (
                select
                    [Results].[SiteId],
                    [Results].[UpdatedTime],
                    [Results].[ResultId],
                    [Results].[Ver],
                    [Results].[Title],
                    [Results].[Body],
                    [Results].[Status],
                    [Results].[Manager],
                    [Results].[Owner],
                    [Results].[Comments],
                    [Results].[Creator],
                    [Results].[Updator],
                    [Results].[CreatedTime] 
                    {2}
                from [Results] {0});
                delete from [Results] {0}".Params(DeleteParams(tableName: "Results"));
        }

        public static string DeleteWikisStatement()
        {
            return @"
                update [Wikis]
                set
                    [Wikis].[Updator] = @_U,
                    [Wikis].[UpdatedTime] = getdate() {0};
                insert into [Wikis_deleted]
                (
                    [Wikis_deleted].[SiteId],
                    [Wikis_deleted].[UpdatedTime],
                    [Wikis_deleted].[WikiId],
                    [Wikis_deleted].[Ver],
                    [Wikis_deleted].[Title],
                    [Wikis_deleted].[Body],
                    [Wikis_deleted].[Comments],
                    [Wikis_deleted].[Creator],
                    [Wikis_deleted].[Updator],
                    [Wikis_deleted].[CreatedTime]
                    {1}
                )
                (
                select
                    [Wikis].[SiteId],
                    [Wikis].[UpdatedTime],
                    [Wikis].[WikiId],
                    [Wikis].[Ver],
                    [Wikis].[Title],
                    [Wikis].[Body],
                    [Wikis].[Comments],
                    [Wikis].[Creator],
                    [Wikis].[Updator],
                    [Wikis].[CreatedTime] 
                    {2}
                from [Wikis] {0});
                delete from [Wikis] {0}".Params(DeleteParams(tableName: "Wikis"));
        }

        private static string[] DeleteParams(string tableName)
        {
            var extended = ColumnUtilities.ExtendedColumns(tableName: tableName);
            return new string[]
            {
                "{0}",
                extended.Any()
                    ? "," + extended
                        .Select(columnName => $"[{tableName}_deleted].[{columnName}]")
                        .Join()
                    : string.Empty,
                extended.Any()
                    ? "," + extended
                        .Select(columnName => $"[{tableName}].[{columnName}]")
                        .Join()
                    : string.Empty
            };
        }

        public static string RestoreTenantsStatement()
        {
            return @"
                update [Tenants_deleted]
                set
                    [Tenants_deleted].[Updator] = @_U,
                    [Tenants_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Tenants] on; 
                insert into [Tenants]
                (
                    [Tenants].[TenantId],
                    [Tenants].[Ver],
                    [Tenants].[TenantName],
                    [Tenants].[Title],
                    [Tenants].[Body],
                    [Tenants].[ContractSettings],
                    [Tenants].[ContractDeadline],
                    [Tenants].[DisableAllUsersPermission],
                    [Tenants].[LogoType],
                    [Tenants].[HtmlTitleTop],
                    [Tenants].[HtmlTitleSite],
                    [Tenants].[HtmlTitleRecord],
                    [Tenants].[Comments],
                    [Tenants].[Creator],
                    [Tenants].[Updator],
                    [Tenants].[CreatedTime],
                    [Tenants].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Tenants_deleted].[TenantId],
                    [Tenants_deleted].[Ver],
                    [Tenants_deleted].[TenantName],
                    [Tenants_deleted].[Title],
                    [Tenants_deleted].[Body],
                    [Tenants_deleted].[ContractSettings],
                    [Tenants_deleted].[ContractDeadline],
                    [Tenants_deleted].[DisableAllUsersPermission],
                    [Tenants_deleted].[LogoType],
                    [Tenants_deleted].[HtmlTitleTop],
                    [Tenants_deleted].[HtmlTitleSite],
                    [Tenants_deleted].[HtmlTitleRecord],
                    [Tenants_deleted].[Comments],
                    [Tenants_deleted].[Creator],
                    [Tenants_deleted].[Updator],
                    [Tenants_deleted].[CreatedTime],
                    [Tenants_deleted].[UpdatedTime] 
                    {1}
                from [Tenants_deleted] {0});
                set identity_insert [Tenants] off; 
                delete from [Tenants_deleted] {0}".Params(DeleteParams(tableName: "Tenants"));
        }

        public static string RestoreDemosStatement()
        {
            return @"
                update [Demos_deleted]
                set
                    [Demos_deleted].[Updator] = @_U,
                    [Demos_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Demos] on; 
                insert into [Demos]
                (
                    [Demos].[DemoId],
                    [Demos].[Ver],
                    [Demos].[TenantId],
                    [Demos].[Title],
                    [Demos].[LoginId],
                    [Demos].[Passphrase],
                    [Demos].[MailAddress],
                    [Demos].[Initialized],
                    [Demos].[Comments],
                    [Demos].[Creator],
                    [Demos].[Updator],
                    [Demos].[CreatedTime],
                    [Demos].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Demos_deleted].[DemoId],
                    [Demos_deleted].[Ver],
                    [Demos_deleted].[TenantId],
                    [Demos_deleted].[Title],
                    [Demos_deleted].[LoginId],
                    [Demos_deleted].[Passphrase],
                    [Demos_deleted].[MailAddress],
                    [Demos_deleted].[Initialized],
                    [Demos_deleted].[Comments],
                    [Demos_deleted].[Creator],
                    [Demos_deleted].[Updator],
                    [Demos_deleted].[CreatedTime],
                    [Demos_deleted].[UpdatedTime] 
                    {1}
                from [Demos_deleted] {0});
                set identity_insert [Demos] off; 
                delete from [Demos_deleted] {0}".Params(DeleteParams(tableName: "Demos"));
        }

        public static string RestoreSessionsStatement()
        {
            return @"
                update [Sessions_deleted]
                set
                    [Sessions_deleted].[Updator] = @_U,
                    [Sessions_deleted].[UpdatedTime] = getdate() {0};
                insert into [Sessions]
                (
                    [Sessions].[SessionGuid],
                    [Sessions].[Key],
                    [Sessions].[Page],
                    [Sessions].[Value],
                    [Sessions].[ReadOnce],
                    [Sessions].[UserArea],
                    [Sessions].[Ver],
                    [Sessions].[Comments],
                    [Sessions].[Creator],
                    [Sessions].[Updator],
                    [Sessions].[CreatedTime],
                    [Sessions].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Sessions_deleted].[SessionGuid],
                    [Sessions_deleted].[Key],
                    [Sessions_deleted].[Page],
                    [Sessions_deleted].[Value],
                    [Sessions_deleted].[ReadOnce],
                    [Sessions_deleted].[UserArea],
                    [Sessions_deleted].[Ver],
                    [Sessions_deleted].[Comments],
                    [Sessions_deleted].[Creator],
                    [Sessions_deleted].[Updator],
                    [Sessions_deleted].[CreatedTime],
                    [Sessions_deleted].[UpdatedTime] 
                    {1}
                from [Sessions_deleted] {0});
                delete from [Sessions_deleted] {0}".Params(DeleteParams(tableName: "Sessions"));
        }

        public static string RestoreSysLogsStatement()
        {
            return @"
                update [SysLogs_deleted]
                set
                    [SysLogs_deleted].[Updator] = @_U,
                    [SysLogs_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [SysLogs] on; 
                insert into [SysLogs]
                (
                    [SysLogs].[CreatedTime],
                    [SysLogs].[SysLogId],
                    [SysLogs].[Ver],
                    [SysLogs].[SysLogType],
                    [SysLogs].[OnAzure],
                    [SysLogs].[MachineName],
                    [SysLogs].[ServiceName],
                    [SysLogs].[TenantName],
                    [SysLogs].[Application],
                    [SysLogs].[Class],
                    [SysLogs].[Method],
                    [SysLogs].[RequestData],
                    [SysLogs].[HttpMethod],
                    [SysLogs].[RequestSize],
                    [SysLogs].[ResponseSize],
                    [SysLogs].[Elapsed],
                    [SysLogs].[ApplicationAge],
                    [SysLogs].[ApplicationRequestInterval],
                    [SysLogs].[SessionAge],
                    [SysLogs].[SessionRequestInterval],
                    [SysLogs].[WorkingSet64],
                    [SysLogs].[VirtualMemorySize64],
                    [SysLogs].[ProcessId],
                    [SysLogs].[ProcessName],
                    [SysLogs].[BasePriority],
                    [SysLogs].[Url],
                    [SysLogs].[UrlReferer],
                    [SysLogs].[UserHostName],
                    [SysLogs].[UserHostAddress],
                    [SysLogs].[UserLanguage],
                    [SysLogs].[UserAgent],
                    [SysLogs].[SessionGuid],
                    [SysLogs].[ErrMessage],
                    [SysLogs].[ErrStackTrace],
                    [SysLogs].[InDebug],
                    [SysLogs].[AssemblyVersion],
                    [SysLogs].[Comments],
                    [SysLogs].[Creator],
                    [SysLogs].[Updator],
                    [SysLogs].[UpdatedTime]
                    {2}
                )
                (
                select
                    [SysLogs_deleted].[CreatedTime],
                    [SysLogs_deleted].[SysLogId],
                    [SysLogs_deleted].[Ver],
                    [SysLogs_deleted].[SysLogType],
                    [SysLogs_deleted].[OnAzure],
                    [SysLogs_deleted].[MachineName],
                    [SysLogs_deleted].[ServiceName],
                    [SysLogs_deleted].[TenantName],
                    [SysLogs_deleted].[Application],
                    [SysLogs_deleted].[Class],
                    [SysLogs_deleted].[Method],
                    [SysLogs_deleted].[RequestData],
                    [SysLogs_deleted].[HttpMethod],
                    [SysLogs_deleted].[RequestSize],
                    [SysLogs_deleted].[ResponseSize],
                    [SysLogs_deleted].[Elapsed],
                    [SysLogs_deleted].[ApplicationAge],
                    [SysLogs_deleted].[ApplicationRequestInterval],
                    [SysLogs_deleted].[SessionAge],
                    [SysLogs_deleted].[SessionRequestInterval],
                    [SysLogs_deleted].[WorkingSet64],
                    [SysLogs_deleted].[VirtualMemorySize64],
                    [SysLogs_deleted].[ProcessId],
                    [SysLogs_deleted].[ProcessName],
                    [SysLogs_deleted].[BasePriority],
                    [SysLogs_deleted].[Url],
                    [SysLogs_deleted].[UrlReferer],
                    [SysLogs_deleted].[UserHostName],
                    [SysLogs_deleted].[UserHostAddress],
                    [SysLogs_deleted].[UserLanguage],
                    [SysLogs_deleted].[UserAgent],
                    [SysLogs_deleted].[SessionGuid],
                    [SysLogs_deleted].[ErrMessage],
                    [SysLogs_deleted].[ErrStackTrace],
                    [SysLogs_deleted].[InDebug],
                    [SysLogs_deleted].[AssemblyVersion],
                    [SysLogs_deleted].[Comments],
                    [SysLogs_deleted].[Creator],
                    [SysLogs_deleted].[Updator],
                    [SysLogs_deleted].[UpdatedTime] 
                    {1}
                from [SysLogs_deleted] {0});
                set identity_insert [SysLogs] off; 
                delete from [SysLogs_deleted] {0}".Params(DeleteParams(tableName: "SysLogs"));
        }

        public static string RestoreStatusesStatement()
        {
            return @"
                update [Statuses_deleted]
                set
                    [Statuses_deleted].[Updator] = @_U,
                    [Statuses_deleted].[UpdatedTime] = getdate() {0};
                insert into [Statuses]
                (
                    [Statuses].[TenantId],
                    [Statuses].[StatusId],
                    [Statuses].[Ver],
                    [Statuses].[Value],
                    [Statuses].[Comments],
                    [Statuses].[Creator],
                    [Statuses].[Updator],
                    [Statuses].[CreatedTime],
                    [Statuses].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Statuses_deleted].[TenantId],
                    [Statuses_deleted].[StatusId],
                    [Statuses_deleted].[Ver],
                    [Statuses_deleted].[Value],
                    [Statuses_deleted].[Comments],
                    [Statuses_deleted].[Creator],
                    [Statuses_deleted].[Updator],
                    [Statuses_deleted].[CreatedTime],
                    [Statuses_deleted].[UpdatedTime] 
                    {1}
                from [Statuses_deleted] {0});
                delete from [Statuses_deleted] {0}".Params(DeleteParams(tableName: "Statuses"));
        }

        public static string RestoreReminderSchedulesStatement()
        {
            return @"
                update [ReminderSchedules_deleted]
                set
                    [ReminderSchedules_deleted].[Updator] = @_U,
                    [ReminderSchedules_deleted].[UpdatedTime] = getdate() {0};
                insert into [ReminderSchedules]
                (
                    [ReminderSchedules].[SiteId],
                    [ReminderSchedules].[Id],
                    [ReminderSchedules].[Ver],
                    [ReminderSchedules].[ScheduledTime],
                    [ReminderSchedules].[Comments],
                    [ReminderSchedules].[Creator],
                    [ReminderSchedules].[Updator],
                    [ReminderSchedules].[CreatedTime],
                    [ReminderSchedules].[UpdatedTime]
                    {2}
                )
                (
                select
                    [ReminderSchedules_deleted].[SiteId],
                    [ReminderSchedules_deleted].[Id],
                    [ReminderSchedules_deleted].[Ver],
                    [ReminderSchedules_deleted].[ScheduledTime],
                    [ReminderSchedules_deleted].[Comments],
                    [ReminderSchedules_deleted].[Creator],
                    [ReminderSchedules_deleted].[Updator],
                    [ReminderSchedules_deleted].[CreatedTime],
                    [ReminderSchedules_deleted].[UpdatedTime] 
                    {1}
                from [ReminderSchedules_deleted] {0});
                delete from [ReminderSchedules_deleted] {0}".Params(DeleteParams(tableName: "ReminderSchedules"));
        }

        public static string RestoreDeptsStatement()
        {
            return @"
                update [Depts_deleted]
                set
                    [Depts_deleted].[Updator] = @_U,
                    [Depts_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Depts] on; 
                insert into [Depts]
                (
                    [Depts].[TenantId],
                    [Depts].[DeptId],
                    [Depts].[Ver],
                    [Depts].[DeptCode],
                    [Depts].[DeptName],
                    [Depts].[Body],
                    [Depts].[Comments],
                    [Depts].[Creator],
                    [Depts].[Updator],
                    [Depts].[CreatedTime],
                    [Depts].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Depts_deleted].[TenantId],
                    [Depts_deleted].[DeptId],
                    [Depts_deleted].[Ver],
                    [Depts_deleted].[DeptCode],
                    [Depts_deleted].[DeptName],
                    [Depts_deleted].[Body],
                    [Depts_deleted].[Comments],
                    [Depts_deleted].[Creator],
                    [Depts_deleted].[Updator],
                    [Depts_deleted].[CreatedTime],
                    [Depts_deleted].[UpdatedTime] 
                    {1}
                from [Depts_deleted] {0});
                set identity_insert [Depts] off; 
                delete from [Depts_deleted] {0}".Params(DeleteParams(tableName: "Depts"));
        }

        public static string RestoreGroupsStatement()
        {
            return @"
                update [Groups_deleted]
                set
                    [Groups_deleted].[Updator] = @_U,
                    [Groups_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Groups] on; 
                insert into [Groups]
                (
                    [Groups].[TenantId],
                    [Groups].[GroupId],
                    [Groups].[Ver],
                    [Groups].[GroupName],
                    [Groups].[Body],
                    [Groups].[Comments],
                    [Groups].[Creator],
                    [Groups].[Updator],
                    [Groups].[CreatedTime],
                    [Groups].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Groups_deleted].[TenantId],
                    [Groups_deleted].[GroupId],
                    [Groups_deleted].[Ver],
                    [Groups_deleted].[GroupName],
                    [Groups_deleted].[Body],
                    [Groups_deleted].[Comments],
                    [Groups_deleted].[Creator],
                    [Groups_deleted].[Updator],
                    [Groups_deleted].[CreatedTime],
                    [Groups_deleted].[UpdatedTime] 
                    {1}
                from [Groups_deleted] {0});
                set identity_insert [Groups] off; 
                delete from [Groups_deleted] {0}".Params(DeleteParams(tableName: "Groups"));
        }

        public static string RestoreGroupMembersStatement()
        {
            return @"
                update [GroupMembers_deleted]
                set
                    [GroupMembers_deleted].[Updator] = @_U,
                    [GroupMembers_deleted].[UpdatedTime] = getdate() {0};
                insert into [GroupMembers]
                (
                    [GroupMembers].[GroupId],
                    [GroupMembers].[DeptId],
                    [GroupMembers].[UserId],
                    [GroupMembers].[Ver],
                    [GroupMembers].[Admin],
                    [GroupMembers].[Comments],
                    [GroupMembers].[Creator],
                    [GroupMembers].[Updator],
                    [GroupMembers].[CreatedTime],
                    [GroupMembers].[UpdatedTime]
                    {2}
                )
                (
                select
                    [GroupMembers_deleted].[GroupId],
                    [GroupMembers_deleted].[DeptId],
                    [GroupMembers_deleted].[UserId],
                    [GroupMembers_deleted].[Ver],
                    [GroupMembers_deleted].[Admin],
                    [GroupMembers_deleted].[Comments],
                    [GroupMembers_deleted].[Creator],
                    [GroupMembers_deleted].[Updator],
                    [GroupMembers_deleted].[CreatedTime],
                    [GroupMembers_deleted].[UpdatedTime] 
                    {1}
                from [GroupMembers_deleted] {0});
                delete from [GroupMembers_deleted] {0}".Params(DeleteParams(tableName: "GroupMembers"));
        }

        public static string RestoreRegistrationsStatement()
        {
            return @"
                update [Registrations_deleted]
                set
                    [Registrations_deleted].[Updator] = @_U,
                    [Registrations_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Registrations] on; 
                insert into [Registrations]
                (
                    [Registrations].[TenantId],
                    [Registrations].[RegistrationId],
                    [Registrations].[Ver],
                    [Registrations].[MailAddress],
                    [Registrations].[Invitee],
                    [Registrations].[InviteeName],
                    [Registrations].[LoginId],
                    [Registrations].[Name],
                    [Registrations].[Password],
                    [Registrations].[Language],
                    [Registrations].[Passphrase],
                    [Registrations].[Invitingflg],
                    [Registrations].[UserId],
                    [Registrations].[DeptId],
                    [Registrations].[GroupId],
                    [Registrations].[Comments],
                    [Registrations].[Creator],
                    [Registrations].[Updator],
                    [Registrations].[CreatedTime],
                    [Registrations].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Registrations_deleted].[TenantId],
                    [Registrations_deleted].[RegistrationId],
                    [Registrations_deleted].[Ver],
                    [Registrations_deleted].[MailAddress],
                    [Registrations_deleted].[Invitee],
                    [Registrations_deleted].[InviteeName],
                    [Registrations_deleted].[LoginId],
                    [Registrations_deleted].[Name],
                    [Registrations_deleted].[Password],
                    [Registrations_deleted].[Language],
                    [Registrations_deleted].[Passphrase],
                    [Registrations_deleted].[Invitingflg],
                    [Registrations_deleted].[UserId],
                    [Registrations_deleted].[DeptId],
                    [Registrations_deleted].[GroupId],
                    [Registrations_deleted].[Comments],
                    [Registrations_deleted].[Creator],
                    [Registrations_deleted].[Updator],
                    [Registrations_deleted].[CreatedTime],
                    [Registrations_deleted].[UpdatedTime] 
                    {1}
                from [Registrations_deleted] {0});
                set identity_insert [Registrations] off; 
                delete from [Registrations_deleted] {0}".Params(DeleteParams(tableName: "Registrations"));
        }

        public static string RestoreUsersStatement()
        {
            return @"
                update [Users_deleted]
                set
                    [Users_deleted].[Updator] = @_U,
                    [Users_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Users] on; 
                insert into [Users]
                (
                    [Users].[TenantId],
                    [Users].[UserId],
                    [Users].[Ver],
                    [Users].[LoginId],
                    [Users].[GlobalId],
                    [Users].[Name],
                    [Users].[UserCode],
                    [Users].[Password],
                    [Users].[LastName],
                    [Users].[FirstName],
                    [Users].[Birthday],
                    [Users].[Gender],
                    [Users].[Language],
                    [Users].[TimeZone],
                    [Users].[DeptId],
                    [Users].[FirstAndLastNameOrder],
                    [Users].[Body],
                    [Users].[LastLoginTime],
                    [Users].[PasswordExpirationTime],
                    [Users].[PasswordChangeTime],
                    [Users].[NumberOfLogins],
                    [Users].[NumberOfDenial],
                    [Users].[TenantManager],
                    [Users].[ServiceManager],
                    [Users].[Disabled],
                    [Users].[Lockout],
                    [Users].[LockoutCounter],
                    [Users].[Developer],
                    [Users].[UserSettings],
                    [Users].[ApiKey],
                    [Users].[LdapSearchRoot],
                    [Users].[SynchronizedTime],
                    [Users].[Comments],
                    [Users].[Creator],
                    [Users].[Updator],
                    [Users].[CreatedTime],
                    [Users].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Users_deleted].[TenantId],
                    [Users_deleted].[UserId],
                    [Users_deleted].[Ver],
                    [Users_deleted].[LoginId],
                    [Users_deleted].[GlobalId],
                    [Users_deleted].[Name],
                    [Users_deleted].[UserCode],
                    [Users_deleted].[Password],
                    [Users_deleted].[LastName],
                    [Users_deleted].[FirstName],
                    [Users_deleted].[Birthday],
                    [Users_deleted].[Gender],
                    [Users_deleted].[Language],
                    [Users_deleted].[TimeZone],
                    [Users_deleted].[DeptId],
                    [Users_deleted].[FirstAndLastNameOrder],
                    [Users_deleted].[Body],
                    [Users_deleted].[LastLoginTime],
                    [Users_deleted].[PasswordExpirationTime],
                    [Users_deleted].[PasswordChangeTime],
                    [Users_deleted].[NumberOfLogins],
                    [Users_deleted].[NumberOfDenial],
                    [Users_deleted].[TenantManager],
                    [Users_deleted].[ServiceManager],
                    [Users_deleted].[Disabled],
                    [Users_deleted].[Lockout],
                    [Users_deleted].[LockoutCounter],
                    [Users_deleted].[Developer],
                    [Users_deleted].[UserSettings],
                    [Users_deleted].[ApiKey],
                    [Users_deleted].[LdapSearchRoot],
                    [Users_deleted].[SynchronizedTime],
                    [Users_deleted].[Comments],
                    [Users_deleted].[Creator],
                    [Users_deleted].[Updator],
                    [Users_deleted].[CreatedTime],
                    [Users_deleted].[UpdatedTime] 
                    {1}
                from [Users_deleted] {0});
                set identity_insert [Users] off; 
                delete from [Users_deleted] {0}".Params(DeleteParams(tableName: "Users"));
        }

        public static string RestoreLoginKeysStatement()
        {
            return @"
                update [LoginKeys_deleted]
                set
                    [LoginKeys_deleted].[Updator] = @_U,
                    [LoginKeys_deleted].[UpdatedTime] = getdate() {0};
                insert into [LoginKeys]
                (
                    [LoginKeys].[LoginId],
                    [LoginKeys].[Key],
                    [LoginKeys].[Ver],
                    [LoginKeys].[TenantNames],
                    [LoginKeys].[TenantId],
                    [LoginKeys].[UserId],
                    [LoginKeys].[Comments],
                    [LoginKeys].[Creator],
                    [LoginKeys].[Updator],
                    [LoginKeys].[CreatedTime],
                    [LoginKeys].[UpdatedTime]
                    {2}
                )
                (
                select
                    [LoginKeys_deleted].[LoginId],
                    [LoginKeys_deleted].[Key],
                    [LoginKeys_deleted].[Ver],
                    [LoginKeys_deleted].[TenantNames],
                    [LoginKeys_deleted].[TenantId],
                    [LoginKeys_deleted].[UserId],
                    [LoginKeys_deleted].[Comments],
                    [LoginKeys_deleted].[Creator],
                    [LoginKeys_deleted].[Updator],
                    [LoginKeys_deleted].[CreatedTime],
                    [LoginKeys_deleted].[UpdatedTime] 
                    {1}
                from [LoginKeys_deleted] {0});
                delete from [LoginKeys_deleted] {0}".Params(DeleteParams(tableName: "LoginKeys"));
        }

        public static string RestoreMailAddressesStatement()
        {
            return @"
                update [MailAddresses_deleted]
                set
                    [MailAddresses_deleted].[Updator] = @_U,
                    [MailAddresses_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [MailAddresses] on; 
                insert into [MailAddresses]
                (
                    [MailAddresses].[OwnerId],
                    [MailAddresses].[OwnerType],
                    [MailAddresses].[MailAddressId],
                    [MailAddresses].[Ver],
                    [MailAddresses].[MailAddress],
                    [MailAddresses].[Comments],
                    [MailAddresses].[Creator],
                    [MailAddresses].[Updator],
                    [MailAddresses].[CreatedTime],
                    [MailAddresses].[UpdatedTime]
                    {2}
                )
                (
                select
                    [MailAddresses_deleted].[OwnerId],
                    [MailAddresses_deleted].[OwnerType],
                    [MailAddresses_deleted].[MailAddressId],
                    [MailAddresses_deleted].[Ver],
                    [MailAddresses_deleted].[MailAddress],
                    [MailAddresses_deleted].[Comments],
                    [MailAddresses_deleted].[Creator],
                    [MailAddresses_deleted].[Updator],
                    [MailAddresses_deleted].[CreatedTime],
                    [MailAddresses_deleted].[UpdatedTime] 
                    {1}
                from [MailAddresses_deleted] {0});
                set identity_insert [MailAddresses] off; 
                delete from [MailAddresses_deleted] {0}".Params(DeleteParams(tableName: "MailAddresses"));
        }

        public static string RestoreOutgoingMailsStatement()
        {
            return @"
                update [OutgoingMails_deleted]
                set
                    [OutgoingMails_deleted].[Updator] = @_U,
                    [OutgoingMails_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [OutgoingMails] on; 
                insert into [OutgoingMails]
                (
                    [OutgoingMails].[ReferenceType],
                    [OutgoingMails].[ReferenceId],
                    [OutgoingMails].[ReferenceVer],
                    [OutgoingMails].[OutgoingMailId],
                    [OutgoingMails].[Ver],
                    [OutgoingMails].[Host],
                    [OutgoingMails].[Port],
                    [OutgoingMails].[From],
                    [OutgoingMails].[To],
                    [OutgoingMails].[Cc],
                    [OutgoingMails].[Bcc],
                    [OutgoingMails].[Title],
                    [OutgoingMails].[Body],
                    [OutgoingMails].[SentTime],
                    [OutgoingMails].[Comments],
                    [OutgoingMails].[Creator],
                    [OutgoingMails].[Updator],
                    [OutgoingMails].[CreatedTime],
                    [OutgoingMails].[UpdatedTime]
                    {2}
                )
                (
                select
                    [OutgoingMails_deleted].[ReferenceType],
                    [OutgoingMails_deleted].[ReferenceId],
                    [OutgoingMails_deleted].[ReferenceVer],
                    [OutgoingMails_deleted].[OutgoingMailId],
                    [OutgoingMails_deleted].[Ver],
                    [OutgoingMails_deleted].[Host],
                    [OutgoingMails_deleted].[Port],
                    [OutgoingMails_deleted].[From],
                    [OutgoingMails_deleted].[To],
                    [OutgoingMails_deleted].[Cc],
                    [OutgoingMails_deleted].[Bcc],
                    [OutgoingMails_deleted].[Title],
                    [OutgoingMails_deleted].[Body],
                    [OutgoingMails_deleted].[SentTime],
                    [OutgoingMails_deleted].[Comments],
                    [OutgoingMails_deleted].[Creator],
                    [OutgoingMails_deleted].[Updator],
                    [OutgoingMails_deleted].[CreatedTime],
                    [OutgoingMails_deleted].[UpdatedTime] 
                    {1}
                from [OutgoingMails_deleted] {0});
                set identity_insert [OutgoingMails] off; 
                delete from [OutgoingMails_deleted] {0}".Params(DeleteParams(tableName: "OutgoingMails"));
        }

        public static string RestoreSearchIndexesStatement()
        {
            return @"
                update [SearchIndexes_deleted]
                set
                    [SearchIndexes_deleted].[Updator] = @_U,
                    [SearchIndexes_deleted].[UpdatedTime] = getdate() {0};
                insert into [SearchIndexes]
                (
                    [SearchIndexes].[Word],
                    [SearchIndexes].[ReferenceId],
                    [SearchIndexes].[Ver],
                    [SearchIndexes].[Priority],
                    [SearchIndexes].[Comments],
                    [SearchIndexes].[Creator],
                    [SearchIndexes].[Updator],
                    [SearchIndexes].[CreatedTime],
                    [SearchIndexes].[UpdatedTime]
                    {2}
                )
                (
                select
                    [SearchIndexes_deleted].[Word],
                    [SearchIndexes_deleted].[ReferenceId],
                    [SearchIndexes_deleted].[Ver],
                    [SearchIndexes_deleted].[Priority],
                    [SearchIndexes_deleted].[Comments],
                    [SearchIndexes_deleted].[Creator],
                    [SearchIndexes_deleted].[Updator],
                    [SearchIndexes_deleted].[CreatedTime],
                    [SearchIndexes_deleted].[UpdatedTime] 
                    {1}
                from [SearchIndexes_deleted] {0});
                delete from [SearchIndexes_deleted] {0}".Params(DeleteParams(tableName: "SearchIndexes"));
        }

        public static string RestoreItemsStatement()
        {
            return @"
                update [Items_deleted]
                set
                    [Items_deleted].[Updator] = @_U,
                    [Items_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Items] on; 
                insert into [Items]
                (
                    [Items].[ReferenceId],
                    [Items].[Ver],
                    [Items].[ReferenceType],
                    [Items].[SiteId],
                    [Items].[Title],
                    [Items].[FullText],
                    [Items].[SearchIndexCreatedTime],
                    [Items].[Comments],
                    [Items].[Creator],
                    [Items].[Updator],
                    [Items].[CreatedTime],
                    [Items].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Items_deleted].[ReferenceId],
                    [Items_deleted].[Ver],
                    [Items_deleted].[ReferenceType],
                    [Items_deleted].[SiteId],
                    [Items_deleted].[Title],
                    [Items_deleted].[FullText],
                    [Items_deleted].[SearchIndexCreatedTime],
                    [Items_deleted].[Comments],
                    [Items_deleted].[Creator],
                    [Items_deleted].[Updator],
                    [Items_deleted].[CreatedTime],
                    [Items_deleted].[UpdatedTime] 
                    {1}
                from [Items_deleted] {0});
                set identity_insert [Items] off; 
                delete from [Items_deleted] {0}".Params(DeleteParams(tableName: "Items"));
        }

        public static string RestoreSitesStatement()
        {
            return @"
                update [Sites_deleted]
                set
                    [Sites_deleted].[Updator] = @_U,
                    [Sites_deleted].[UpdatedTime] = getdate() {0};
                insert into [Sites]
                (
                    [Sites].[TenantId],
                    [Sites].[SiteId],
                    [Sites].[UpdatedTime],
                    [Sites].[Ver],
                    [Sites].[Title],
                    [Sites].[Body],
                    [Sites].[GridGuide],
                    [Sites].[EditorGuide],
                    [Sites].[ReferenceType],
                    [Sites].[ParentId],
                    [Sites].[InheritPermission],
                    [Sites].[SiteSettings],
                    [Sites].[Publish],
                    [Sites].[LockedTime],
                    [Sites].[LockedUser],
                    [Sites].[Comments],
                    [Sites].[Creator],
                    [Sites].[Updator],
                    [Sites].[CreatedTime]
                    {2}
                )
                (
                select
                    [Sites_deleted].[TenantId],
                    [Sites_deleted].[SiteId],
                    [Sites_deleted].[UpdatedTime],
                    [Sites_deleted].[Ver],
                    [Sites_deleted].[Title],
                    [Sites_deleted].[Body],
                    [Sites_deleted].[GridGuide],
                    [Sites_deleted].[EditorGuide],
                    [Sites_deleted].[ReferenceType],
                    [Sites_deleted].[ParentId],
                    [Sites_deleted].[InheritPermission],
                    [Sites_deleted].[SiteSettings],
                    [Sites_deleted].[Publish],
                    [Sites_deleted].[LockedTime],
                    [Sites_deleted].[LockedUser],
                    [Sites_deleted].[Comments],
                    [Sites_deleted].[Creator],
                    [Sites_deleted].[Updator],
                    [Sites_deleted].[CreatedTime] 
                    {1}
                from [Sites_deleted] {0});
                delete from [Sites_deleted] {0}".Params(DeleteParams(tableName: "Sites"));
        }

        public static string RestoreOrdersStatement()
        {
            return @"
                update [Orders_deleted]
                set
                    [Orders_deleted].[Updator] = @_U,
                    [Orders_deleted].[UpdatedTime] = getdate() {0};
                insert into [Orders]
                (
                    [Orders].[ReferenceId],
                    [Orders].[ReferenceType],
                    [Orders].[OwnerId],
                    [Orders].[Ver],
                    [Orders].[Data],
                    [Orders].[Comments],
                    [Orders].[Creator],
                    [Orders].[Updator],
                    [Orders].[CreatedTime],
                    [Orders].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Orders_deleted].[ReferenceId],
                    [Orders_deleted].[ReferenceType],
                    [Orders_deleted].[OwnerId],
                    [Orders_deleted].[Ver],
                    [Orders_deleted].[Data],
                    [Orders_deleted].[Comments],
                    [Orders_deleted].[Creator],
                    [Orders_deleted].[Updator],
                    [Orders_deleted].[CreatedTime],
                    [Orders_deleted].[UpdatedTime] 
                    {1}
                from [Orders_deleted] {0});
                delete from [Orders_deleted] {0}".Params(DeleteParams(tableName: "Orders"));
        }

        public static string RestoreExportSettingsStatement()
        {
            return @"
                update [ExportSettings_deleted]
                set
                    [ExportSettings_deleted].[Updator] = @_U,
                    [ExportSettings_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [ExportSettings] on; 
                insert into [ExportSettings]
                (
                    [ExportSettings].[ReferenceType],
                    [ExportSettings].[ReferenceId],
                    [ExportSettings].[Title],
                    [ExportSettings].[ExportSettingId],
                    [ExportSettings].[Ver],
                    [ExportSettings].[AddHeader],
                    [ExportSettings].[ExportColumns],
                    [ExportSettings].[Comments],
                    [ExportSettings].[Creator],
                    [ExportSettings].[Updator],
                    [ExportSettings].[CreatedTime],
                    [ExportSettings].[UpdatedTime]
                    {2}
                )
                (
                select
                    [ExportSettings_deleted].[ReferenceType],
                    [ExportSettings_deleted].[ReferenceId],
                    [ExportSettings_deleted].[Title],
                    [ExportSettings_deleted].[ExportSettingId],
                    [ExportSettings_deleted].[Ver],
                    [ExportSettings_deleted].[AddHeader],
                    [ExportSettings_deleted].[ExportColumns],
                    [ExportSettings_deleted].[Comments],
                    [ExportSettings_deleted].[Creator],
                    [ExportSettings_deleted].[Updator],
                    [ExportSettings_deleted].[CreatedTime],
                    [ExportSettings_deleted].[UpdatedTime] 
                    {1}
                from [ExportSettings_deleted] {0});
                set identity_insert [ExportSettings] off; 
                delete from [ExportSettings_deleted] {0}".Params(DeleteParams(tableName: "ExportSettings"));
        }

        public static string RestoreLinksStatement()
        {
            return @"
                update [Links_deleted]
                set
                    [Links_deleted].[Updator] = @_U,
                    [Links_deleted].[UpdatedTime] = getdate() {0};
                insert into [Links]
                (
                    [Links].[DestinationId],
                    [Links].[SourceId],
                    [Links].[Ver],
                    [Links].[Comments],
                    [Links].[Creator],
                    [Links].[Updator],
                    [Links].[CreatedTime],
                    [Links].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Links_deleted].[DestinationId],
                    [Links_deleted].[SourceId],
                    [Links_deleted].[Ver],
                    [Links_deleted].[Comments],
                    [Links_deleted].[Creator],
                    [Links_deleted].[Updator],
                    [Links_deleted].[CreatedTime],
                    [Links_deleted].[UpdatedTime] 
                    {1}
                from [Links_deleted] {0});
                delete from [Links_deleted] {0}".Params(DeleteParams(tableName: "Links"));
        }

        public static string RestoreBinariesStatement()
        {
            return @"
                update [Binaries_deleted]
                set
                    [Binaries_deleted].[Updator] = @_U,
                    [Binaries_deleted].[UpdatedTime] = getdate() {0};
                set identity_insert [Binaries] on; 
                insert into [Binaries]
                (
                    [Binaries].[BinaryId],
                    [Binaries].[TenantId],
                    [Binaries].[ReferenceId],
                    [Binaries].[Guid],
                    [Binaries].[Ver],
                    [Binaries].[BinaryType],
                    [Binaries].[Title],
                    [Binaries].[Body],
                    [Binaries].[Bin],
                    [Binaries].[Thumbnail],
                    [Binaries].[Icon],
                    [Binaries].[FileName],
                    [Binaries].[Extension],
                    [Binaries].[Size],
                    [Binaries].[ContentType],
                    [Binaries].[BinarySettings],
                    [Binaries].[Comments],
                    [Binaries].[Creator],
                    [Binaries].[Updator],
                    [Binaries].[CreatedTime],
                    [Binaries].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Binaries_deleted].[BinaryId],
                    [Binaries_deleted].[TenantId],
                    [Binaries_deleted].[ReferenceId],
                    [Binaries_deleted].[Guid],
                    [Binaries_deleted].[Ver],
                    [Binaries_deleted].[BinaryType],
                    [Binaries_deleted].[Title],
                    [Binaries_deleted].[Body],
                    [Binaries_deleted].[Bin],
                    [Binaries_deleted].[Thumbnail],
                    [Binaries_deleted].[Icon],
                    [Binaries_deleted].[FileName],
                    [Binaries_deleted].[Extension],
                    [Binaries_deleted].[Size],
                    [Binaries_deleted].[ContentType],
                    [Binaries_deleted].[BinarySettings],
                    [Binaries_deleted].[Comments],
                    [Binaries_deleted].[Creator],
                    [Binaries_deleted].[Updator],
                    [Binaries_deleted].[CreatedTime],
                    [Binaries_deleted].[UpdatedTime] 
                    {1}
                from [Binaries_deleted] {0});
                set identity_insert [Binaries] off; 
                delete from [Binaries_deleted] {0}".Params(DeleteParams(tableName: "Binaries"));
        }

        public static string RestorePermissionsStatement()
        {
            return @"
                update [Permissions_deleted]
                set
                    [Permissions_deleted].[Updator] = @_U,
                    [Permissions_deleted].[UpdatedTime] = getdate() {0};
                insert into [Permissions]
                (
                    [Permissions].[ReferenceId],
                    [Permissions].[DeptId],
                    [Permissions].[GroupId],
                    [Permissions].[UserId],
                    [Permissions].[Ver],
                    [Permissions].[PermissionType],
                    [Permissions].[Comments],
                    [Permissions].[Creator],
                    [Permissions].[Updator],
                    [Permissions].[CreatedTime],
                    [Permissions].[UpdatedTime]
                    {2}
                )
                (
                select
                    [Permissions_deleted].[ReferenceId],
                    [Permissions_deleted].[DeptId],
                    [Permissions_deleted].[GroupId],
                    [Permissions_deleted].[UserId],
                    [Permissions_deleted].[Ver],
                    [Permissions_deleted].[PermissionType],
                    [Permissions_deleted].[Comments],
                    [Permissions_deleted].[Creator],
                    [Permissions_deleted].[Updator],
                    [Permissions_deleted].[CreatedTime],
                    [Permissions_deleted].[UpdatedTime] 
                    {1}
                from [Permissions_deleted] {0});
                delete from [Permissions_deleted] {0}".Params(DeleteParams(tableName: "Permissions"));
        }

        public static string RestoreIssuesStatement()
        {
            return @"
                update [Issues_deleted]
                set
                    [Issues_deleted].[Updator] = @_U,
                    [Issues_deleted].[UpdatedTime] = getdate() {0};
                insert into [Issues]
                (
                    [Issues].[SiteId],
                    [Issues].[UpdatedTime],
                    [Issues].[IssueId],
                    [Issues].[Ver],
                    [Issues].[Title],
                    [Issues].[Body],
                    [Issues].[StartTime],
                    [Issues].[CompletionTime],
                    [Issues].[WorkValue],
                    [Issues].[ProgressRate],
                    [Issues].[Status],
                    [Issues].[Manager],
                    [Issues].[Owner],
                    [Issues].[Comments],
                    [Issues].[Creator],
                    [Issues].[Updator],
                    [Issues].[CreatedTime]
                    {2}
                )
                (
                select
                    [Issues_deleted].[SiteId],
                    [Issues_deleted].[UpdatedTime],
                    [Issues_deleted].[IssueId],
                    [Issues_deleted].[Ver],
                    [Issues_deleted].[Title],
                    [Issues_deleted].[Body],
                    [Issues_deleted].[StartTime],
                    [Issues_deleted].[CompletionTime],
                    [Issues_deleted].[WorkValue],
                    [Issues_deleted].[ProgressRate],
                    [Issues_deleted].[Status],
                    [Issues_deleted].[Manager],
                    [Issues_deleted].[Owner],
                    [Issues_deleted].[Comments],
                    [Issues_deleted].[Creator],
                    [Issues_deleted].[Updator],
                    [Issues_deleted].[CreatedTime] 
                    {1}
                from [Issues_deleted] {0});
                delete from [Issues_deleted] {0}".Params(DeleteParams(tableName: "Issues"));
        }

        public static string RestoreResultsStatement()
        {
            return @"
                update [Results_deleted]
                set
                    [Results_deleted].[Updator] = @_U,
                    [Results_deleted].[UpdatedTime] = getdate() {0};
                insert into [Results]
                (
                    [Results].[SiteId],
                    [Results].[UpdatedTime],
                    [Results].[ResultId],
                    [Results].[Ver],
                    [Results].[Title],
                    [Results].[Body],
                    [Results].[Status],
                    [Results].[Manager],
                    [Results].[Owner],
                    [Results].[Comments],
                    [Results].[Creator],
                    [Results].[Updator],
                    [Results].[CreatedTime]
                    {2}
                )
                (
                select
                    [Results_deleted].[SiteId],
                    [Results_deleted].[UpdatedTime],
                    [Results_deleted].[ResultId],
                    [Results_deleted].[Ver],
                    [Results_deleted].[Title],
                    [Results_deleted].[Body],
                    [Results_deleted].[Status],
                    [Results_deleted].[Manager],
                    [Results_deleted].[Owner],
                    [Results_deleted].[Comments],
                    [Results_deleted].[Creator],
                    [Results_deleted].[Updator],
                    [Results_deleted].[CreatedTime] 
                    {1}
                from [Results_deleted] {0});
                delete from [Results_deleted] {0}".Params(DeleteParams(tableName: "Results"));
        }

        public static string RestoreWikisStatement()
        {
            return @"
                update [Wikis_deleted]
                set
                    [Wikis_deleted].[Updator] = @_U,
                    [Wikis_deleted].[UpdatedTime] = getdate() {0};
                insert into [Wikis]
                (
                    [Wikis].[SiteId],
                    [Wikis].[UpdatedTime],
                    [Wikis].[WikiId],
                    [Wikis].[Ver],
                    [Wikis].[Title],
                    [Wikis].[Body],
                    [Wikis].[Comments],
                    [Wikis].[Creator],
                    [Wikis].[Updator],
                    [Wikis].[CreatedTime]
                    {2}
                )
                (
                select
                    [Wikis_deleted].[SiteId],
                    [Wikis_deleted].[UpdatedTime],
                    [Wikis_deleted].[WikiId],
                    [Wikis_deleted].[Ver],
                    [Wikis_deleted].[Title],
                    [Wikis_deleted].[Body],
                    [Wikis_deleted].[Comments],
                    [Wikis_deleted].[Creator],
                    [Wikis_deleted].[Updator],
                    [Wikis_deleted].[CreatedTime] 
                    {1}
                from [Wikis_deleted] {0});
                delete from [Wikis_deleted] {0}".Params(DeleteParams(tableName: "Wikis"));
        }

        public static TenantsColumnCollection TenantsColumn()
        {
            return new TenantsColumnCollection();
        }

        public class TenantsColumnCollection : SqlColumnCollection
        {
            public new TenantsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Tenants",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static TenantsJoinCollection TenantsJoin()
        {
            return new TenantsJoinCollection();
        }

        public class TenantsJoinCollection : SqlJoinCollection
        {
            public TenantsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static TenantsWhereCollection TenantsWhere()
        {
            return new TenantsWhereCollection();
        }

        public class TenantsWhereCollection : SqlWhereCollection
        {
            public new TenantsWhereCollection Add(
                string tableName = "Tenants",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static TenantsGroupByCollection TenantsGroupBy()
        {
            return new TenantsGroupByCollection();
        }

        public class TenantsGroupByCollection : SqlGroupByCollection
        {
            public new TenantsGroupByCollection Add(
                string columnBracket, string tableName = "Tenants")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static TenantsHavingCollection TenantsHaving()
        {
            return new TenantsHavingCollection();
        }

        public class TenantsHavingCollection : SqlHavingCollection
        {
            public TenantsHavingCollection Add(
                string columnBracket,
                string tableName = "Tenants",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static TenantsOrderByCollection TenantsOrderBy()
        {
            return new TenantsOrderByCollection();
        }

        public class TenantsOrderByCollection : SqlOrderByCollection
        {
            public new TenantsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Tenants",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static TenantsParamCollection TenantsParam()
        {
            return new TenantsParamCollection();
        }

        public class TenantsParamCollection : SqlParamCollection
        {
            public new TenantsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Tenants_TenantName_WhereLike(
            string tableName = "Tenants",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[TenantName] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Tenants_Title_WhereLike(
            string tableName = "Tenants",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Title] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Tenants_Body_WhereLike(
            string tableName = "Tenants",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Tenants_HtmlTitleTop_WhereLike(
            string tableName = "Tenants",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[HtmlTitleTop] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Tenants_HtmlTitleSite_WhereLike(
            string tableName = "Tenants",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[HtmlTitleSite] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Tenants_HtmlTitleRecord_WhereLike(
            string tableName = "Tenants",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[HtmlTitleRecord] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static TenantsColumnCollection TenantsColumn(
            this TenantsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "TenantName":
                    return self.TenantName(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "ContractSettings":
                    return self.ContractSettings(_as: _as, function: function);
                case "ContractDeadline":
                    return self.ContractDeadline(_as: _as, function: function);
                case "DisableAllUsersPermission":
                    return self.DisableAllUsersPermission(_as: _as, function: function);
                case "LogoType":
                    return self.LogoType(_as: _as, function: function);
                case "HtmlTitleTop":
                    return self.HtmlTitleTop(_as: _as, function: function);
                case "HtmlTitleSite":
                    return self.HtmlTitleSite(_as: _as, function: function);
                case "HtmlTitleRecord":
                    return self.HtmlTitleRecord(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static TenantsColumnCollection TenantId(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_TenantId(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection Ver(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_Ver(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection TenantName(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "TenantName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_TenantName(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "TenantName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection Title(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_Title(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection Body(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_Body(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection ContractSettings(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "ContractSettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ContractSettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_ContractSettings(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "ContractSettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ContractSettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection ContractDeadline(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "ContractDeadline",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ContractDeadline]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_ContractDeadline(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "ContractDeadline",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ContractDeadline]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection DisableAllUsersPermission(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "DisableAllUsersPermission",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DisableAllUsersPermission]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_DisableAllUsersPermission(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "DisableAllUsersPermission",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DisableAllUsersPermission]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection LogoType(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "LogoType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LogoType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_LogoType(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "LogoType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LogoType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection HtmlTitleTop(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "HtmlTitleTop",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HtmlTitleTop]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_HtmlTitleTop(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "HtmlTitleTop",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HtmlTitleTop]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection HtmlTitleSite(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "HtmlTitleSite",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HtmlTitleSite]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_HtmlTitleSite(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "HtmlTitleSite",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HtmlTitleSite]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection HtmlTitleRecord(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "HtmlTitleRecord",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HtmlTitleRecord]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_HtmlTitleRecord(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "HtmlTitleRecord",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HtmlTitleRecord]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection Comments(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_Comments(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection Creator(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_Creator(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection Updator(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_Updator(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection CreatedTime(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection UpdatedTime(
            this TenantsColumnCollection self,
            string tableName = "Tenants",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Tenants_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Tenants",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static TenantsColumnCollection TenantsCount(
            this TenantsColumnCollection self,
            string _as = "TenantsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static TenantsWhereCollection TenantId(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection Ver(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection TenantName(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantName]" },
                    tableName: tableName,
                    name: "TenantName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_TenantName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantName]" },
                    tableName: tableName,
                    name: "TenantName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection Title(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection Body(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection ContractSettings(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContractSettings]" },
                    tableName: tableName,
                    name: "ContractSettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_ContractSettings(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContractSettings]" },
                    tableName: tableName,
                    name: "ContractSettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection ContractDeadline(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContractDeadline]" },
                    tableName: tableName,
                    name: "ContractDeadline",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_ContractDeadline(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContractDeadline]" },
                    tableName: tableName,
                    name: "ContractDeadline",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection DisableAllUsersPermission(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DisableAllUsersPermission]" },
                    tableName: tableName,
                    name: "DisableAllUsersPermission",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_DisableAllUsersPermission(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DisableAllUsersPermission]" },
                    tableName: tableName,
                    name: "DisableAllUsersPermission",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection LogoType(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LogoType]" },
                    tableName: tableName,
                    name: "LogoType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_LogoType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LogoType]" },
                    tableName: tableName,
                    name: "LogoType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection HtmlTitleTop(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HtmlTitleTop]" },
                    tableName: tableName,
                    name: "HtmlTitleTop",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_HtmlTitleTop(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HtmlTitleTop]" },
                    tableName: tableName,
                    name: "HtmlTitleTop",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection HtmlTitleSite(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HtmlTitleSite]" },
                    tableName: tableName,
                    name: "HtmlTitleSite",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_HtmlTitleSite(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HtmlTitleSite]" },
                    tableName: tableName,
                    name: "HtmlTitleSite",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection HtmlTitleRecord(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HtmlTitleRecord]" },
                    tableName: tableName,
                    name: "HtmlTitleRecord",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_HtmlTitleRecord(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HtmlTitleRecord]" },
                    tableName: tableName,
                    name: "HtmlTitleRecord",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection Comments(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection Creator(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection Updator(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection CreatedTime(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection UpdatedTime(
            this TenantsWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Tenants_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static TenantsWhereCollection TenantId_In(
            this TenantsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Tenants",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static TenantsWhereCollection Ver_In(
            this TenantsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Tenants",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static TenantsWhereCollection LogoType_In(
            this TenantsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Tenants",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[LogoType]" },
                    tableName: tableName,
                    name: "LogoType",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[LogoType]" },
                    tableName: tableName,
                    name: "LogoType",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static TenantsWhereCollection Creator_In(
            this TenantsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Tenants",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static TenantsWhereCollection Updator_In(
            this TenantsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Tenants",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static TenantsWhereCollection TenantId_Between(
            this TenantsWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection Ver_Between(
            this TenantsWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection LogoType_Between(
            this TenantsWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LogoType]" },
                    tableName: tableName,
                    name: "LogoType",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_LogoType_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LogoType]" },
                    tableName: tableName,
                    name: "LogoType",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection Creator_Between(
            this TenantsWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection Updator_Between(
            this TenantsWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection ContractDeadline_Between(
            this TenantsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContractDeadline]" },
                    tableName: tableName,
                    name: "ContractDeadline",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_ContractDeadline_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContractDeadline]" },
                    tableName: tableName,
                    name: "ContractDeadline",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection CreatedTime_Between(
            this TenantsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection UpdatedTime_Between(
            this TenantsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Tenants_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Tenants",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static TenantsWhereCollection Sub(
            this TenantsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static TenantsWhereCollection Or(
            this TenantsWhereCollection self,
            TenantsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static TenantsGroupByCollection TenantsGroupBy(
            this TenantsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "TenantId": return self.TenantId();
                    case "Ver": return self.Ver();
                    case "TenantName": return self.TenantName();
                    case "Title": return self.Title();
                    case "Body": return self.Body();
                    case "ContractSettings": return self.ContractSettings();
                    case "ContractDeadline": return self.ContractDeadline();
                    case "DisableAllUsersPermission": return self.DisableAllUsersPermission();
                    case "LogoType": return self.LogoType();
                    case "HtmlTitleTop": return self.HtmlTitleTop();
                    case "HtmlTitleSite": return self.HtmlTitleSite();
                    case "HtmlTitleRecord": return self.HtmlTitleRecord();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static TenantsGroupByCollection TenantId(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_TenantId(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static TenantsGroupByCollection Ver(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_Ver(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static TenantsGroupByCollection TenantName(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[TenantName]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_TenantName(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[TenantName]", tableName: tableName);
        }

        public static TenantsGroupByCollection Title(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_Title(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static TenantsGroupByCollection Body(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_Body(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static TenantsGroupByCollection ContractSettings(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[ContractSettings]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_ContractSettings(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[ContractSettings]", tableName: tableName);
        }

        public static TenantsGroupByCollection ContractDeadline(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[ContractDeadline]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_ContractDeadline(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[ContractDeadline]", tableName: tableName);
        }

        public static TenantsGroupByCollection DisableAllUsersPermission(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[DisableAllUsersPermission]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_DisableAllUsersPermission(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[DisableAllUsersPermission]", tableName: tableName);
        }

        public static TenantsGroupByCollection LogoType(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[LogoType]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_LogoType(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[LogoType]", tableName: tableName);
        }

        public static TenantsGroupByCollection HtmlTitleTop(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[HtmlTitleTop]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_HtmlTitleTop(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[HtmlTitleTop]", tableName: tableName);
        }

        public static TenantsGroupByCollection HtmlTitleSite(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[HtmlTitleSite]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_HtmlTitleSite(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[HtmlTitleSite]", tableName: tableName);
        }

        public static TenantsGroupByCollection HtmlTitleRecord(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[HtmlTitleRecord]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_HtmlTitleRecord(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[HtmlTitleRecord]", tableName: tableName);
        }

        public static TenantsGroupByCollection Comments(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_Comments(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static TenantsGroupByCollection Creator(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_Creator(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static TenantsGroupByCollection Updator(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_Updator(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static TenantsGroupByCollection CreatedTime(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static TenantsGroupByCollection UpdatedTime(
            this TenantsGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Tenants_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Tenants")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static TenantsHavingCollection TenantsCount(
            this TenantsHavingCollection self,
            object value = null,
            string tableName = "Tenants",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static TenantsHavingCollection CreatedTime(
            this TenantsHavingCollection self,
            string tableName = "Tenants",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static TenantsHavingCollection UpdatedTime(
            this TenantsHavingCollection self,
            string tableName = "Tenants",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static TenantsOrderByCollection TenantId(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection Ver(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection TenantName(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection Title(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection Body(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection ContractSettings(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ContractSettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection ContractDeadline(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ContractDeadline]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection DisableAllUsersPermission(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DisableAllUsersPermission]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection LogoType(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LogoType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection HtmlTitleTop(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HtmlTitleTop]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection HtmlTitleSite(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HtmlTitleSite]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection HtmlTitleRecord(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HtmlTitleRecord]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection Comments(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection Creator(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection Updator(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection CreatedTime(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection UpdatedTime(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_TenantName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_ContractSettings(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ContractSettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_ContractDeadline(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ContractDeadline]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_DisableAllUsersPermission(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DisableAllUsersPermission]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_LogoType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LogoType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_HtmlTitleTop(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HtmlTitleTop]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_HtmlTitleSite(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HtmlTitleSite]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_HtmlTitleRecord(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HtmlTitleRecord]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Tenants_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Tenants",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static TenantsOrderByCollection TenantsCount(
            this TenantsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static TenantsParamCollection TenantId(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection Ver(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection TenantName(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantName]",
                    name: "TenantName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_TenantName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantName]",
                    name: "TenantName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection Title(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection Body(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection ContractSettings(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ContractSettings]",
                    name: "ContractSettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_ContractSettings(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ContractSettings]",
                    name: "ContractSettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection ContractDeadline(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ContractDeadline]",
                    name: "ContractDeadline",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_ContractDeadline(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ContractDeadline]",
                    name: "ContractDeadline",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection DisableAllUsersPermission(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DisableAllUsersPermission]",
                    name: "DisableAllUsersPermission",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_DisableAllUsersPermission(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DisableAllUsersPermission]",
                    name: "DisableAllUsersPermission",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection LogoType(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LogoType]",
                    name: "LogoType",
                    value: value.ToInt(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_LogoType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LogoType]",
                    name: "LogoType",
                    value: value.ToInt(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection HtmlTitleTop(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HtmlTitleTop]",
                    name: "HtmlTitleTop",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_HtmlTitleTop(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HtmlTitleTop]",
                    name: "HtmlTitleTop",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection HtmlTitleSite(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HtmlTitleSite]",
                    name: "HtmlTitleSite",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_HtmlTitleSite(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HtmlTitleSite]",
                    name: "HtmlTitleSite",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection HtmlTitleRecord(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HtmlTitleRecord]",
                    name: "HtmlTitleRecord",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_HtmlTitleRecord(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HtmlTitleRecord]",
                    name: "HtmlTitleRecord",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection Comments(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection Creator(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection Updator(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection CreatedTime(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsParamCollection UpdatedTime(
            this TenantsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Tenants_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosColumnCollection DemosColumn()
        {
            return new DemosColumnCollection();
        }

        public class DemosColumnCollection : SqlColumnCollection
        {
            public new DemosColumnCollection Add(
                string columnBracket = null,
                string tableName = "Demos",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static DemosJoinCollection DemosJoin()
        {
            return new DemosJoinCollection();
        }

        public class DemosJoinCollection : SqlJoinCollection
        {
            public DemosJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static DemosWhereCollection DemosWhere()
        {
            return new DemosWhereCollection();
        }

        public class DemosWhereCollection : SqlWhereCollection
        {
            public new DemosWhereCollection Add(
                string tableName = "Demos",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static DemosGroupByCollection DemosGroupBy()
        {
            return new DemosGroupByCollection();
        }

        public class DemosGroupByCollection : SqlGroupByCollection
        {
            public new DemosGroupByCollection Add(
                string columnBracket, string tableName = "Demos")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static DemosHavingCollection DemosHaving()
        {
            return new DemosHavingCollection();
        }

        public class DemosHavingCollection : SqlHavingCollection
        {
            public DemosHavingCollection Add(
                string columnBracket,
                string tableName = "Demos",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static DemosOrderByCollection DemosOrderBy()
        {
            return new DemosOrderByCollection();
        }

        public class DemosOrderByCollection : SqlOrderByCollection
        {
            public new DemosOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Demos",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static DemosParamCollection DemosParam()
        {
            return new DemosParamCollection();
        }

        public class DemosParamCollection : SqlParamCollection
        {
            public new DemosParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Demos_Title_WhereLike(
            string tableName = "Demos",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Title] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static DemosColumnCollection DemosColumn(
            this DemosColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "DemoId":
                    return self.DemoId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "LoginId":
                    return self.LoginId(_as: _as, function: function);
                case "Passphrase":
                    return self.Passphrase(_as: _as, function: function);
                case "MailAddress":
                    return self.MailAddress(_as: _as, function: function);
                case "Initialized":
                    return self.Initialized(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static DemosColumnCollection DemoId(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "DemoId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DemoId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_DemoId(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "DemoId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DemoId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection Ver(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_Ver(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection TenantId(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_TenantId(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection Title(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_Title(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection LoginId(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_LoginId(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection Passphrase(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "Passphrase",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Passphrase]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_Passphrase(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "Passphrase",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Passphrase]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection MailAddress(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "MailAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_MailAddress(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "MailAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection Initialized(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "Initialized",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Initialized]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_Initialized(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "Initialized",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Initialized]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection Comments(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_Comments(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection Creator(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_Creator(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection Updator(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_Updator(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection CreatedTime(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection UpdatedTime(
            this DemosColumnCollection self,
            string tableName = "Demos",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Demos_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Demos",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DemosColumnCollection DemosCount(
            this DemosColumnCollection self,
            string _as = "DemosCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static DemosWhereCollection DemoId(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DemoId]" },
                    tableName: tableName,
                    name: "DemoId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_DemoId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DemoId]" },
                    tableName: tableName,
                    name: "DemoId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection Ver(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection TenantId(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection Title(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection LoginId(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_LoginId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection Passphrase(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Passphrase]" },
                    tableName: tableName,
                    name: "Passphrase",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_Passphrase(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Passphrase]" },
                    tableName: tableName,
                    name: "Passphrase",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection MailAddress(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddress]" },
                    tableName: tableName,
                    name: "MailAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_MailAddress(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddress]" },
                    tableName: tableName,
                    name: "MailAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection Initialized(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Initialized]" },
                    tableName: tableName,
                    name: "Initialized",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_Initialized(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Initialized]" },
                    tableName: tableName,
                    name: "Initialized",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection Comments(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection Creator(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection Updator(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection CreatedTime(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection UpdatedTime(
            this DemosWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Demos_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DemosWhereCollection DemoId_In(
            this DemosWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Demos",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[DemoId]" },
                    tableName: tableName,
                    name: "DemoId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[DemoId]" },
                    tableName: tableName,
                    name: "DemoId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DemosWhereCollection Ver_In(
            this DemosWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Demos",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DemosWhereCollection TenantId_In(
            this DemosWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Demos",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DemosWhereCollection Creator_In(
            this DemosWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Demos",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DemosWhereCollection Updator_In(
            this DemosWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Demos",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DemosWhereCollection DemoId_Between(
            this DemosWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DemoId]" },
                    tableName: tableName,
                    name: "DemoId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Demos_DemoId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DemoId]" },
                    tableName: tableName,
                    name: "DemoId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DemosWhereCollection Ver_Between(
            this DemosWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Demos_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DemosWhereCollection TenantId_Between(
            this DemosWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Demos_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DemosWhereCollection Creator_Between(
            this DemosWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Demos_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DemosWhereCollection Updator_Between(
            this DemosWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Demos_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DemosWhereCollection CreatedTime_Between(
            this DemosWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Demos_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static DemosWhereCollection UpdatedTime_Between(
            this DemosWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Demos_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Demos",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static DemosWhereCollection Sub(
            this DemosWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static DemosWhereCollection Or(
            this DemosWhereCollection self,
            DemosWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static DemosGroupByCollection DemosGroupBy(
            this DemosGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "DemoId": return self.DemoId();
                    case "Ver": return self.Ver();
                    case "TenantId": return self.TenantId();
                    case "Title": return self.Title();
                    case "LoginId": return self.LoginId();
                    case "Passphrase": return self.Passphrase();
                    case "MailAddress": return self.MailAddress();
                    case "Initialized": return self.Initialized();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static DemosGroupByCollection DemoId(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[DemoId]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_DemoId(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[DemoId]", tableName: tableName);
        }

        public static DemosGroupByCollection Ver(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_Ver(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static DemosGroupByCollection TenantId(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_TenantId(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static DemosGroupByCollection Title(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_Title(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static DemosGroupByCollection LoginId(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_LoginId(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static DemosGroupByCollection Passphrase(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Passphrase]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_Passphrase(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Passphrase]", tableName: tableName);
        }

        public static DemosGroupByCollection MailAddress(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[MailAddress]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_MailAddress(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[MailAddress]", tableName: tableName);
        }

        public static DemosGroupByCollection Initialized(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Initialized]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_Initialized(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Initialized]", tableName: tableName);
        }

        public static DemosGroupByCollection Comments(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_Comments(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static DemosGroupByCollection Creator(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_Creator(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static DemosGroupByCollection Updator(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_Updator(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static DemosGroupByCollection CreatedTime(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static DemosGroupByCollection UpdatedTime(
            this DemosGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Demos_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Demos")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static DemosHavingCollection DemosCount(
            this DemosHavingCollection self,
            object value = null,
            string tableName = "Demos",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static DemosHavingCollection CreatedTime(
            this DemosHavingCollection self,
            string tableName = "Demos",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static DemosHavingCollection UpdatedTime(
            this DemosHavingCollection self,
            string tableName = "Demos",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static DemosOrderByCollection DemoId(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DemoId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection Ver(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection TenantId(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection Title(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection LoginId(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection Passphrase(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Passphrase]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection MailAddress(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection Initialized(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Initialized]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection Comments(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection Creator(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection Updator(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection CreatedTime(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection UpdatedTime(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_DemoId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DemoId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_LoginId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_Passphrase(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Passphrase]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_MailAddress(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_Initialized(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Initialized]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Demos_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Demos",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DemosOrderByCollection DemosCount(
            this DemosOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static DemosParamCollection DemoId(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DemoId]",
                    name: "DemoId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_DemoId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DemoId]",
                    name: "DemoId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection Ver(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection TenantId(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection Title(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection LoginId(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_LoginId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection Passphrase(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Passphrase]",
                    name: "Passphrase",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_Passphrase(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Passphrase]",
                    name: "Passphrase",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection MailAddress(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddress]",
                    name: "MailAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_MailAddress(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddress]",
                    name: "MailAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection Initialized(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Initialized]",
                    name: "Initialized",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_Initialized(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Initialized]",
                    name: "Initialized",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection Comments(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection Creator(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection Updator(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection CreatedTime(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DemosParamCollection UpdatedTime(
            this DemosParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Demos_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsColumnCollection SessionsColumn()
        {
            return new SessionsColumnCollection();
        }

        public class SessionsColumnCollection : SqlColumnCollection
        {
            public new SessionsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Sessions",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static SessionsJoinCollection SessionsJoin()
        {
            return new SessionsJoinCollection();
        }

        public class SessionsJoinCollection : SqlJoinCollection
        {
            public SessionsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static SessionsWhereCollection SessionsWhere()
        {
            return new SessionsWhereCollection();
        }

        public class SessionsWhereCollection : SqlWhereCollection
        {
            public new SessionsWhereCollection Add(
                string tableName = "Sessions",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static SessionsGroupByCollection SessionsGroupBy()
        {
            return new SessionsGroupByCollection();
        }

        public class SessionsGroupByCollection : SqlGroupByCollection
        {
            public new SessionsGroupByCollection Add(
                string columnBracket, string tableName = "Sessions")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static SessionsHavingCollection SessionsHaving()
        {
            return new SessionsHavingCollection();
        }

        public class SessionsHavingCollection : SqlHavingCollection
        {
            public SessionsHavingCollection Add(
                string columnBracket,
                string tableName = "Sessions",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static SessionsOrderByCollection SessionsOrderBy()
        {
            return new SessionsOrderByCollection();
        }

        public class SessionsOrderByCollection : SqlOrderByCollection
        {
            public new SessionsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Sessions",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static SessionsParamCollection SessionsParam()
        {
            return new SessionsParamCollection();
        }

        public class SessionsParamCollection : SqlParamCollection
        {
            public new SessionsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static SessionsColumnCollection SessionsColumn(
            this SessionsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "SessionGuid":
                    return self.SessionGuid(_as: _as, function: function);
                case "Key":
                    return self.Key(_as: _as, function: function);
                case "Page":
                    return self.Page(_as: _as, function: function);
                case "Value":
                    return self.Value(_as: _as, function: function);
                case "ReadOnce":
                    return self.ReadOnce(_as: _as, function: function);
                case "UserArea":
                    return self.UserArea(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static SessionsColumnCollection SessionGuid(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "SessionGuid",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionGuid]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_SessionGuid(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "SessionGuid",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionGuid]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection Key(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Key",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Key]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_Key(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Key",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Key]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection Page(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Page",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Page]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_Page(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Page",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Page]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection Value(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Value",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Value]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_Value(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Value",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Value]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection ReadOnce(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "ReadOnce",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReadOnce]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_ReadOnce(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "ReadOnce",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReadOnce]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection UserArea(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "UserArea",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserArea]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_UserArea(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "UserArea",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserArea]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection Ver(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_Ver(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection Comments(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_Comments(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection Creator(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_Creator(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection Updator(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_Updator(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection CreatedTime(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection UpdatedTime(
            this SessionsColumnCollection self,
            string tableName = "Sessions",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sessions_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Sessions",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SessionsColumnCollection SessionsCount(
            this SessionsColumnCollection self,
            string _as = "SessionsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static SessionsWhereCollection SessionGuid(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionGuid]" },
                    tableName: tableName,
                    name: "SessionGuid",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_SessionGuid(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionGuid]" },
                    tableName: tableName,
                    name: "SessionGuid",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Key(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Key]" },
                    tableName: tableName,
                    name: "Key",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_Key(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Key]" },
                    tableName: tableName,
                    name: "Key",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Page(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Page]" },
                    tableName: tableName,
                    name: "Page",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_Page(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Page]" },
                    tableName: tableName,
                    name: "Page",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Value(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Value]" },
                    tableName: tableName,
                    name: "Value",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_Value(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Value]" },
                    tableName: tableName,
                    name: "Value",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection ReadOnce(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReadOnce]" },
                    tableName: tableName,
                    name: "ReadOnce",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_ReadOnce(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReadOnce]" },
                    tableName: tableName,
                    name: "ReadOnce",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection UserArea(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserArea]" },
                    tableName: tableName,
                    name: "UserArea",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_UserArea(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserArea]" },
                    tableName: tableName,
                    name: "UserArea",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Ver(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Comments(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Creator(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Updator(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection CreatedTime(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection UpdatedTime(
            this SessionsWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sessions_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SessionsWhereCollection Ver_In(
            this SessionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sessions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SessionsWhereCollection Creator_In(
            this SessionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sessions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SessionsWhereCollection Updator_In(
            this SessionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sessions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SessionsWhereCollection Ver_Between(
            this SessionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sessions_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SessionsWhereCollection Creator_Between(
            this SessionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sessions_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SessionsWhereCollection Updator_Between(
            this SessionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sessions_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SessionsWhereCollection CreatedTime_Between(
            this SessionsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sessions_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SessionsWhereCollection UpdatedTime_Between(
            this SessionsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sessions_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sessions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SessionsWhereCollection Sub(
            this SessionsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static SessionsWhereCollection Or(
            this SessionsWhereCollection self,
            SessionsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static SessionsGroupByCollection SessionsGroupBy(
            this SessionsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "SessionGuid": return self.SessionGuid();
                    case "Key": return self.Key();
                    case "Page": return self.Page();
                    case "Value": return self.Value();
                    case "ReadOnce": return self.ReadOnce();
                    case "UserArea": return self.UserArea();
                    case "Ver": return self.Ver();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static SessionsGroupByCollection SessionGuid(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[SessionGuid]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_SessionGuid(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[SessionGuid]", tableName: tableName);
        }

        public static SessionsGroupByCollection Key(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Key]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_Key(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Key]", tableName: tableName);
        }

        public static SessionsGroupByCollection Page(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Page]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_Page(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Page]", tableName: tableName);
        }

        public static SessionsGroupByCollection Value(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Value]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_Value(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Value]", tableName: tableName);
        }

        public static SessionsGroupByCollection ReadOnce(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[ReadOnce]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_ReadOnce(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[ReadOnce]", tableName: tableName);
        }

        public static SessionsGroupByCollection UserArea(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[UserArea]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_UserArea(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[UserArea]", tableName: tableName);
        }

        public static SessionsGroupByCollection Ver(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_Ver(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SessionsGroupByCollection Comments(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_Comments(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SessionsGroupByCollection Creator(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_Creator(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SessionsGroupByCollection Updator(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_Updator(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SessionsGroupByCollection CreatedTime(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SessionsGroupByCollection UpdatedTime(
            this SessionsGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Sessions_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Sessions")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SessionsHavingCollection SessionsCount(
            this SessionsHavingCollection self,
            object value = null,
            string tableName = "Sessions",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static SessionsHavingCollection CreatedTime(
            this SessionsHavingCollection self,
            string tableName = "Sessions",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static SessionsHavingCollection UpdatedTime(
            this SessionsHavingCollection self,
            string tableName = "Sessions",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static SessionsOrderByCollection SessionGuid(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionGuid]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection Key(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Key]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection Page(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Page]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection Value(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Value]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection ReadOnce(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReadOnce]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection UserArea(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserArea]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection Ver(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection Comments(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection Creator(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection Updator(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection CreatedTime(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection UpdatedTime(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_SessionGuid(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionGuid]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_Key(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Key]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_Page(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Page]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_Value(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Value]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_ReadOnce(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReadOnce]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_UserArea(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserArea]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sessions_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sessions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SessionsOrderByCollection SessionsCount(
            this SessionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static SessionsParamCollection SessionGuid(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionGuid]",
                    name: "SessionGuid",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_SessionGuid(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionGuid]",
                    name: "SessionGuid",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection Key(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Key]",
                    name: "Key",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_Key(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Key]",
                    name: "Key",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection Page(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Page]",
                    name: "Page",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_Page(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Page]",
                    name: "Page",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection Value(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Value]",
                    name: "Value",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_Value(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Value]",
                    name: "Value",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection ReadOnce(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReadOnce]",
                    name: "ReadOnce",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_ReadOnce(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReadOnce]",
                    name: "ReadOnce",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection UserArea(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserArea]",
                    name: "UserArea",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_UserArea(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserArea]",
                    name: "UserArea",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection Ver(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection Comments(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection Creator(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection Updator(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection CreatedTime(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SessionsParamCollection UpdatedTime(
            this SessionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sessions_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsColumnCollection SysLogsColumn()
        {
            return new SysLogsColumnCollection();
        }

        public class SysLogsColumnCollection : SqlColumnCollection
        {
            public new SysLogsColumnCollection Add(
                string columnBracket = null,
                string tableName = "SysLogs",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static SysLogsJoinCollection SysLogsJoin()
        {
            return new SysLogsJoinCollection();
        }

        public class SysLogsJoinCollection : SqlJoinCollection
        {
            public SysLogsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static SysLogsWhereCollection SysLogsWhere()
        {
            return new SysLogsWhereCollection();
        }

        public class SysLogsWhereCollection : SqlWhereCollection
        {
            public new SysLogsWhereCollection Add(
                string tableName = "SysLogs",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static SysLogsGroupByCollection SysLogsGroupBy()
        {
            return new SysLogsGroupByCollection();
        }

        public class SysLogsGroupByCollection : SqlGroupByCollection
        {
            public new SysLogsGroupByCollection Add(
                string columnBracket, string tableName = "SysLogs")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static SysLogsHavingCollection SysLogsHaving()
        {
            return new SysLogsHavingCollection();
        }

        public class SysLogsHavingCollection : SqlHavingCollection
        {
            public SysLogsHavingCollection Add(
                string columnBracket,
                string tableName = "SysLogs",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static SysLogsOrderByCollection SysLogsOrderBy()
        {
            return new SysLogsOrderByCollection();
        }

        public class SysLogsOrderByCollection : SqlOrderByCollection
        {
            public new SysLogsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "SysLogs",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static SysLogsParamCollection SysLogsParam()
        {
            return new SysLogsParamCollection();
        }

        public class SysLogsParamCollection : SqlParamCollection
        {
            public new SysLogsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static SysLogsColumnCollection SysLogsColumn(
            this SysLogsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "SysLogId":
                    return self.SysLogId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "SysLogType":
                    return self.SysLogType(_as: _as, function: function);
                case "OnAzure":
                    return self.OnAzure(_as: _as, function: function);
                case "MachineName":
                    return self.MachineName(_as: _as, function: function);
                case "ServiceName":
                    return self.ServiceName(_as: _as, function: function);
                case "TenantName":
                    return self.TenantName(_as: _as, function: function);
                case "Application":
                    return self.Application(_as: _as, function: function);
                case "Class":
                    return self.Class(_as: _as, function: function);
                case "Method":
                    return self.Method(_as: _as, function: function);
                case "RequestData":
                    return self.RequestData(_as: _as, function: function);
                case "HttpMethod":
                    return self.HttpMethod(_as: _as, function: function);
                case "RequestSize":
                    return self.RequestSize(_as: _as, function: function);
                case "ResponseSize":
                    return self.ResponseSize(_as: _as, function: function);
                case "Elapsed":
                    return self.Elapsed(_as: _as, function: function);
                case "ApplicationAge":
                    return self.ApplicationAge(_as: _as, function: function);
                case "ApplicationRequestInterval":
                    return self.ApplicationRequestInterval(_as: _as, function: function);
                case "SessionAge":
                    return self.SessionAge(_as: _as, function: function);
                case "SessionRequestInterval":
                    return self.SessionRequestInterval(_as: _as, function: function);
                case "WorkingSet64":
                    return self.WorkingSet64(_as: _as, function: function);
                case "VirtualMemorySize64":
                    return self.VirtualMemorySize64(_as: _as, function: function);
                case "ProcessId":
                    return self.ProcessId(_as: _as, function: function);
                case "ProcessName":
                    return self.ProcessName(_as: _as, function: function);
                case "BasePriority":
                    return self.BasePriority(_as: _as, function: function);
                case "Url":
                    return self.Url(_as: _as, function: function);
                case "UrlReferer":
                    return self.UrlReferer(_as: _as, function: function);
                case "UserHostName":
                    return self.UserHostName(_as: _as, function: function);
                case "UserHostAddress":
                    return self.UserHostAddress(_as: _as, function: function);
                case "UserLanguage":
                    return self.UserLanguage(_as: _as, function: function);
                case "UserAgent":
                    return self.UserAgent(_as: _as, function: function);
                case "SessionGuid":
                    return self.SessionGuid(_as: _as, function: function);
                case "ErrMessage":
                    return self.ErrMessage(_as: _as, function: function);
                case "ErrStackTrace":
                    return self.ErrStackTrace(_as: _as, function: function);
                case "InDebug":
                    return self.InDebug(_as: _as, function: function);
                case "AssemblyVersion":
                    return self.AssemblyVersion(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static SysLogsColumnCollection CreatedTime(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection SysLogId(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SysLogId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SysLogId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_SysLogId(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SysLogId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SysLogId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Ver(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Ver(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection SysLogType(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SysLogType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SysLogType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_SysLogType(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SysLogType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SysLogType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection OnAzure(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "OnAzure",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OnAzure]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_OnAzure(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "OnAzure",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OnAzure]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection MachineName(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "MachineName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MachineName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_MachineName(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "MachineName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MachineName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ServiceName(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ServiceName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ServiceName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ServiceName(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ServiceName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ServiceName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection TenantName(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "TenantName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_TenantName(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "TenantName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Application(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Application",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Application]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Application(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Application",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Application]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Class(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Class",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Class]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Class(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Class",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Class]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Method(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Method",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Method]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Method(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Method",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Method]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection RequestData(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "RequestData",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[RequestData]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_RequestData(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "RequestData",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[RequestData]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection HttpMethod(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "HttpMethod",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HttpMethod]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_HttpMethod(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "HttpMethod",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[HttpMethod]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection RequestSize(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "RequestSize",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[RequestSize]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_RequestSize(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "RequestSize",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[RequestSize]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ResponseSize(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ResponseSize",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ResponseSize]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ResponseSize(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ResponseSize",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ResponseSize]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Elapsed(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Elapsed",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Elapsed]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Elapsed(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Elapsed",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Elapsed]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ApplicationAge(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ApplicationAge",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ApplicationAge]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ApplicationAge(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ApplicationAge",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ApplicationAge]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ApplicationRequestInterval(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ApplicationRequestInterval",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ApplicationRequestInterval]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ApplicationRequestInterval(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ApplicationRequestInterval",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ApplicationRequestInterval]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection SessionAge(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SessionAge",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionAge]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_SessionAge(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SessionAge",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionAge]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection SessionRequestInterval(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SessionRequestInterval",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionRequestInterval]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_SessionRequestInterval(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SessionRequestInterval",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionRequestInterval]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection WorkingSet64(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "WorkingSet64",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[WorkingSet64]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_WorkingSet64(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "WorkingSet64",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[WorkingSet64]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection VirtualMemorySize64(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "VirtualMemorySize64",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[VirtualMemorySize64]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_VirtualMemorySize64(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "VirtualMemorySize64",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[VirtualMemorySize64]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ProcessId(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ProcessId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ProcessId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ProcessId(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ProcessId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ProcessId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ProcessName(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ProcessName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ProcessName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ProcessName(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ProcessName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ProcessName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection BasePriority(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "BasePriority",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BasePriority]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_BasePriority(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "BasePriority",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BasePriority]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Url(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Url",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Url]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Url(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Url",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Url]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection UrlReferer(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UrlReferer",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UrlReferer]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_UrlReferer(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UrlReferer",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UrlReferer]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection UserHostName(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserHostName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserHostName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_UserHostName(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserHostName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserHostName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection UserHostAddress(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserHostAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserHostAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_UserHostAddress(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserHostAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserHostAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection UserLanguage(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserLanguage",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserLanguage]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_UserLanguage(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserLanguage",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserLanguage]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection UserAgent(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserAgent",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserAgent]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_UserAgent(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UserAgent",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserAgent]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection SessionGuid(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SessionGuid",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionGuid]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_SessionGuid(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "SessionGuid",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SessionGuid]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ErrMessage(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ErrMessage",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ErrMessage]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ErrMessage(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ErrMessage",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ErrMessage]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection ErrStackTrace(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ErrStackTrace",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ErrStackTrace]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_ErrStackTrace(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "ErrStackTrace",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ErrStackTrace]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection InDebug(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "InDebug",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InDebug]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_InDebug(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "InDebug",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InDebug]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection AssemblyVersion(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "AssemblyVersion",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[AssemblyVersion]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_AssemblyVersion(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "AssemblyVersion",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[AssemblyVersion]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Comments(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Comments(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Creator(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Creator(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection Updator(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_Updator(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection UpdatedTime(
            this SysLogsColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SysLogs_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "SysLogs",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SysLogsColumnCollection SysLogsCount(
            this SysLogsColumnCollection self,
            string _as = "SysLogsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static SysLogsWhereCollection CreatedTime(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection SysLogId(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogId]" },
                    tableName: tableName,
                    name: "SysLogId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_SysLogId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogId]" },
                    tableName: tableName,
                    name: "SysLogId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Ver(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection SysLogType(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogType]" },
                    tableName: tableName,
                    name: "SysLogType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_SysLogType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogType]" },
                    tableName: tableName,
                    name: "SysLogType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection OnAzure(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OnAzure]" },
                    tableName: tableName,
                    name: "OnAzure",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_OnAzure(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OnAzure]" },
                    tableName: tableName,
                    name: "OnAzure",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection MachineName(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MachineName]" },
                    tableName: tableName,
                    name: "MachineName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_MachineName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MachineName]" },
                    tableName: tableName,
                    name: "MachineName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ServiceName(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ServiceName]" },
                    tableName: tableName,
                    name: "ServiceName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ServiceName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ServiceName]" },
                    tableName: tableName,
                    name: "ServiceName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection TenantName(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantName]" },
                    tableName: tableName,
                    name: "TenantName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_TenantName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantName]" },
                    tableName: tableName,
                    name: "TenantName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Application(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Application]" },
                    tableName: tableName,
                    name: "Application",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Application(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Application]" },
                    tableName: tableName,
                    name: "Application",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Class(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Class]" },
                    tableName: tableName,
                    name: "Class",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Class(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Class]" },
                    tableName: tableName,
                    name: "Class",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Method(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Method]" },
                    tableName: tableName,
                    name: "Method",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Method(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Method]" },
                    tableName: tableName,
                    name: "Method",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection RequestData(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RequestData]" },
                    tableName: tableName,
                    name: "RequestData",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_RequestData(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RequestData]" },
                    tableName: tableName,
                    name: "RequestData",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection HttpMethod(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HttpMethod]" },
                    tableName: tableName,
                    name: "HttpMethod",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_HttpMethod(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[HttpMethod]" },
                    tableName: tableName,
                    name: "HttpMethod",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection RequestSize(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RequestSize]" },
                    tableName: tableName,
                    name: "RequestSize",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_RequestSize(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RequestSize]" },
                    tableName: tableName,
                    name: "RequestSize",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ResponseSize(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResponseSize]" },
                    tableName: tableName,
                    name: "ResponseSize",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ResponseSize(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResponseSize]" },
                    tableName: tableName,
                    name: "ResponseSize",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Elapsed(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Elapsed]" },
                    tableName: tableName,
                    name: "Elapsed",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Elapsed(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Elapsed]" },
                    tableName: tableName,
                    name: "Elapsed",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ApplicationAge(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ApplicationAge]" },
                    tableName: tableName,
                    name: "ApplicationAge",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ApplicationAge(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ApplicationAge]" },
                    tableName: tableName,
                    name: "ApplicationAge",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ApplicationRequestInterval(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ApplicationRequestInterval]" },
                    tableName: tableName,
                    name: "ApplicationRequestInterval",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ApplicationRequestInterval(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ApplicationRequestInterval]" },
                    tableName: tableName,
                    name: "ApplicationRequestInterval",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection SessionAge(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionAge]" },
                    tableName: tableName,
                    name: "SessionAge",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_SessionAge(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionAge]" },
                    tableName: tableName,
                    name: "SessionAge",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection SessionRequestInterval(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionRequestInterval]" },
                    tableName: tableName,
                    name: "SessionRequestInterval",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_SessionRequestInterval(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionRequestInterval]" },
                    tableName: tableName,
                    name: "SessionRequestInterval",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection WorkingSet64(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkingSet64]" },
                    tableName: tableName,
                    name: "WorkingSet64",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_WorkingSet64(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkingSet64]" },
                    tableName: tableName,
                    name: "WorkingSet64",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection VirtualMemorySize64(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[VirtualMemorySize64]" },
                    tableName: tableName,
                    name: "VirtualMemorySize64",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_VirtualMemorySize64(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[VirtualMemorySize64]" },
                    tableName: tableName,
                    name: "VirtualMemorySize64",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ProcessId(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProcessId]" },
                    tableName: tableName,
                    name: "ProcessId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ProcessId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProcessId]" },
                    tableName: tableName,
                    name: "ProcessId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ProcessName(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProcessName]" },
                    tableName: tableName,
                    name: "ProcessName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ProcessName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProcessName]" },
                    tableName: tableName,
                    name: "ProcessName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection BasePriority(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BasePriority]" },
                    tableName: tableName,
                    name: "BasePriority",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_BasePriority(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BasePriority]" },
                    tableName: tableName,
                    name: "BasePriority",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Url(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Url]" },
                    tableName: tableName,
                    name: "Url",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Url(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Url]" },
                    tableName: tableName,
                    name: "Url",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection UrlReferer(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UrlReferer]" },
                    tableName: tableName,
                    name: "UrlReferer",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_UrlReferer(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UrlReferer]" },
                    tableName: tableName,
                    name: "UrlReferer",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection UserHostName(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserHostName]" },
                    tableName: tableName,
                    name: "UserHostName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_UserHostName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserHostName]" },
                    tableName: tableName,
                    name: "UserHostName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection UserHostAddress(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserHostAddress]" },
                    tableName: tableName,
                    name: "UserHostAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_UserHostAddress(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserHostAddress]" },
                    tableName: tableName,
                    name: "UserHostAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection UserLanguage(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserLanguage]" },
                    tableName: tableName,
                    name: "UserLanguage",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_UserLanguage(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserLanguage]" },
                    tableName: tableName,
                    name: "UserLanguage",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection UserAgent(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserAgent]" },
                    tableName: tableName,
                    name: "UserAgent",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_UserAgent(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserAgent]" },
                    tableName: tableName,
                    name: "UserAgent",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection SessionGuid(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionGuid]" },
                    tableName: tableName,
                    name: "SessionGuid",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_SessionGuid(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SessionGuid]" },
                    tableName: tableName,
                    name: "SessionGuid",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ErrMessage(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ErrMessage]" },
                    tableName: tableName,
                    name: "ErrMessage",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ErrMessage(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ErrMessage]" },
                    tableName: tableName,
                    name: "ErrMessage",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection ErrStackTrace(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ErrStackTrace]" },
                    tableName: tableName,
                    name: "ErrStackTrace",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_ErrStackTrace(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ErrStackTrace]" },
                    tableName: tableName,
                    name: "ErrStackTrace",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection InDebug(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InDebug]" },
                    tableName: tableName,
                    name: "InDebug",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_InDebug(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InDebug]" },
                    tableName: tableName,
                    name: "InDebug",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection AssemblyVersion(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[AssemblyVersion]" },
                    tableName: tableName,
                    name: "AssemblyVersion",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_AssemblyVersion(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[AssemblyVersion]" },
                    tableName: tableName,
                    name: "AssemblyVersion",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Comments(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Creator(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection Updator(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection UpdatedTime(
            this SysLogsWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SysLogs_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SysLogsWhereCollection SysLogId_In(
            this SysLogsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SysLogId]" },
                    tableName: tableName,
                    name: "SysLogId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SysLogId]" },
                    tableName: tableName,
                    name: "SysLogId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection Ver_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection SysLogType_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SysLogType]" },
                    tableName: tableName,
                    name: "SysLogType",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SysLogType]" },
                    tableName: tableName,
                    name: "SysLogType",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection RequestSize_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[RequestSize]" },
                    tableName: tableName,
                    name: "RequestSize",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[RequestSize]" },
                    tableName: tableName,
                    name: "RequestSize",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection ResponseSize_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ResponseSize]" },
                    tableName: tableName,
                    name: "ResponseSize",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ResponseSize]" },
                    tableName: tableName,
                    name: "ResponseSize",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection WorkingSet64_In(
            this SysLogsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[WorkingSet64]" },
                    tableName: tableName,
                    name: "WorkingSet64",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[WorkingSet64]" },
                    tableName: tableName,
                    name: "WorkingSet64",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection VirtualMemorySize64_In(
            this SysLogsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[VirtualMemorySize64]" },
                    tableName: tableName,
                    name: "VirtualMemorySize64",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[VirtualMemorySize64]" },
                    tableName: tableName,
                    name: "VirtualMemorySize64",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection ProcessId_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ProcessId]" },
                    tableName: tableName,
                    name: "ProcessId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ProcessId]" },
                    tableName: tableName,
                    name: "ProcessId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection BasePriority_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[BasePriority]" },
                    tableName: tableName,
                    name: "BasePriority",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[BasePriority]" },
                    tableName: tableName,
                    name: "BasePriority",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection Creator_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection Updator_In(
            this SysLogsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SysLogs",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SysLogsWhereCollection SysLogId_Between(
            this SysLogsWhereCollection self,
            long begin,
            long end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogId]" },
                    tableName: tableName,
                    name: "SysLogId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_SysLogId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogId]" },
                    tableName: tableName,
                    name: "SysLogId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection Ver_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection SysLogType_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogType]" },
                    tableName: tableName,
                    name: "SysLogType",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_SysLogType_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SysLogType]" },
                    tableName: tableName,
                    name: "SysLogType",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection RequestSize_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RequestSize]" },
                    tableName: tableName,
                    name: "RequestSize",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_RequestSize_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RequestSize]" },
                    tableName: tableName,
                    name: "RequestSize",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection ResponseSize_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResponseSize]" },
                    tableName: tableName,
                    name: "ResponseSize",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_ResponseSize_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResponseSize]" },
                    tableName: tableName,
                    name: "ResponseSize",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection WorkingSet64_Between(
            this SysLogsWhereCollection self,
            long begin,
            long end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkingSet64]" },
                    tableName: tableName,
                    name: "WorkingSet64",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_WorkingSet64_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkingSet64]" },
                    tableName: tableName,
                    name: "WorkingSet64",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection VirtualMemorySize64_Between(
            this SysLogsWhereCollection self,
            long begin,
            long end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[VirtualMemorySize64]" },
                    tableName: tableName,
                    name: "VirtualMemorySize64",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_VirtualMemorySize64_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[VirtualMemorySize64]" },
                    tableName: tableName,
                    name: "VirtualMemorySize64",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection ProcessId_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProcessId]" },
                    tableName: tableName,
                    name: "ProcessId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_ProcessId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProcessId]" },
                    tableName: tableName,
                    name: "ProcessId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection BasePriority_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BasePriority]" },
                    tableName: tableName,
                    name: "BasePriority",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_BasePriority_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BasePriority]" },
                    tableName: tableName,
                    name: "BasePriority",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection Creator_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection Updator_Between(
            this SysLogsWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection CreatedTime_Between(
            this SysLogsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection UpdatedTime_Between(
            this SysLogsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SysLogs_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SysLogs",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SysLogsWhereCollection Sub(
            this SysLogsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static SysLogsWhereCollection Or(
            this SysLogsWhereCollection self,
            SysLogsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static SysLogsGroupByCollection SysLogsGroupBy(
            this SysLogsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "CreatedTime": return self.CreatedTime();
                    case "SysLogId": return self.SysLogId();
                    case "Ver": return self.Ver();
                    case "SysLogType": return self.SysLogType();
                    case "OnAzure": return self.OnAzure();
                    case "MachineName": return self.MachineName();
                    case "ServiceName": return self.ServiceName();
                    case "TenantName": return self.TenantName();
                    case "Application": return self.Application();
                    case "Class": return self.Class();
                    case "Method": return self.Method();
                    case "RequestData": return self.RequestData();
                    case "HttpMethod": return self.HttpMethod();
                    case "RequestSize": return self.RequestSize();
                    case "ResponseSize": return self.ResponseSize();
                    case "Elapsed": return self.Elapsed();
                    case "ApplicationAge": return self.ApplicationAge();
                    case "ApplicationRequestInterval": return self.ApplicationRequestInterval();
                    case "SessionAge": return self.SessionAge();
                    case "SessionRequestInterval": return self.SessionRequestInterval();
                    case "WorkingSet64": return self.WorkingSet64();
                    case "VirtualMemorySize64": return self.VirtualMemorySize64();
                    case "ProcessId": return self.ProcessId();
                    case "ProcessName": return self.ProcessName();
                    case "BasePriority": return self.BasePriority();
                    case "Url": return self.Url();
                    case "UrlReferer": return self.UrlReferer();
                    case "UserHostName": return self.UserHostName();
                    case "UserHostAddress": return self.UserHostAddress();
                    case "UserLanguage": return self.UserLanguage();
                    case "UserAgent": return self.UserAgent();
                    case "SessionGuid": return self.SessionGuid();
                    case "ErrMessage": return self.ErrMessage();
                    case "ErrStackTrace": return self.ErrStackTrace();
                    case "InDebug": return self.InDebug();
                    case "AssemblyVersion": return self.AssemblyVersion();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static SysLogsGroupByCollection CreatedTime(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_CreatedTime(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SysLogsGroupByCollection SysLogId(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SysLogId]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_SysLogId(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SysLogId]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Ver(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Ver(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SysLogsGroupByCollection SysLogType(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SysLogType]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_SysLogType(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SysLogType]", tableName: tableName);
        }

        public static SysLogsGroupByCollection OnAzure(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[OnAzure]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_OnAzure(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[OnAzure]", tableName: tableName);
        }

        public static SysLogsGroupByCollection MachineName(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[MachineName]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_MachineName(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[MachineName]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ServiceName(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ServiceName]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ServiceName(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ServiceName]", tableName: tableName);
        }

        public static SysLogsGroupByCollection TenantName(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[TenantName]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_TenantName(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[TenantName]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Application(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Application]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Application(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Application]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Class(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Class]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Class(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Class]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Method(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Method]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Method(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Method]", tableName: tableName);
        }

        public static SysLogsGroupByCollection RequestData(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[RequestData]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_RequestData(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[RequestData]", tableName: tableName);
        }

        public static SysLogsGroupByCollection HttpMethod(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[HttpMethod]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_HttpMethod(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[HttpMethod]", tableName: tableName);
        }

        public static SysLogsGroupByCollection RequestSize(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[RequestSize]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_RequestSize(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[RequestSize]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ResponseSize(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ResponseSize]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ResponseSize(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ResponseSize]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Elapsed(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Elapsed]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Elapsed(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Elapsed]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ApplicationAge(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ApplicationAge]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ApplicationAge(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ApplicationAge]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ApplicationRequestInterval(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ApplicationRequestInterval]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ApplicationRequestInterval(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ApplicationRequestInterval]", tableName: tableName);
        }

        public static SysLogsGroupByCollection SessionAge(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SessionAge]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_SessionAge(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SessionAge]", tableName: tableName);
        }

        public static SysLogsGroupByCollection SessionRequestInterval(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SessionRequestInterval]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_SessionRequestInterval(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SessionRequestInterval]", tableName: tableName);
        }

        public static SysLogsGroupByCollection WorkingSet64(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[WorkingSet64]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_WorkingSet64(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[WorkingSet64]", tableName: tableName);
        }

        public static SysLogsGroupByCollection VirtualMemorySize64(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[VirtualMemorySize64]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_VirtualMemorySize64(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[VirtualMemorySize64]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ProcessId(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ProcessId]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ProcessId(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ProcessId]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ProcessName(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ProcessName]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ProcessName(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ProcessName]", tableName: tableName);
        }

        public static SysLogsGroupByCollection BasePriority(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[BasePriority]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_BasePriority(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[BasePriority]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Url(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Url]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Url(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Url]", tableName: tableName);
        }

        public static SysLogsGroupByCollection UrlReferer(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UrlReferer]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_UrlReferer(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UrlReferer]", tableName: tableName);
        }

        public static SysLogsGroupByCollection UserHostName(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserHostName]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_UserHostName(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserHostName]", tableName: tableName);
        }

        public static SysLogsGroupByCollection UserHostAddress(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserHostAddress]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_UserHostAddress(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserHostAddress]", tableName: tableName);
        }

        public static SysLogsGroupByCollection UserLanguage(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserLanguage]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_UserLanguage(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserLanguage]", tableName: tableName);
        }

        public static SysLogsGroupByCollection UserAgent(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserAgent]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_UserAgent(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UserAgent]", tableName: tableName);
        }

        public static SysLogsGroupByCollection SessionGuid(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SessionGuid]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_SessionGuid(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[SessionGuid]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ErrMessage(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ErrMessage]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ErrMessage(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ErrMessage]", tableName: tableName);
        }

        public static SysLogsGroupByCollection ErrStackTrace(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ErrStackTrace]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_ErrStackTrace(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[ErrStackTrace]", tableName: tableName);
        }

        public static SysLogsGroupByCollection InDebug(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[InDebug]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_InDebug(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[InDebug]", tableName: tableName);
        }

        public static SysLogsGroupByCollection AssemblyVersion(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[AssemblyVersion]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_AssemblyVersion(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[AssemblyVersion]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Comments(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Comments(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Creator(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Creator(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SysLogsGroupByCollection Updator(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_Updator(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SysLogsGroupByCollection UpdatedTime(
            this SysLogsGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection SysLogs_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "SysLogs")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SysLogsHavingCollection SysLogsCount(
            this SysLogsHavingCollection self,
            object value = null,
            string tableName = "SysLogs",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static SysLogsHavingCollection UpdatedTime(
            this SysLogsHavingCollection self,
            string tableName = "SysLogs",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static SysLogsOrderByCollection CreatedTime(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection SysLogId(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SysLogId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Ver(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection SysLogType(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SysLogType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection OnAzure(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OnAzure]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection MachineName(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MachineName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ServiceName(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ServiceName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection TenantName(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Application(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Application]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Class(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Class]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Method(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Method]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection RequestData(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[RequestData]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection HttpMethod(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HttpMethod]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection RequestSize(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[RequestSize]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ResponseSize(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ResponseSize]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Elapsed(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Elapsed]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ApplicationAge(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ApplicationAge]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ApplicationRequestInterval(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ApplicationRequestInterval]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection SessionAge(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionAge]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection SessionRequestInterval(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionRequestInterval]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection WorkingSet64(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[WorkingSet64]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection VirtualMemorySize64(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[VirtualMemorySize64]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ProcessId(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ProcessId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ProcessName(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ProcessName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection BasePriority(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BasePriority]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Url(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Url]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection UrlReferer(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UrlReferer]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection UserHostName(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserHostName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection UserHostAddress(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserHostAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection UserLanguage(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserLanguage]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection UserAgent(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserAgent]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection SessionGuid(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionGuid]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ErrMessage(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ErrMessage]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection ErrStackTrace(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ErrStackTrace]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection InDebug(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InDebug]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection AssemblyVersion(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[AssemblyVersion]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Comments(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Creator(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection Updator(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection UpdatedTime(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_SysLogId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SysLogId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_SysLogType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SysLogType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_OnAzure(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OnAzure]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_MachineName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MachineName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ServiceName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ServiceName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_TenantName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Application(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Application]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Class(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Class]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Method(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Method]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_RequestData(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[RequestData]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_HttpMethod(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[HttpMethod]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_RequestSize(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[RequestSize]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ResponseSize(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ResponseSize]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Elapsed(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Elapsed]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ApplicationAge(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ApplicationAge]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ApplicationRequestInterval(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ApplicationRequestInterval]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_SessionAge(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionAge]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_SessionRequestInterval(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionRequestInterval]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_WorkingSet64(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[WorkingSet64]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_VirtualMemorySize64(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[VirtualMemorySize64]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ProcessId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ProcessId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ProcessName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ProcessName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_BasePriority(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BasePriority]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Url(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Url]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_UrlReferer(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UrlReferer]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_UserHostName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserHostName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_UserHostAddress(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserHostAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_UserLanguage(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserLanguage]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_UserAgent(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserAgent]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_SessionGuid(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SessionGuid]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ErrMessage(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ErrMessage]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_ErrStackTrace(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ErrStackTrace]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_InDebug(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InDebug]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_AssemblyVersion(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[AssemblyVersion]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SysLogs_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SysLogs",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SysLogsOrderByCollection SysLogsCount(
            this SysLogsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static SysLogsParamCollection CreatedTime(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection SysLogId(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SysLogId]",
                    name: "SysLogId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_SysLogId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SysLogId]",
                    name: "SysLogId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Ver(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection SysLogType(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SysLogType]",
                    name: "SysLogType",
                    value: value.ToInt(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_SysLogType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SysLogType]",
                    name: "SysLogType",
                    value: value.ToInt(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection OnAzure(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OnAzure]",
                    name: "OnAzure",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_OnAzure(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OnAzure]",
                    name: "OnAzure",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection MachineName(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MachineName]",
                    name: "MachineName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_MachineName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MachineName]",
                    name: "MachineName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ServiceName(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ServiceName]",
                    name: "ServiceName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ServiceName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ServiceName]",
                    name: "ServiceName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection TenantName(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantName]",
                    name: "TenantName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_TenantName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantName]",
                    name: "TenantName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Application(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Application]",
                    name: "Application",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Application(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Application]",
                    name: "Application",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Class(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Class]",
                    name: "Class",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Class(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Class]",
                    name: "Class",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Method(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Method]",
                    name: "Method",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Method(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Method]",
                    name: "Method",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection RequestData(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[RequestData]",
                    name: "RequestData",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_RequestData(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[RequestData]",
                    name: "RequestData",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection HttpMethod(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HttpMethod]",
                    name: "HttpMethod",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_HttpMethod(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[HttpMethod]",
                    name: "HttpMethod",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection RequestSize(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[RequestSize]",
                    name: "RequestSize",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_RequestSize(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[RequestSize]",
                    name: "RequestSize",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ResponseSize(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ResponseSize]",
                    name: "ResponseSize",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ResponseSize(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ResponseSize]",
                    name: "ResponseSize",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Elapsed(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Elapsed]",
                    name: "Elapsed",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Elapsed(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Elapsed]",
                    name: "Elapsed",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ApplicationAge(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ApplicationAge]",
                    name: "ApplicationAge",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ApplicationAge(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ApplicationAge]",
                    name: "ApplicationAge",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ApplicationRequestInterval(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ApplicationRequestInterval]",
                    name: "ApplicationRequestInterval",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ApplicationRequestInterval(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ApplicationRequestInterval]",
                    name: "ApplicationRequestInterval",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection SessionAge(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionAge]",
                    name: "SessionAge",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_SessionAge(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionAge]",
                    name: "SessionAge",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection SessionRequestInterval(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionRequestInterval]",
                    name: "SessionRequestInterval",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_SessionRequestInterval(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionRequestInterval]",
                    name: "SessionRequestInterval",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection WorkingSet64(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[WorkingSet64]",
                    name: "WorkingSet64",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_WorkingSet64(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[WorkingSet64]",
                    name: "WorkingSet64",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection VirtualMemorySize64(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[VirtualMemorySize64]",
                    name: "VirtualMemorySize64",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_VirtualMemorySize64(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[VirtualMemorySize64]",
                    name: "VirtualMemorySize64",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ProcessId(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ProcessId]",
                    name: "ProcessId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ProcessId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ProcessId]",
                    name: "ProcessId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ProcessName(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ProcessName]",
                    name: "ProcessName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ProcessName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ProcessName]",
                    name: "ProcessName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection BasePriority(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BasePriority]",
                    name: "BasePriority",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_BasePriority(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BasePriority]",
                    name: "BasePriority",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Url(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Url]",
                    name: "Url",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Url(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Url]",
                    name: "Url",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection UrlReferer(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UrlReferer]",
                    name: "UrlReferer",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_UrlReferer(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UrlReferer]",
                    name: "UrlReferer",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection UserHostName(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserHostName]",
                    name: "UserHostName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_UserHostName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserHostName]",
                    name: "UserHostName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection UserHostAddress(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserHostAddress]",
                    name: "UserHostAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_UserHostAddress(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserHostAddress]",
                    name: "UserHostAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection UserLanguage(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserLanguage]",
                    name: "UserLanguage",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_UserLanguage(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserLanguage]",
                    name: "UserLanguage",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection UserAgent(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserAgent]",
                    name: "UserAgent",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_UserAgent(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserAgent]",
                    name: "UserAgent",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection SessionGuid(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionGuid]",
                    name: "SessionGuid",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_SessionGuid(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SessionGuid]",
                    name: "SessionGuid",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ErrMessage(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ErrMessage]",
                    name: "ErrMessage",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ErrMessage(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ErrMessage]",
                    name: "ErrMessage",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection ErrStackTrace(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ErrStackTrace]",
                    name: "ErrStackTrace",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_ErrStackTrace(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ErrStackTrace]",
                    name: "ErrStackTrace",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection InDebug(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[InDebug]",
                    name: "InDebug",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_InDebug(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[InDebug]",
                    name: "InDebug",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection AssemblyVersion(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[AssemblyVersion]",
                    name: "AssemblyVersion",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_AssemblyVersion(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[AssemblyVersion]",
                    name: "AssemblyVersion",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Comments(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Creator(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection Updator(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SysLogsParamCollection UpdatedTime(
            this SysLogsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SysLogs_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesColumnCollection StatusesColumn()
        {
            return new StatusesColumnCollection();
        }

        public class StatusesColumnCollection : SqlColumnCollection
        {
            public new StatusesColumnCollection Add(
                string columnBracket = null,
                string tableName = "Statuses",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static StatusesJoinCollection StatusesJoin()
        {
            return new StatusesJoinCollection();
        }

        public class StatusesJoinCollection : SqlJoinCollection
        {
            public StatusesJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static StatusesWhereCollection StatusesWhere()
        {
            return new StatusesWhereCollection();
        }

        public class StatusesWhereCollection : SqlWhereCollection
        {
            public new StatusesWhereCollection Add(
                string tableName = "Statuses",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static StatusesGroupByCollection StatusesGroupBy()
        {
            return new StatusesGroupByCollection();
        }

        public class StatusesGroupByCollection : SqlGroupByCollection
        {
            public new StatusesGroupByCollection Add(
                string columnBracket, string tableName = "Statuses")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static StatusesHavingCollection StatusesHaving()
        {
            return new StatusesHavingCollection();
        }

        public class StatusesHavingCollection : SqlHavingCollection
        {
            public StatusesHavingCollection Add(
                string columnBracket,
                string tableName = "Statuses",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static StatusesOrderByCollection StatusesOrderBy()
        {
            return new StatusesOrderByCollection();
        }

        public class StatusesOrderByCollection : SqlOrderByCollection
        {
            public new StatusesOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Statuses",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static StatusesParamCollection StatusesParam()
        {
            return new StatusesParamCollection();
        }

        public class StatusesParamCollection : SqlParamCollection
        {
            public new StatusesParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static StatusesColumnCollection StatusesColumn(
            this StatusesColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "StatusId":
                    return self.StatusId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Value":
                    return self.Value(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static StatusesColumnCollection TenantId(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_TenantId(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection StatusId(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "StatusId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[StatusId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_StatusId(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "StatusId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[StatusId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection Ver(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_Ver(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection Value(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Value",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Value]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_Value(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Value",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Value]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection Comments(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_Comments(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection Creator(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_Creator(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection Updator(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_Updator(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection CreatedTime(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection UpdatedTime(
            this StatusesColumnCollection self,
            string tableName = "Statuses",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Statuses_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Statuses",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static StatusesColumnCollection StatusesCount(
            this StatusesColumnCollection self,
            string _as = "StatusesCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static StatusesWhereCollection TenantId(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection StatusId(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StatusId]" },
                    tableName: tableName,
                    name: "StatusId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_StatusId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StatusId]" },
                    tableName: tableName,
                    name: "StatusId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection Ver(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection Value(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Value]" },
                    tableName: tableName,
                    name: "Value",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_Value(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Value]" },
                    tableName: tableName,
                    name: "Value",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection Comments(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection Creator(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection Updator(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection CreatedTime(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection UpdatedTime(
            this StatusesWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Statuses_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static StatusesWhereCollection TenantId_In(
            this StatusesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Statuses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static StatusesWhereCollection StatusId_In(
            this StatusesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Statuses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[StatusId]" },
                    tableName: tableName,
                    name: "StatusId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[StatusId]" },
                    tableName: tableName,
                    name: "StatusId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static StatusesWhereCollection Ver_In(
            this StatusesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Statuses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static StatusesWhereCollection Creator_In(
            this StatusesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Statuses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static StatusesWhereCollection Updator_In(
            this StatusesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Statuses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static StatusesWhereCollection TenantId_Between(
            this StatusesWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Statuses_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static StatusesWhereCollection StatusId_Between(
            this StatusesWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StatusId]" },
                    tableName: tableName,
                    name: "StatusId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Statuses_StatusId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StatusId]" },
                    tableName: tableName,
                    name: "StatusId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static StatusesWhereCollection Ver_Between(
            this StatusesWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Statuses_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static StatusesWhereCollection Creator_Between(
            this StatusesWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Statuses_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static StatusesWhereCollection Updator_Between(
            this StatusesWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Statuses_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static StatusesWhereCollection CreatedTime_Between(
            this StatusesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Statuses_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static StatusesWhereCollection UpdatedTime_Between(
            this StatusesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Statuses_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Statuses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static StatusesWhereCollection Sub(
            this StatusesWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static StatusesWhereCollection Or(
            this StatusesWhereCollection self,
            StatusesWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static StatusesGroupByCollection StatusesGroupBy(
            this StatusesGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "TenantId": return self.TenantId();
                    case "StatusId": return self.StatusId();
                    case "Ver": return self.Ver();
                    case "Value": return self.Value();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static StatusesGroupByCollection TenantId(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_TenantId(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static StatusesGroupByCollection StatusId(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[StatusId]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_StatusId(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[StatusId]", tableName: tableName);
        }

        public static StatusesGroupByCollection Ver(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_Ver(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static StatusesGroupByCollection Value(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Value]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_Value(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Value]", tableName: tableName);
        }

        public static StatusesGroupByCollection Comments(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_Comments(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static StatusesGroupByCollection Creator(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_Creator(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static StatusesGroupByCollection Updator(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_Updator(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static StatusesGroupByCollection CreatedTime(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static StatusesGroupByCollection UpdatedTime(
            this StatusesGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Statuses_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Statuses")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static StatusesHavingCollection StatusesCount(
            this StatusesHavingCollection self,
            object value = null,
            string tableName = "Statuses",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static StatusesHavingCollection CreatedTime(
            this StatusesHavingCollection self,
            string tableName = "Statuses",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static StatusesHavingCollection UpdatedTime(
            this StatusesHavingCollection self,
            string tableName = "Statuses",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static StatusesOrderByCollection TenantId(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection StatusId(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[StatusId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection Ver(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection Value(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Value]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection Comments(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection Creator(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection Updator(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection CreatedTime(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection UpdatedTime(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_StatusId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[StatusId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_Value(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Value]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Statuses_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Statuses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static StatusesOrderByCollection StatusesCount(
            this StatusesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static StatusesParamCollection TenantId(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection StatusId(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[StatusId]",
                    name: "StatusId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_StatusId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[StatusId]",
                    name: "StatusId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection Ver(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection Value(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Value]",
                    name: "Value",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_Value(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Value]",
                    name: "Value",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection Comments(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection Creator(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection Updator(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection CreatedTime(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static StatusesParamCollection UpdatedTime(
            this StatusesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Statuses_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesColumnCollection ReminderSchedulesColumn()
        {
            return new ReminderSchedulesColumnCollection();
        }

        public class ReminderSchedulesColumnCollection : SqlColumnCollection
        {
            public new ReminderSchedulesColumnCollection Add(
                string columnBracket = null,
                string tableName = "ReminderSchedules",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static ReminderSchedulesJoinCollection ReminderSchedulesJoin()
        {
            return new ReminderSchedulesJoinCollection();
        }

        public class ReminderSchedulesJoinCollection : SqlJoinCollection
        {
            public ReminderSchedulesJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static ReminderSchedulesWhereCollection ReminderSchedulesWhere()
        {
            return new ReminderSchedulesWhereCollection();
        }

        public class ReminderSchedulesWhereCollection : SqlWhereCollection
        {
            public new ReminderSchedulesWhereCollection Add(
                string tableName = "ReminderSchedules",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static ReminderSchedulesGroupByCollection ReminderSchedulesGroupBy()
        {
            return new ReminderSchedulesGroupByCollection();
        }

        public class ReminderSchedulesGroupByCollection : SqlGroupByCollection
        {
            public new ReminderSchedulesGroupByCollection Add(
                string columnBracket, string tableName = "ReminderSchedules")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static ReminderSchedulesHavingCollection ReminderSchedulesHaving()
        {
            return new ReminderSchedulesHavingCollection();
        }

        public class ReminderSchedulesHavingCollection : SqlHavingCollection
        {
            public ReminderSchedulesHavingCollection Add(
                string columnBracket,
                string tableName = "ReminderSchedules",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static ReminderSchedulesOrderByCollection ReminderSchedulesOrderBy()
        {
            return new ReminderSchedulesOrderByCollection();
        }

        public class ReminderSchedulesOrderByCollection : SqlOrderByCollection
        {
            public new ReminderSchedulesOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "ReminderSchedules",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static ReminderSchedulesParamCollection ReminderSchedulesParam()
        {
            return new ReminderSchedulesParamCollection();
        }

        public class ReminderSchedulesParamCollection : SqlParamCollection
        {
            public new ReminderSchedulesParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static ReminderSchedulesColumnCollection ReminderSchedulesColumn(
            this ReminderSchedulesColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "SiteId":
                    return self.SiteId(_as: _as, function: function);
                case "Id":
                    return self.Id(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "ScheduledTime":
                    return self.ScheduledTime(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static ReminderSchedulesColumnCollection SiteId(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_SiteId(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection Id(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Id",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Id]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_Id(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Id",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Id]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection Ver(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_Ver(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection ScheduledTime(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "ScheduledTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ScheduledTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_ScheduledTime(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "ScheduledTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ScheduledTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection Comments(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_Comments(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection Creator(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_Creator(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection Updator(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_Updator(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection CreatedTime(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection UpdatedTime(
            this ReminderSchedulesColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ReminderSchedules_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "ReminderSchedules",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ReminderSchedulesColumnCollection ReminderSchedulesCount(
            this ReminderSchedulesColumnCollection self,
            string _as = "ReminderSchedulesCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static ReminderSchedulesWhereCollection SiteId(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_SiteId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection Id(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Id]" },
                    tableName: tableName,
                    name: "Id",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Id(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Id]" },
                    tableName: tableName,
                    name: "Id",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection Ver(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection ScheduledTime(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ScheduledTime]" },
                    tableName: tableName,
                    name: "ScheduledTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_ScheduledTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ScheduledTime]" },
                    tableName: tableName,
                    name: "ScheduledTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection Comments(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection Creator(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection Updator(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection CreatedTime(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection UpdatedTime(
            this ReminderSchedulesWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesWhereCollection SiteId_In(
            this ReminderSchedulesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "ReminderSchedules",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ReminderSchedulesWhereCollection Id_In(
            this ReminderSchedulesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "ReminderSchedules",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Id]" },
                    tableName: tableName,
                    name: "Id",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Id]" },
                    tableName: tableName,
                    name: "Id",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ReminderSchedulesWhereCollection Ver_In(
            this ReminderSchedulesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "ReminderSchedules",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ReminderSchedulesWhereCollection Creator_In(
            this ReminderSchedulesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "ReminderSchedules",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ReminderSchedulesWhereCollection Updator_In(
            this ReminderSchedulesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "ReminderSchedules",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ReminderSchedulesWhereCollection SiteId_Between(
            this ReminderSchedulesWhereCollection self,
            long begin,
            long end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_SiteId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection Id_Between(
            this ReminderSchedulesWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Id]" },
                    tableName: tableName,
                    name: "Id",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Id_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Id]" },
                    tableName: tableName,
                    name: "Id",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection Ver_Between(
            this ReminderSchedulesWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection Creator_Between(
            this ReminderSchedulesWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection Updator_Between(
            this ReminderSchedulesWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection ScheduledTime_Between(
            this ReminderSchedulesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ScheduledTime]" },
                    tableName: tableName,
                    name: "ScheduledTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_ScheduledTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ScheduledTime]" },
                    tableName: tableName,
                    name: "ScheduledTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection CreatedTime_Between(
            this ReminderSchedulesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection UpdatedTime_Between(
            this ReminderSchedulesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ReminderSchedules_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ReminderSchedules",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ReminderSchedulesWhereCollection Sub(
            this ReminderSchedulesWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static ReminderSchedulesWhereCollection Or(
            this ReminderSchedulesWhereCollection self,
            ReminderSchedulesWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static ReminderSchedulesGroupByCollection ReminderSchedulesGroupBy(
            this ReminderSchedulesGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "SiteId": return self.SiteId();
                    case "Id": return self.Id();
                    case "Ver": return self.Ver();
                    case "ScheduledTime": return self.ScheduledTime();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static ReminderSchedulesGroupByCollection SiteId(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_SiteId(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection Id(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Id]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_Id(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Id]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection Ver(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_Ver(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection ScheduledTime(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[ScheduledTime]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_ScheduledTime(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[ScheduledTime]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection Comments(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_Comments(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection Creator(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_Creator(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection Updator(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_Updator(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection CreatedTime(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_CreatedTime(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static ReminderSchedulesGroupByCollection UpdatedTime(
            this ReminderSchedulesGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection ReminderSchedules_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "ReminderSchedules")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static ReminderSchedulesHavingCollection ReminderSchedulesCount(
            this ReminderSchedulesHavingCollection self,
            object value = null,
            string tableName = "ReminderSchedules",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static ReminderSchedulesHavingCollection CreatedTime(
            this ReminderSchedulesHavingCollection self,
            string tableName = "ReminderSchedules",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static ReminderSchedulesHavingCollection UpdatedTime(
            this ReminderSchedulesHavingCollection self,
            string tableName = "ReminderSchedules",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static ReminderSchedulesOrderByCollection SiteId(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection Id(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Id]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection Ver(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection ScheduledTime(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ScheduledTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection Comments(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection Creator(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection Updator(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection CreatedTime(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection UpdatedTime(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_SiteId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_Id(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Id]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_ScheduledTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ScheduledTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ReminderSchedules_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ReminderSchedules",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ReminderSchedulesOrderByCollection ReminderSchedulesCount(
            this ReminderSchedulesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static ReminderSchedulesParamCollection SiteId(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_SiteId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection Id(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Id]",
                    name: "Id",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_Id(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Id]",
                    name: "Id",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection Ver(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection ScheduledTime(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ScheduledTime]",
                    name: "ScheduledTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_ScheduledTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ScheduledTime]",
                    name: "ScheduledTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection Comments(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection Creator(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection Updator(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection CreatedTime(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ReminderSchedulesParamCollection UpdatedTime(
            this ReminderSchedulesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ReminderSchedules_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsColumnCollection DeptsColumn()
        {
            return new DeptsColumnCollection();
        }

        public class DeptsColumnCollection : SqlColumnCollection
        {
            public new DeptsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Depts",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static DeptsJoinCollection DeptsJoin()
        {
            return new DeptsJoinCollection();
        }

        public class DeptsJoinCollection : SqlJoinCollection
        {
            public DeptsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static DeptsWhereCollection DeptsWhere()
        {
            return new DeptsWhereCollection();
        }

        public class DeptsWhereCollection : SqlWhereCollection
        {
            public new DeptsWhereCollection Add(
                string tableName = "Depts",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static DeptsGroupByCollection DeptsGroupBy()
        {
            return new DeptsGroupByCollection();
        }

        public class DeptsGroupByCollection : SqlGroupByCollection
        {
            public new DeptsGroupByCollection Add(
                string columnBracket, string tableName = "Depts")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static DeptsHavingCollection DeptsHaving()
        {
            return new DeptsHavingCollection();
        }

        public class DeptsHavingCollection : SqlHavingCollection
        {
            public DeptsHavingCollection Add(
                string columnBracket,
                string tableName = "Depts",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static DeptsOrderByCollection DeptsOrderBy()
        {
            return new DeptsOrderByCollection();
        }

        public class DeptsOrderByCollection : SqlOrderByCollection
        {
            public new DeptsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Depts",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static DeptsParamCollection DeptsParam()
        {
            return new DeptsParamCollection();
        }

        public class DeptsParamCollection : SqlParamCollection
        {
            public new DeptsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Depts_DeptId_WhereLike(
            string tableName = "Depts",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[DeptId] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Depts_DeptCode_WhereLike(
            string tableName = "Depts",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[DeptCode] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Depts_DeptName_WhereLike(
            string tableName = "Depts",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[DeptName] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Depts_Body_WhereLike(
            string tableName = "Depts",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static DeptsColumnCollection DeptsColumn(
            this DeptsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "DeptId":
                    return self.DeptId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "DeptCode":
                    return self.DeptCode(_as: _as, function: function);
                case "Dept":
                    return self.Dept(_as: _as, function: function);
                case "DeptName":
                    return self.DeptName(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static DeptsColumnCollection TenantId(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_TenantId(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection DeptId(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_DeptId(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection Ver(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_Ver(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection DeptCode(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptCode",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptCode]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_DeptCode(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptCode",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptCode]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection DeptName(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_DeptName(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection Body(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_Body(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection Comments(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_Comments(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection Creator(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_Creator(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection Updator(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_Updator(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection CreatedTime(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection UpdatedTime(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection Dept(
            this DeptsColumnCollection self,
            string tableName = "Depts",
            string columnName = "Dept",
            string _as = "Dept",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Depts_Dept(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "Dept",
            string _as = "Dept",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static DeptsColumnCollection DeptsCount(
            this DeptsColumnCollection self,
            string _as = "DeptsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static DeptsWhereCollection TenantId(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection DeptId(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_DeptId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection Ver(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection DeptCode(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptCode]" },
                    tableName: tableName,
                    name: "DeptCode",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_DeptCode(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptCode]" },
                    tableName: tableName,
                    name: "DeptCode",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection DeptName(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptName]" },
                    tableName: tableName,
                    name: "DeptName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_DeptName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptName]" },
                    tableName: tableName,
                    name: "DeptName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection Body(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection Comments(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection Creator(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection Updator(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection CreatedTime(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection UpdatedTime(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection Dept(
            this DeptsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "Dept",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Depts_Dept(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "Dept",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static DeptsWhereCollection TenantId_In(
            this DeptsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Depts",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DeptsWhereCollection DeptId_In(
            this DeptsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Depts",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DeptsWhereCollection Ver_In(
            this DeptsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Depts",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DeptsWhereCollection Creator_In(
            this DeptsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Depts",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DeptsWhereCollection Updator_In(
            this DeptsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Depts",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static DeptsWhereCollection TenantId_Between(
            this DeptsWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Depts_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DeptsWhereCollection DeptId_Between(
            this DeptsWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Depts_DeptId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DeptsWhereCollection Ver_Between(
            this DeptsWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Depts_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DeptsWhereCollection Creator_Between(
            this DeptsWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Depts_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DeptsWhereCollection Updator_Between(
            this DeptsWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Depts_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static DeptsWhereCollection CreatedTime_Between(
            this DeptsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Depts_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static DeptsWhereCollection UpdatedTime_Between(
            this DeptsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Depts_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Depts",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static DeptsWhereCollection Sub(
            this DeptsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static DeptsWhereCollection Or(
            this DeptsWhereCollection self,
            DeptsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static DeptsGroupByCollection DeptsGroupBy(
            this DeptsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "TenantId": return self.TenantId();
                    case "DeptId": return self.DeptId();
                    case "Ver": return self.Ver();
                    case "DeptCode": return self.DeptCode();
                    case "Dept": return self.Dept();
                    case "DeptName": return self.DeptName();
                    case "Body": return self.Body();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static DeptsGroupByCollection TenantId(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_TenantId(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static DeptsGroupByCollection DeptId(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_DeptId(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static DeptsGroupByCollection Ver(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_Ver(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static DeptsGroupByCollection DeptCode(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptCode]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_DeptCode(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptCode]", tableName: tableName);
        }

        public static DeptsGroupByCollection Dept(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_Dept(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static DeptsGroupByCollection DeptName(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptName]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_DeptName(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptName]", tableName: tableName);
        }

        public static DeptsGroupByCollection Body(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_Body(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static DeptsGroupByCollection Comments(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_Comments(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static DeptsGroupByCollection Creator(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_Creator(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static DeptsGroupByCollection Updator(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_Updator(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static DeptsGroupByCollection CreatedTime(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static DeptsGroupByCollection UpdatedTime(
            this DeptsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Depts_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static DeptsHavingCollection DeptsCount(
            this DeptsHavingCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static DeptsHavingCollection CreatedTime(
            this DeptsHavingCollection self,
            string tableName = "Depts",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static DeptsHavingCollection UpdatedTime(
            this DeptsHavingCollection self,
            string tableName = "Depts",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static DeptsOrderByCollection TenantId(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection DeptId(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection Ver(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection DeptCode(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptCode]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection Dept(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection DeptName(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection Body(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection Comments(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection Creator(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection Updator(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection CreatedTime(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection UpdatedTime(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_DeptId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_DeptCode(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptCode]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_Dept(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_DeptName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Depts_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static DeptsOrderByCollection DeptsCount(
            this DeptsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static DeptsParamCollection TenantId(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection DeptId(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_DeptId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection Ver(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection DeptCode(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptCode]",
                    name: "DeptCode",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_DeptCode(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptCode]",
                    name: "DeptCode",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection DeptName(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptName]",
                    name: "DeptName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_DeptName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptName]",
                    name: "DeptName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection Body(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection Comments(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection Creator(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection Updator(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection CreatedTime(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static DeptsParamCollection UpdatedTime(
            this DeptsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Depts_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsColumnCollection GroupsColumn()
        {
            return new GroupsColumnCollection();
        }

        public class GroupsColumnCollection : SqlColumnCollection
        {
            public new GroupsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Groups",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static GroupsJoinCollection GroupsJoin()
        {
            return new GroupsJoinCollection();
        }

        public class GroupsJoinCollection : SqlJoinCollection
        {
            public GroupsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static GroupsWhereCollection GroupsWhere()
        {
            return new GroupsWhereCollection();
        }

        public class GroupsWhereCollection : SqlWhereCollection
        {
            public new GroupsWhereCollection Add(
                string tableName = "Groups",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static GroupsGroupByCollection GroupsGroupBy()
        {
            return new GroupsGroupByCollection();
        }

        public class GroupsGroupByCollection : SqlGroupByCollection
        {
            public new GroupsGroupByCollection Add(
                string columnBracket, string tableName = "Groups")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static GroupsHavingCollection GroupsHaving()
        {
            return new GroupsHavingCollection();
        }

        public class GroupsHavingCollection : SqlHavingCollection
        {
            public GroupsHavingCollection Add(
                string columnBracket,
                string tableName = "Groups",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static GroupsOrderByCollection GroupsOrderBy()
        {
            return new GroupsOrderByCollection();
        }

        public class GroupsOrderByCollection : SqlOrderByCollection
        {
            public new GroupsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Groups",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static GroupsParamCollection GroupsParam()
        {
            return new GroupsParamCollection();
        }

        public class GroupsParamCollection : SqlParamCollection
        {
            public new GroupsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Groups_TenantId_WhereLike(
            string tableName = "Groups",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[TenantId] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Groups_GroupId_WhereLike(
            string tableName = "Groups",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[GroupId] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Groups_GroupName_WhereLike(
            string tableName = "Groups",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[GroupName] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Groups_Body_WhereLike(
            string tableName = "Groups",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static GroupsColumnCollection GroupsColumn(
            this GroupsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "GroupId":
                    return self.GroupId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "GroupName":
                    return self.GroupName(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static GroupsColumnCollection TenantId(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_TenantId(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection GroupId(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_GroupId(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection Ver(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_Ver(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection GroupName(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "GroupName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_GroupName(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "GroupName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection Body(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_Body(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection Comments(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_Comments(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection Creator(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_Creator(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection Updator(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_Updator(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection CreatedTime(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection UpdatedTime(
            this GroupsColumnCollection self,
            string tableName = "Groups",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Groups_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupsColumnCollection GroupsCount(
            this GroupsColumnCollection self,
            string _as = "GroupsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static GroupsWhereCollection TenantId(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection GroupId(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_GroupId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection Ver(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection GroupName(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupName]" },
                    tableName: tableName,
                    name: "GroupName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_GroupName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupName]" },
                    tableName: tableName,
                    name: "GroupName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection Body(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection Comments(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection Creator(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection Updator(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection CreatedTime(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection UpdatedTime(
            this GroupsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Groups_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupsWhereCollection TenantId_In(
            this GroupsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Groups",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupsWhereCollection GroupId_In(
            this GroupsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Groups",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupsWhereCollection Ver_In(
            this GroupsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Groups",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupsWhereCollection Creator_In(
            this GroupsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Groups",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupsWhereCollection Updator_In(
            this GroupsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Groups",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupsWhereCollection TenantId_Between(
            this GroupsWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Groups_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupsWhereCollection GroupId_Between(
            this GroupsWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Groups_GroupId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupsWhereCollection Ver_Between(
            this GroupsWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Groups_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupsWhereCollection Creator_Between(
            this GroupsWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Groups_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupsWhereCollection Updator_Between(
            this GroupsWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Groups_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupsWhereCollection CreatedTime_Between(
            this GroupsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Groups_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static GroupsWhereCollection UpdatedTime_Between(
            this GroupsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Groups_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Groups",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static GroupsWhereCollection Sub(
            this GroupsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static GroupsWhereCollection Or(
            this GroupsWhereCollection self,
            GroupsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static GroupsGroupByCollection GroupsGroupBy(
            this GroupsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "TenantId": return self.TenantId();
                    case "GroupId": return self.GroupId();
                    case "Ver": return self.Ver();
                    case "GroupName": return self.GroupName();
                    case "Body": return self.Body();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static GroupsGroupByCollection TenantId(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_TenantId(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static GroupsGroupByCollection GroupId(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_GroupId(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static GroupsGroupByCollection Ver(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_Ver(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static GroupsGroupByCollection GroupName(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[GroupName]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_GroupName(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[GroupName]", tableName: tableName);
        }

        public static GroupsGroupByCollection Body(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_Body(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static GroupsGroupByCollection Comments(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_Comments(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static GroupsGroupByCollection Creator(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_Creator(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static GroupsGroupByCollection Updator(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_Updator(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static GroupsGroupByCollection CreatedTime(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static GroupsGroupByCollection UpdatedTime(
            this GroupsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Groups_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static GroupsHavingCollection GroupsCount(
            this GroupsHavingCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static GroupsHavingCollection CreatedTime(
            this GroupsHavingCollection self,
            string tableName = "Groups",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static GroupsHavingCollection UpdatedTime(
            this GroupsHavingCollection self,
            string tableName = "Groups",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static GroupsOrderByCollection TenantId(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection GroupId(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection Ver(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection GroupName(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection Body(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection Comments(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection Creator(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection Updator(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection CreatedTime(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection UpdatedTime(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_GroupId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_GroupName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Groups_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupsOrderByCollection GroupsCount(
            this GroupsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static GroupsParamCollection TenantId(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection GroupId(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_GroupId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection Ver(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection GroupName(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupName]",
                    name: "GroupName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_GroupName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupName]",
                    name: "GroupName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection Body(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection Comments(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection Creator(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection Updator(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection CreatedTime(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupsParamCollection UpdatedTime(
            this GroupsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Groups_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersColumnCollection GroupMembersColumn()
        {
            return new GroupMembersColumnCollection();
        }

        public class GroupMembersColumnCollection : SqlColumnCollection
        {
            public new GroupMembersColumnCollection Add(
                string columnBracket = null,
                string tableName = "GroupMembers",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static GroupMembersJoinCollection GroupMembersJoin()
        {
            return new GroupMembersJoinCollection();
        }

        public class GroupMembersJoinCollection : SqlJoinCollection
        {
            public GroupMembersJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static GroupMembersWhereCollection GroupMembersWhere()
        {
            return new GroupMembersWhereCollection();
        }

        public class GroupMembersWhereCollection : SqlWhereCollection
        {
            public new GroupMembersWhereCollection Add(
                string tableName = "GroupMembers",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static GroupMembersGroupByCollection GroupMembersGroupBy()
        {
            return new GroupMembersGroupByCollection();
        }

        public class GroupMembersGroupByCollection : SqlGroupByCollection
        {
            public new GroupMembersGroupByCollection Add(
                string columnBracket, string tableName = "GroupMembers")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static GroupMembersHavingCollection GroupMembersHaving()
        {
            return new GroupMembersHavingCollection();
        }

        public class GroupMembersHavingCollection : SqlHavingCollection
        {
            public GroupMembersHavingCollection Add(
                string columnBracket,
                string tableName = "GroupMembers",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static GroupMembersOrderByCollection GroupMembersOrderBy()
        {
            return new GroupMembersOrderByCollection();
        }

        public class GroupMembersOrderByCollection : SqlOrderByCollection
        {
            public new GroupMembersOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "GroupMembers",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static GroupMembersParamCollection GroupMembersParam()
        {
            return new GroupMembersParamCollection();
        }

        public class GroupMembersParamCollection : SqlParamCollection
        {
            public new GroupMembersParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static GroupMembersColumnCollection GroupMembersColumn(
            this GroupMembersColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "GroupId":
                    return self.GroupId(_as: _as, function: function);
                case "DeptId":
                    return self.DeptId(_as: _as, function: function);
                case "UserId":
                    return self.UserId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Admin":
                    return self.Admin(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static GroupMembersColumnCollection GroupId(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_GroupId(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection DeptId(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_DeptId(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection UserId(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_UserId(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection Ver(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_Ver(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection Admin(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Admin",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Admin]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_Admin(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Admin",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Admin]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection Comments(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_Comments(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection Creator(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_Creator(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection Updator(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_Updator(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection CreatedTime(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection UpdatedTime(
            this GroupMembersColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection GroupMembers_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "GroupMembers",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static GroupMembersColumnCollection GroupMembersCount(
            this GroupMembersColumnCollection self,
            string _as = "GroupMembersCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static GroupMembersWhereCollection GroupId(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_GroupId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection DeptId(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_DeptId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection UserId(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_UserId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection Ver(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection Admin(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Admin]" },
                    tableName: tableName,
                    name: "Admin",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_Admin(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Admin]" },
                    tableName: tableName,
                    name: "Admin",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection Comments(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection Creator(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection Updator(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection CreatedTime(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection UpdatedTime(
            this GroupMembersWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection GroupMembers_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static GroupMembersWhereCollection GroupId_In(
            this GroupMembersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "GroupMembers",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupMembersWhereCollection DeptId_In(
            this GroupMembersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "GroupMembers",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupMembersWhereCollection UserId_In(
            this GroupMembersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "GroupMembers",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupMembersWhereCollection Ver_In(
            this GroupMembersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "GroupMembers",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupMembersWhereCollection Creator_In(
            this GroupMembersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "GroupMembers",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupMembersWhereCollection Updator_In(
            this GroupMembersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "GroupMembers",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static GroupMembersWhereCollection GroupId_Between(
            this GroupMembersWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_GroupId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection DeptId_Between(
            this GroupMembersWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_DeptId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection UserId_Between(
            this GroupMembersWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_UserId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection Ver_Between(
            this GroupMembersWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection Creator_Between(
            this GroupMembersWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection Updator_Between(
            this GroupMembersWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection CreatedTime_Between(
            this GroupMembersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection UpdatedTime_Between(
            this GroupMembersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection GroupMembers_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "GroupMembers",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static GroupMembersWhereCollection Sub(
            this GroupMembersWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static GroupMembersWhereCollection Or(
            this GroupMembersWhereCollection self,
            GroupMembersWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static GroupMembersGroupByCollection GroupMembersGroupBy(
            this GroupMembersGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "GroupId": return self.GroupId();
                    case "DeptId": return self.DeptId();
                    case "UserId": return self.UserId();
                    case "Ver": return self.Ver();
                    case "Admin": return self.Admin();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static GroupMembersGroupByCollection GroupId(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_GroupId(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection DeptId(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_DeptId(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection UserId(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_UserId(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection Ver(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_Ver(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection Admin(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Admin]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_Admin(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Admin]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection Comments(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_Comments(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection Creator(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_Creator(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection Updator(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_Updator(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection CreatedTime(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_CreatedTime(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static GroupMembersGroupByCollection UpdatedTime(
            this GroupMembersGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection GroupMembers_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "GroupMembers")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static GroupMembersHavingCollection GroupMembersCount(
            this GroupMembersHavingCollection self,
            object value = null,
            string tableName = "GroupMembers",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static GroupMembersHavingCollection CreatedTime(
            this GroupMembersHavingCollection self,
            string tableName = "GroupMembers",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static GroupMembersHavingCollection UpdatedTime(
            this GroupMembersHavingCollection self,
            string tableName = "GroupMembers",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static GroupMembersOrderByCollection GroupId(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection DeptId(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection UserId(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection Ver(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection Admin(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Admin]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection Comments(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection Creator(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection Updator(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection CreatedTime(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection UpdatedTime(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_GroupId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_DeptId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_UserId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_Admin(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Admin]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection GroupMembers_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "GroupMembers",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static GroupMembersOrderByCollection GroupMembersCount(
            this GroupMembersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static GroupMembersParamCollection GroupId(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_GroupId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection DeptId(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_DeptId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection UserId(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_UserId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection Ver(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection Admin(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Admin]",
                    name: "Admin",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_Admin(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Admin]",
                    name: "Admin",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection Comments(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection Creator(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection Updator(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection CreatedTime(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static GroupMembersParamCollection UpdatedTime(
            this GroupMembersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection GroupMembers_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsColumnCollection RegistrationsColumn()
        {
            return new RegistrationsColumnCollection();
        }

        public class RegistrationsColumnCollection : SqlColumnCollection
        {
            public new RegistrationsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Registrations",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static RegistrationsJoinCollection RegistrationsJoin()
        {
            return new RegistrationsJoinCollection();
        }

        public class RegistrationsJoinCollection : SqlJoinCollection
        {
            public RegistrationsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static RegistrationsWhereCollection RegistrationsWhere()
        {
            return new RegistrationsWhereCollection();
        }

        public class RegistrationsWhereCollection : SqlWhereCollection
        {
            public new RegistrationsWhereCollection Add(
                string tableName = "Registrations",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static RegistrationsGroupByCollection RegistrationsGroupBy()
        {
            return new RegistrationsGroupByCollection();
        }

        public class RegistrationsGroupByCollection : SqlGroupByCollection
        {
            public new RegistrationsGroupByCollection Add(
                string columnBracket, string tableName = "Registrations")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static RegistrationsHavingCollection RegistrationsHaving()
        {
            return new RegistrationsHavingCollection();
        }

        public class RegistrationsHavingCollection : SqlHavingCollection
        {
            public RegistrationsHavingCollection Add(
                string columnBracket,
                string tableName = "Registrations",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static RegistrationsOrderByCollection RegistrationsOrderBy()
        {
            return new RegistrationsOrderByCollection();
        }

        public class RegistrationsOrderByCollection : SqlOrderByCollection
        {
            public new RegistrationsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Registrations",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static RegistrationsParamCollection RegistrationsParam()
        {
            return new RegistrationsParamCollection();
        }

        public class RegistrationsParamCollection : SqlParamCollection
        {
            public new RegistrationsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Registrations_MailAddress_WhereLike(
            string tableName = "Registrations",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[MailAddress] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Registrations_Name_WhereLike(
            string tableName = "Registrations",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Name] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static RegistrationsColumnCollection RegistrationsColumn(
            this RegistrationsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "RegistrationId":
                    return self.RegistrationId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "MailAddress":
                    return self.MailAddress(_as: _as, function: function);
                case "Invitee":
                    return self.Invitee(_as: _as, function: function);
                case "InviteeName":
                    return self.InviteeName(_as: _as, function: function);
                case "LoginId":
                    return self.LoginId(_as: _as, function: function);
                case "Name":
                    return self.Name(_as: _as, function: function);
                case "Password":
                    return self.Password(_as: _as, function: function);
                case "Language":
                    return self.Language(_as: _as, function: function);
                case "Passphrase":
                    return self.Passphrase(_as: _as, function: function);
                case "Invitingflg":
                    return self.Invitingflg(_as: _as, function: function);
                case "UserId":
                    return self.UserId(_as: _as, function: function);
                case "DeptId":
                    return self.DeptId(_as: _as, function: function);
                case "GroupId":
                    return self.GroupId(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static RegistrationsColumnCollection TenantId(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_TenantId(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection RegistrationId(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "RegistrationId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[RegistrationId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_RegistrationId(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "RegistrationId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[RegistrationId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Ver(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Ver(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection MailAddress(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "MailAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_MailAddress(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "MailAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Invitee(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Invitee",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Invitee]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Invitee(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Invitee",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Invitee]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection InviteeName(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "InviteeName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InviteeName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_InviteeName(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "InviteeName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InviteeName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection LoginId(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_LoginId(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Name(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Name",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Name]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Name(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Name",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Name]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Password(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Password",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Password]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Password(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Password",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Password]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Language(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Language",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Language]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Language(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Language",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Language]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Passphrase(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Passphrase",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Passphrase]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Passphrase(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Passphrase",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Passphrase]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Invitingflg(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Invitingflg",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Invitingflg]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Invitingflg(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Invitingflg",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Invitingflg]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection UserId(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_UserId(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection DeptId(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_DeptId(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection GroupId(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_GroupId(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Comments(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Comments(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Creator(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Creator(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection Updator(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_Updator(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection CreatedTime(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection UpdatedTime(
            this RegistrationsColumnCollection self,
            string tableName = "Registrations",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Registrations_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Registrations",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static RegistrationsColumnCollection RegistrationsCount(
            this RegistrationsColumnCollection self,
            string _as = "RegistrationsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static RegistrationsWhereCollection TenantId(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection RegistrationId(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RegistrationId]" },
                    tableName: tableName,
                    name: "RegistrationId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_RegistrationId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RegistrationId]" },
                    tableName: tableName,
                    name: "RegistrationId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Ver(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection MailAddress(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddress]" },
                    tableName: tableName,
                    name: "MailAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_MailAddress(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddress]" },
                    tableName: tableName,
                    name: "MailAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Invitee(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Invitee]" },
                    tableName: tableName,
                    name: "Invitee",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Invitee(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Invitee]" },
                    tableName: tableName,
                    name: "Invitee",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection InviteeName(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InviteeName]" },
                    tableName: tableName,
                    name: "InviteeName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_InviteeName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InviteeName]" },
                    tableName: tableName,
                    name: "InviteeName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection LoginId(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_LoginId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Name(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Name]" },
                    tableName: tableName,
                    name: "Name",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Name(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Name]" },
                    tableName: tableName,
                    name: "Name",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Password(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Password]" },
                    tableName: tableName,
                    name: "Password",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Password(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Password]" },
                    tableName: tableName,
                    name: "Password",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Language(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Language]" },
                    tableName: tableName,
                    name: "Language",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Language(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Language]" },
                    tableName: tableName,
                    name: "Language",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Passphrase(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Passphrase]" },
                    tableName: tableName,
                    name: "Passphrase",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Passphrase(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Passphrase]" },
                    tableName: tableName,
                    name: "Passphrase",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Invitingflg(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Invitingflg]" },
                    tableName: tableName,
                    name: "Invitingflg",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Invitingflg(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Invitingflg]" },
                    tableName: tableName,
                    name: "Invitingflg",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection UserId(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_UserId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection DeptId(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_DeptId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection GroupId(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_GroupId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Comments(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Creator(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection Updator(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection CreatedTime(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection UpdatedTime(
            this RegistrationsWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Registrations_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static RegistrationsWhereCollection TenantId_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection RegistrationId_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[RegistrationId]" },
                    tableName: tableName,
                    name: "RegistrationId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[RegistrationId]" },
                    tableName: tableName,
                    name: "RegistrationId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection Ver_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection Invitee_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Invitee]" },
                    tableName: tableName,
                    name: "Invitee",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Invitee]" },
                    tableName: tableName,
                    name: "Invitee",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection UserId_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection DeptId_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection GroupId_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection Creator_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection Updator_In(
            this RegistrationsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Registrations",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static RegistrationsWhereCollection TenantId_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection RegistrationId_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RegistrationId]" },
                    tableName: tableName,
                    name: "RegistrationId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_RegistrationId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[RegistrationId]" },
                    tableName: tableName,
                    name: "RegistrationId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection Ver_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection Invitee_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Invitee]" },
                    tableName: tableName,
                    name: "Invitee",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_Invitee_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Invitee]" },
                    tableName: tableName,
                    name: "Invitee",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection UserId_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_UserId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection DeptId_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_DeptId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection GroupId_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_GroupId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection Creator_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection Updator_Between(
            this RegistrationsWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection CreatedTime_Between(
            this RegistrationsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection UpdatedTime_Between(
            this RegistrationsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Registrations_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Registrations",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static RegistrationsWhereCollection Sub(
            this RegistrationsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static RegistrationsWhereCollection Or(
            this RegistrationsWhereCollection self,
            RegistrationsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static RegistrationsGroupByCollection RegistrationsGroupBy(
            this RegistrationsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "TenantId": return self.TenantId();
                    case "RegistrationId": return self.RegistrationId();
                    case "Ver": return self.Ver();
                    case "MailAddress": return self.MailAddress();
                    case "Invitee": return self.Invitee();
                    case "InviteeName": return self.InviteeName();
                    case "LoginId": return self.LoginId();
                    case "Name": return self.Name();
                    case "Password": return self.Password();
                    case "Language": return self.Language();
                    case "Passphrase": return self.Passphrase();
                    case "Invitingflg": return self.Invitingflg();
                    case "UserId": return self.UserId();
                    case "DeptId": return self.DeptId();
                    case "GroupId": return self.GroupId();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static RegistrationsGroupByCollection TenantId(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_TenantId(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection RegistrationId(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[RegistrationId]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_RegistrationId(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[RegistrationId]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Ver(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Ver(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection MailAddress(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[MailAddress]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_MailAddress(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[MailAddress]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Invitee(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Invitee]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Invitee(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Invitee]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection InviteeName(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[InviteeName]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_InviteeName(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[InviteeName]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection LoginId(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_LoginId(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Name(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Name]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Name(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Name]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Password(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Password]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Password(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Password]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Language(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Language]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Language(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Language]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Passphrase(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Passphrase]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Passphrase(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Passphrase]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Invitingflg(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Invitingflg]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Invitingflg(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Invitingflg]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection UserId(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_UserId(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection DeptId(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_DeptId(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection GroupId(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_GroupId(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Comments(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Comments(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Creator(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Creator(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection Updator(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_Updator(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection CreatedTime(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static RegistrationsGroupByCollection UpdatedTime(
            this RegistrationsGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Registrations_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Registrations")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static RegistrationsHavingCollection RegistrationsCount(
            this RegistrationsHavingCollection self,
            object value = null,
            string tableName = "Registrations",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static RegistrationsHavingCollection CreatedTime(
            this RegistrationsHavingCollection self,
            string tableName = "Registrations",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static RegistrationsHavingCollection UpdatedTime(
            this RegistrationsHavingCollection self,
            string tableName = "Registrations",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static RegistrationsOrderByCollection TenantId(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection RegistrationId(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[RegistrationId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Ver(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection MailAddress(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Invitee(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Invitee]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection InviteeName(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InviteeName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection LoginId(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Name(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Name]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Password(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Password]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Language(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Language]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Passphrase(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Passphrase]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Invitingflg(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Invitingflg]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection UserId(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection DeptId(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection GroupId(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Comments(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Creator(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection Updator(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection CreatedTime(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection UpdatedTime(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_RegistrationId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[RegistrationId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_MailAddress(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Invitee(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Invitee]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_InviteeName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InviteeName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_LoginId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Name(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Name]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Password(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Password]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Language(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Language]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Passphrase(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Passphrase]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Invitingflg(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Invitingflg]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_UserId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_DeptId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_GroupId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Registrations_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Registrations",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static RegistrationsOrderByCollection RegistrationsCount(
            this RegistrationsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static RegistrationsParamCollection TenantId(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection RegistrationId(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[RegistrationId]",
                    name: "RegistrationId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_RegistrationId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[RegistrationId]",
                    name: "RegistrationId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Ver(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection MailAddress(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddress]",
                    name: "MailAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_MailAddress(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddress]",
                    name: "MailAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Invitee(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Invitee]",
                    name: "Invitee",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Invitee(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Invitee]",
                    name: "Invitee",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection InviteeName(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[InviteeName]",
                    name: "InviteeName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_InviteeName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[InviteeName]",
                    name: "InviteeName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection LoginId(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_LoginId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Name(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Name]",
                    name: "Name",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Name(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Name]",
                    name: "Name",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Password(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Password]",
                    name: "Password",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Password(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Password]",
                    name: "Password",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Language(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Language]",
                    name: "Language",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Language(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Language]",
                    name: "Language",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Passphrase(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Passphrase]",
                    name: "Passphrase",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Passphrase(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Passphrase]",
                    name: "Passphrase",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Invitingflg(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Invitingflg]",
                    name: "Invitingflg",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Invitingflg(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Invitingflg]",
                    name: "Invitingflg",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection UserId(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_UserId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection DeptId(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_DeptId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection GroupId(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_GroupId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Comments(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Creator(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection Updator(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection CreatedTime(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static RegistrationsParamCollection UpdatedTime(
            this RegistrationsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Registrations_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersColumnCollection UsersColumn()
        {
            return new UsersColumnCollection();
        }

        public class UsersColumnCollection : SqlColumnCollection
        {
            public new UsersColumnCollection Add(
                string columnBracket = null,
                string tableName = "Users",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static UsersJoinCollection UsersJoin()
        {
            return new UsersJoinCollection();
        }

        public class UsersJoinCollection : SqlJoinCollection
        {
            public UsersJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static UsersWhereCollection UsersWhere()
        {
            return new UsersWhereCollection();
        }

        public class UsersWhereCollection : SqlWhereCollection
        {
            public new UsersWhereCollection Add(
                string tableName = "Users",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static UsersGroupByCollection UsersGroupBy()
        {
            return new UsersGroupByCollection();
        }

        public class UsersGroupByCollection : SqlGroupByCollection
        {
            public new UsersGroupByCollection Add(
                string columnBracket, string tableName = "Users")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static UsersHavingCollection UsersHaving()
        {
            return new UsersHavingCollection();
        }

        public class UsersHavingCollection : SqlHavingCollection
        {
            public UsersHavingCollection Add(
                string columnBracket,
                string tableName = "Users",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static UsersOrderByCollection UsersOrderBy()
        {
            return new UsersOrderByCollection();
        }

        public class UsersOrderByCollection : SqlOrderByCollection
        {
            public new UsersOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Users",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static UsersParamCollection UsersParam()
        {
            return new UsersParamCollection();
        }

        public class UsersParamCollection : SqlParamCollection
        {
            public new UsersParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Users_LoginId_WhereLike(
            string tableName = "Users",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[LoginId] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Users_Name_WhereLike(
            string tableName = "Users",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Name] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Users_UserCode_WhereLike(
            string tableName = "Users",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[UserCode] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Users_Body_WhereLike(
            string tableName = "Users",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static UsersColumnCollection UsersColumn(
            this UsersColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "UserId":
                    return self.UserId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "LoginId":
                    return self.LoginId(_as: _as, function: function);
                case "GlobalId":
                    return self.GlobalId(_as: _as, function: function);
                case "Name":
                    return self.Name(_as: _as, function: function);
                case "UserCode":
                    return self.UserCode(_as: _as, function: function);
                case "Password":
                    return self.Password(_as: _as, function: function);
                case "LastName":
                    return self.LastName(_as: _as, function: function);
                case "FirstName":
                    return self.FirstName(_as: _as, function: function);
                case "Birthday":
                    return self.Birthday(_as: _as, function: function);
                case "Gender":
                    return self.Gender(_as: _as, function: function);
                case "Language":
                    return self.Language(_as: _as, function: function);
                case "TimeZone":
                    return self.TimeZone(_as: _as, function: function);
                case "DeptCode":
                    return self.DeptCode(_as: _as, function: function);
                case "DeptId":
                    return self.DeptId(_as: _as, function: function);
                case "Dept":
                    return self.Dept(_as: _as, function: function);
                case "FirstAndLastNameOrder":
                    return self.FirstAndLastNameOrder(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "LastLoginTime":
                    return self.LastLoginTime(_as: _as, function: function);
                case "PasswordExpirationTime":
                    return self.PasswordExpirationTime(_as: _as, function: function);
                case "PasswordChangeTime":
                    return self.PasswordChangeTime(_as: _as, function: function);
                case "NumberOfLogins":
                    return self.NumberOfLogins(_as: _as, function: function);
                case "NumberOfDenial":
                    return self.NumberOfDenial(_as: _as, function: function);
                case "TenantManager":
                    return self.TenantManager(_as: _as, function: function);
                case "ServiceManager":
                    return self.ServiceManager(_as: _as, function: function);
                case "Disabled":
                    return self.Disabled(_as: _as, function: function);
                case "Lockout":
                    return self.Lockout(_as: _as, function: function);
                case "LockoutCounter":
                    return self.LockoutCounter(_as: _as, function: function);
                case "Developer":
                    return self.Developer(_as: _as, function: function);
                case "UserSettings":
                    return self.UserSettings(_as: _as, function: function);
                case "ApiKey":
                    return self.ApiKey(_as: _as, function: function);
                case "LdapSearchRoot":
                    return self.LdapSearchRoot(_as: _as, function: function);
                case "SynchronizedTime":
                    return self.SynchronizedTime(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static UsersColumnCollection TenantId(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_TenantId(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection UserId(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_UserId(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Ver(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Ver(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection LoginId(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_LoginId(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection GlobalId(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "GlobalId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GlobalId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_GlobalId(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "GlobalId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GlobalId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Name(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Name",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Name]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Name(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Name",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Name]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection UserCode(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "UserCode",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserCode]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_UserCode(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "UserCode",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserCode]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Password(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Password",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Password]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Password(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Password",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Password]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection LastName(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "LastName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LastName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_LastName(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "LastName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LastName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection FirstName(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "FirstName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FirstName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_FirstName(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "FirstName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FirstName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Birthday(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Birthday",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Birthday]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Birthday(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Birthday",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Birthday]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Gender(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Gender",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Gender]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Gender(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Gender",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Gender]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Language(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Language",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Language]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Language(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Language",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Language]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection TimeZone(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "TimeZone",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TimeZone]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_TimeZone(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "TimeZone",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TimeZone]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection DeptCode(
            this UsersColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptCode",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptCode]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_DeptCode(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptCode",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptCode]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection DeptId(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_DeptId(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection FirstAndLastNameOrder(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "FirstAndLastNameOrder",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FirstAndLastNameOrder]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_FirstAndLastNameOrder(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "FirstAndLastNameOrder",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FirstAndLastNameOrder]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Body(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Body(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection LastLoginTime(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "LastLoginTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LastLoginTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_LastLoginTime(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "LastLoginTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LastLoginTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection PasswordExpirationTime(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "PasswordExpirationTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[PasswordExpirationTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_PasswordExpirationTime(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "PasswordExpirationTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[PasswordExpirationTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection PasswordChangeTime(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "PasswordChangeTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[PasswordChangeTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_PasswordChangeTime(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "PasswordChangeTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[PasswordChangeTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection NumberOfLogins(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "NumberOfLogins",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[NumberOfLogins]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_NumberOfLogins(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "NumberOfLogins",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[NumberOfLogins]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection NumberOfDenial(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "NumberOfDenial",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[NumberOfDenial]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_NumberOfDenial(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "NumberOfDenial",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[NumberOfDenial]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection TenantManager(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "TenantManager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantManager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_TenantManager(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "TenantManager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantManager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection ServiceManager(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "ServiceManager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ServiceManager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_ServiceManager(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "ServiceManager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ServiceManager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Disabled(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Disabled",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Disabled]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Disabled(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Disabled",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Disabled]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Lockout(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Lockout",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Lockout]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Lockout(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Lockout",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Lockout]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection LockoutCounter(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "LockoutCounter",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LockoutCounter]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_LockoutCounter(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "LockoutCounter",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LockoutCounter]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Developer(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Developer",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Developer]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Developer(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Developer",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Developer]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection UserSettings(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "UserSettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserSettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_UserSettings(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "UserSettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserSettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection ApiKey(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "ApiKey",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ApiKey]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_ApiKey(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "ApiKey",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ApiKey]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection LdapSearchRoot(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "LdapSearchRoot",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LdapSearchRoot]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_LdapSearchRoot(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "LdapSearchRoot",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LdapSearchRoot]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection SynchronizedTime(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "SynchronizedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SynchronizedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_SynchronizedTime(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "SynchronizedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SynchronizedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Comments(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Comments(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Creator(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Creator(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Updator(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Updator(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection CreatedTime(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection UpdatedTime(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection Dept(
            this UsersColumnCollection self,
            string tableName = "Users",
            string columnName = "Dept",
            string _as = "Dept",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Users_Dept(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Dept",
            string _as = "Dept",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static UsersColumnCollection UsersCount(
            this UsersColumnCollection self,
            string _as = "UsersCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static UsersWhereCollection TenantId(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection UserId(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_UserId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Ver(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection LoginId(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_LoginId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection GlobalId(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GlobalId]" },
                    tableName: tableName,
                    name: "GlobalId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_GlobalId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GlobalId]" },
                    tableName: tableName,
                    name: "GlobalId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Name(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Name]" },
                    tableName: tableName,
                    name: "Name",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Name(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Name]" },
                    tableName: tableName,
                    name: "Name",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection UserCode(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserCode]" },
                    tableName: tableName,
                    name: "UserCode",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_UserCode(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserCode]" },
                    tableName: tableName,
                    name: "UserCode",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Password(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Password]" },
                    tableName: tableName,
                    name: "Password",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Password(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Password]" },
                    tableName: tableName,
                    name: "Password",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection LastName(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LastName]" },
                    tableName: tableName,
                    name: "LastName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_LastName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LastName]" },
                    tableName: tableName,
                    name: "LastName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection FirstName(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FirstName]" },
                    tableName: tableName,
                    name: "FirstName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_FirstName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FirstName]" },
                    tableName: tableName,
                    name: "FirstName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Birthday(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Birthday]" },
                    tableName: tableName,
                    name: "Birthday",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Birthday(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Birthday]" },
                    tableName: tableName,
                    name: "Birthday",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Gender(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Gender]" },
                    tableName: tableName,
                    name: "Gender",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Gender(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Gender]" },
                    tableName: tableName,
                    name: "Gender",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Language(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Language]" },
                    tableName: tableName,
                    name: "Language",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Language(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Language]" },
                    tableName: tableName,
                    name: "Language",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection TimeZone(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TimeZone]" },
                    tableName: tableName,
                    name: "TimeZone",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_TimeZone(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TimeZone]" },
                    tableName: tableName,
                    name: "TimeZone",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection DeptCode(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptCode]" },
                    tableName: tableName,
                    name: "DeptCode",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_DeptCode(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptCode]" },
                    tableName: tableName,
                    name: "DeptCode",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection DeptId(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_DeptId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection FirstAndLastNameOrder(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FirstAndLastNameOrder]" },
                    tableName: tableName,
                    name: "FirstAndLastNameOrder",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_FirstAndLastNameOrder(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FirstAndLastNameOrder]" },
                    tableName: tableName,
                    name: "FirstAndLastNameOrder",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Body(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection LastLoginTime(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LastLoginTime]" },
                    tableName: tableName,
                    name: "LastLoginTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_LastLoginTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LastLoginTime]" },
                    tableName: tableName,
                    name: "LastLoginTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection PasswordExpirationTime(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordExpirationTime]" },
                    tableName: tableName,
                    name: "PasswordExpirationTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_PasswordExpirationTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordExpirationTime]" },
                    tableName: tableName,
                    name: "PasswordExpirationTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection PasswordChangeTime(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordChangeTime]" },
                    tableName: tableName,
                    name: "PasswordChangeTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_PasswordChangeTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordChangeTime]" },
                    tableName: tableName,
                    name: "PasswordChangeTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection NumberOfLogins(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfLogins]" },
                    tableName: tableName,
                    name: "NumberOfLogins",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_NumberOfLogins(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfLogins]" },
                    tableName: tableName,
                    name: "NumberOfLogins",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection NumberOfDenial(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfDenial]" },
                    tableName: tableName,
                    name: "NumberOfDenial",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_NumberOfDenial(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfDenial]" },
                    tableName: tableName,
                    name: "NumberOfDenial",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection TenantManager(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantManager]" },
                    tableName: tableName,
                    name: "TenantManager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_TenantManager(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantManager]" },
                    tableName: tableName,
                    name: "TenantManager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection ServiceManager(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ServiceManager]" },
                    tableName: tableName,
                    name: "ServiceManager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_ServiceManager(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ServiceManager]" },
                    tableName: tableName,
                    name: "ServiceManager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Disabled(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Disabled]" },
                    tableName: tableName,
                    name: "Disabled",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Disabled(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Disabled]" },
                    tableName: tableName,
                    name: "Disabled",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Lockout(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Lockout]" },
                    tableName: tableName,
                    name: "Lockout",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Lockout(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Lockout]" },
                    tableName: tableName,
                    name: "Lockout",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection LockoutCounter(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockoutCounter]" },
                    tableName: tableName,
                    name: "LockoutCounter",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_LockoutCounter(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockoutCounter]" },
                    tableName: tableName,
                    name: "LockoutCounter",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Developer(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Developer]" },
                    tableName: tableName,
                    name: "Developer",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Developer(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Developer]" },
                    tableName: tableName,
                    name: "Developer",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection UserSettings(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserSettings]" },
                    tableName: tableName,
                    name: "UserSettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_UserSettings(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserSettings]" },
                    tableName: tableName,
                    name: "UserSettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection ApiKey(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ApiKey]" },
                    tableName: tableName,
                    name: "ApiKey",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_ApiKey(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ApiKey]" },
                    tableName: tableName,
                    name: "ApiKey",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection LdapSearchRoot(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LdapSearchRoot]" },
                    tableName: tableName,
                    name: "LdapSearchRoot",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_LdapSearchRoot(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LdapSearchRoot]" },
                    tableName: tableName,
                    name: "LdapSearchRoot",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection SynchronizedTime(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SynchronizedTime]" },
                    tableName: tableName,
                    name: "SynchronizedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_SynchronizedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SynchronizedTime]" },
                    tableName: tableName,
                    name: "SynchronizedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Comments(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Creator(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Updator(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection CreatedTime(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection UpdatedTime(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection Dept(
            this UsersWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "Dept",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Users_Dept(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "Dept",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static UsersWhereCollection TenantId_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection UserId_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection Ver_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection DeptId_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection FirstAndLastNameOrder_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[FirstAndLastNameOrder]" },
                    tableName: tableName,
                    name: "FirstAndLastNameOrder",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[FirstAndLastNameOrder]" },
                    tableName: tableName,
                    name: "FirstAndLastNameOrder",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection NumberOfLogins_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[NumberOfLogins]" },
                    tableName: tableName,
                    name: "NumberOfLogins",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[NumberOfLogins]" },
                    tableName: tableName,
                    name: "NumberOfLogins",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection NumberOfDenial_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[NumberOfDenial]" },
                    tableName: tableName,
                    name: "NumberOfDenial",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[NumberOfDenial]" },
                    tableName: tableName,
                    name: "NumberOfDenial",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection LockoutCounter_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[LockoutCounter]" },
                    tableName: tableName,
                    name: "LockoutCounter",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[LockoutCounter]" },
                    tableName: tableName,
                    name: "LockoutCounter",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection Creator_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection Updator_In(
            this UsersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Users",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static UsersWhereCollection TenantId_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection UserId_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_UserId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection Ver_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection DeptId_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_DeptId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection FirstAndLastNameOrder_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FirstAndLastNameOrder]" },
                    tableName: tableName,
                    name: "FirstAndLastNameOrder",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_FirstAndLastNameOrder_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FirstAndLastNameOrder]" },
                    tableName: tableName,
                    name: "FirstAndLastNameOrder",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection NumberOfLogins_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfLogins]" },
                    tableName: tableName,
                    name: "NumberOfLogins",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_NumberOfLogins_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfLogins]" },
                    tableName: tableName,
                    name: "NumberOfLogins",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection NumberOfDenial_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfDenial]" },
                    tableName: tableName,
                    name: "NumberOfDenial",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_NumberOfDenial_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[NumberOfDenial]" },
                    tableName: tableName,
                    name: "NumberOfDenial",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection LockoutCounter_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockoutCounter]" },
                    tableName: tableName,
                    name: "LockoutCounter",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_LockoutCounter_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockoutCounter]" },
                    tableName: tableName,
                    name: "LockoutCounter",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection Creator_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection Updator_Between(
            this UsersWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection Birthday_Between(
            this UsersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Birthday]" },
                    tableName: tableName,
                    name: "Birthday",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_Birthday_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Birthday]" },
                    tableName: tableName,
                    name: "Birthday",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection LastLoginTime_Between(
            this UsersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LastLoginTime]" },
                    tableName: tableName,
                    name: "LastLoginTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_LastLoginTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LastLoginTime]" },
                    tableName: tableName,
                    name: "LastLoginTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection PasswordExpirationTime_Between(
            this UsersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordExpirationTime]" },
                    tableName: tableName,
                    name: "PasswordExpirationTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_PasswordExpirationTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordExpirationTime]" },
                    tableName: tableName,
                    name: "PasswordExpirationTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection PasswordChangeTime_Between(
            this UsersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordChangeTime]" },
                    tableName: tableName,
                    name: "PasswordChangeTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_PasswordChangeTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PasswordChangeTime]" },
                    tableName: tableName,
                    name: "PasswordChangeTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection SynchronizedTime_Between(
            this UsersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SynchronizedTime]" },
                    tableName: tableName,
                    name: "SynchronizedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_SynchronizedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SynchronizedTime]" },
                    tableName: tableName,
                    name: "SynchronizedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection CreatedTime_Between(
            this UsersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection UpdatedTime_Between(
            this UsersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Users_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Users",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static UsersWhereCollection Sub(
            this UsersWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static UsersWhereCollection Or(
            this UsersWhereCollection self,
            UsersWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static UsersGroupByCollection UsersGroupBy(
            this UsersGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "TenantId": return self.TenantId();
                    case "UserId": return self.UserId();
                    case "Ver": return self.Ver();
                    case "LoginId": return self.LoginId();
                    case "GlobalId": return self.GlobalId();
                    case "Name": return self.Name();
                    case "UserCode": return self.UserCode();
                    case "Password": return self.Password();
                    case "LastName": return self.LastName();
                    case "FirstName": return self.FirstName();
                    case "Birthday": return self.Birthday();
                    case "Gender": return self.Gender();
                    case "Language": return self.Language();
                    case "TimeZone": return self.TimeZone();
                    case "DeptCode": return self.DeptCode();
                    case "DeptId": return self.DeptId();
                    case "Dept": return self.Dept();
                    case "FirstAndLastNameOrder": return self.FirstAndLastNameOrder();
                    case "Body": return self.Body();
                    case "LastLoginTime": return self.LastLoginTime();
                    case "PasswordExpirationTime": return self.PasswordExpirationTime();
                    case "PasswordChangeTime": return self.PasswordChangeTime();
                    case "NumberOfLogins": return self.NumberOfLogins();
                    case "NumberOfDenial": return self.NumberOfDenial();
                    case "TenantManager": return self.TenantManager();
                    case "ServiceManager": return self.ServiceManager();
                    case "Disabled": return self.Disabled();
                    case "Lockout": return self.Lockout();
                    case "LockoutCounter": return self.LockoutCounter();
                    case "Developer": return self.Developer();
                    case "UserSettings": return self.UserSettings();
                    case "ApiKey": return self.ApiKey();
                    case "LdapSearchRoot": return self.LdapSearchRoot();
                    case "SynchronizedTime": return self.SynchronizedTime();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static UsersGroupByCollection TenantId(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_TenantId(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static UsersGroupByCollection UserId(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_UserId(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static UsersGroupByCollection Ver(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Ver(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static UsersGroupByCollection LoginId(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_LoginId(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static UsersGroupByCollection GlobalId(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[GlobalId]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_GlobalId(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[GlobalId]", tableName: tableName);
        }

        public static UsersGroupByCollection Name(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Name]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Name(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Name]", tableName: tableName);
        }

        public static UsersGroupByCollection UserCode(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UserCode]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_UserCode(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UserCode]", tableName: tableName);
        }

        public static UsersGroupByCollection Password(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Password]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Password(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Password]", tableName: tableName);
        }

        public static UsersGroupByCollection LastName(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LastName]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_LastName(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LastName]", tableName: tableName);
        }

        public static UsersGroupByCollection FirstName(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[FirstName]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_FirstName(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[FirstName]", tableName: tableName);
        }

        public static UsersGroupByCollection Birthday(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Birthday]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Birthday(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Birthday]", tableName: tableName);
        }

        public static UsersGroupByCollection Gender(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Gender]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Gender(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Gender]", tableName: tableName);
        }

        public static UsersGroupByCollection Language(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Language]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Language(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Language]", tableName: tableName);
        }

        public static UsersGroupByCollection TimeZone(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[TimeZone]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_TimeZone(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[TimeZone]", tableName: tableName);
        }

        public static UsersGroupByCollection DeptCode(
            this UsersGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptCode]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_DeptCode(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptCode]", tableName: tableName);
        }

        public static UsersGroupByCollection DeptId(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_DeptId(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static UsersGroupByCollection Dept(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Dept(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static UsersGroupByCollection FirstAndLastNameOrder(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[FirstAndLastNameOrder]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_FirstAndLastNameOrder(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[FirstAndLastNameOrder]", tableName: tableName);
        }

        public static UsersGroupByCollection Body(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Body(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static UsersGroupByCollection LastLoginTime(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LastLoginTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_LastLoginTime(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LastLoginTime]", tableName: tableName);
        }

        public static UsersGroupByCollection PasswordExpirationTime(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[PasswordExpirationTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_PasswordExpirationTime(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[PasswordExpirationTime]", tableName: tableName);
        }

        public static UsersGroupByCollection PasswordChangeTime(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[PasswordChangeTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_PasswordChangeTime(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[PasswordChangeTime]", tableName: tableName);
        }

        public static UsersGroupByCollection NumberOfLogins(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[NumberOfLogins]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_NumberOfLogins(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[NumberOfLogins]", tableName: tableName);
        }

        public static UsersGroupByCollection NumberOfDenial(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[NumberOfDenial]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_NumberOfDenial(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[NumberOfDenial]", tableName: tableName);
        }

        public static UsersGroupByCollection TenantManager(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[TenantManager]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_TenantManager(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[TenantManager]", tableName: tableName);
        }

        public static UsersGroupByCollection ServiceManager(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[ServiceManager]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_ServiceManager(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[ServiceManager]", tableName: tableName);
        }

        public static UsersGroupByCollection Disabled(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Disabled]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Disabled(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Disabled]", tableName: tableName);
        }

        public static UsersGroupByCollection Lockout(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Lockout]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Lockout(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Lockout]", tableName: tableName);
        }

        public static UsersGroupByCollection LockoutCounter(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LockoutCounter]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_LockoutCounter(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LockoutCounter]", tableName: tableName);
        }

        public static UsersGroupByCollection Developer(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Developer]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Developer(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Developer]", tableName: tableName);
        }

        public static UsersGroupByCollection UserSettings(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UserSettings]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_UserSettings(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UserSettings]", tableName: tableName);
        }

        public static UsersGroupByCollection ApiKey(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[ApiKey]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_ApiKey(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[ApiKey]", tableName: tableName);
        }

        public static UsersGroupByCollection LdapSearchRoot(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LdapSearchRoot]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_LdapSearchRoot(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[LdapSearchRoot]", tableName: tableName);
        }

        public static UsersGroupByCollection SynchronizedTime(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[SynchronizedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_SynchronizedTime(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[SynchronizedTime]", tableName: tableName);
        }

        public static UsersGroupByCollection Comments(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Comments(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static UsersGroupByCollection Creator(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Creator(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static UsersGroupByCollection Updator(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_Updator(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static UsersGroupByCollection CreatedTime(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static UsersGroupByCollection UpdatedTime(
            this UsersGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Users_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static UsersHavingCollection UsersCount(
            this UsersHavingCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static UsersHavingCollection CreatedTime(
            this UsersHavingCollection self,
            string tableName = "Users",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static UsersHavingCollection UpdatedTime(
            this UsersHavingCollection self,
            string tableName = "Users",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static UsersOrderByCollection TenantId(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection UserId(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Ver(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection LoginId(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection GlobalId(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GlobalId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Name(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Name]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection UserCode(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserCode]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Password(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Password]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection LastName(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LastName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection FirstName(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FirstName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Birthday(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Birthday]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Gender(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Gender]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Language(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Language]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection TimeZone(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TimeZone]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection DeptCode(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptCode]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection DeptId(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Dept(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection FirstAndLastNameOrder(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FirstAndLastNameOrder]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Body(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection LastLoginTime(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LastLoginTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection PasswordExpirationTime(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[PasswordExpirationTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection PasswordChangeTime(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[PasswordChangeTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection NumberOfLogins(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[NumberOfLogins]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection NumberOfDenial(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[NumberOfDenial]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection TenantManager(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantManager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection ServiceManager(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ServiceManager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Disabled(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Disabled]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Lockout(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Lockout]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection LockoutCounter(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LockoutCounter]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Developer(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Developer]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection UserSettings(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserSettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection ApiKey(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ApiKey]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection LdapSearchRoot(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LdapSearchRoot]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection SynchronizedTime(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SynchronizedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Comments(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Creator(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection Updator(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection CreatedTime(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection UpdatedTime(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_UserId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_LoginId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_GlobalId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GlobalId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Name(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Name]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_UserCode(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserCode]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Password(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Password]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_LastName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LastName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_FirstName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FirstName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Birthday(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Birthday]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Gender(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Gender]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Language(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Language]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_TimeZone(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TimeZone]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_DeptCode(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptCode]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_DeptId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Dept(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_FirstAndLastNameOrder(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FirstAndLastNameOrder]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_LastLoginTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LastLoginTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_PasswordExpirationTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[PasswordExpirationTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_PasswordChangeTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[PasswordChangeTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_NumberOfLogins(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[NumberOfLogins]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_NumberOfDenial(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[NumberOfDenial]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_TenantManager(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantManager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_ServiceManager(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ServiceManager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Disabled(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Disabled]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Lockout(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Lockout]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_LockoutCounter(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LockoutCounter]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Developer(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Developer]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_UserSettings(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserSettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_ApiKey(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ApiKey]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_LdapSearchRoot(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LdapSearchRoot]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_SynchronizedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SynchronizedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Users_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static UsersOrderByCollection UsersCount(
            this UsersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static UsersParamCollection TenantId(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection UserId(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_UserId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Ver(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection LoginId(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_LoginId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection GlobalId(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GlobalId]",
                    name: "GlobalId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_GlobalId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GlobalId]",
                    name: "GlobalId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Name(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Name]",
                    name: "Name",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Name(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Name]",
                    name: "Name",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection UserCode(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserCode]",
                    name: "UserCode",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_UserCode(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserCode]",
                    name: "UserCode",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Password(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Password]",
                    name: "Password",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Password(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Password]",
                    name: "Password",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection LastName(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LastName]",
                    name: "LastName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_LastName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LastName]",
                    name: "LastName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection FirstName(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FirstName]",
                    name: "FirstName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_FirstName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FirstName]",
                    name: "FirstName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Birthday(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Birthday]",
                    name: "Birthday",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Birthday(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Birthday]",
                    name: "Birthday",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Gender(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Gender]",
                    name: "Gender",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Gender(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Gender]",
                    name: "Gender",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Language(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Language]",
                    name: "Language",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Language(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Language]",
                    name: "Language",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection TimeZone(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TimeZone]",
                    name: "TimeZone",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_TimeZone(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TimeZone]",
                    name: "TimeZone",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection DeptId(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_DeptId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection FirstAndLastNameOrder(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FirstAndLastNameOrder]",
                    name: "FirstAndLastNameOrder",
                    value: value.ToInt(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_FirstAndLastNameOrder(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FirstAndLastNameOrder]",
                    name: "FirstAndLastNameOrder",
                    value: value.ToInt(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Body(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection LastLoginTime(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LastLoginTime]",
                    name: "LastLoginTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_LastLoginTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LastLoginTime]",
                    name: "LastLoginTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection PasswordExpirationTime(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[PasswordExpirationTime]",
                    name: "PasswordExpirationTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_PasswordExpirationTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[PasswordExpirationTime]",
                    name: "PasswordExpirationTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection PasswordChangeTime(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[PasswordChangeTime]",
                    name: "PasswordChangeTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_PasswordChangeTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[PasswordChangeTime]",
                    name: "PasswordChangeTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection NumberOfLogins(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[NumberOfLogins]",
                    name: "NumberOfLogins",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_NumberOfLogins(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[NumberOfLogins]",
                    name: "NumberOfLogins",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection NumberOfDenial(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[NumberOfDenial]",
                    name: "NumberOfDenial",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_NumberOfDenial(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[NumberOfDenial]",
                    name: "NumberOfDenial",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection TenantManager(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantManager]",
                    name: "TenantManager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_TenantManager(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantManager]",
                    name: "TenantManager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection ServiceManager(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ServiceManager]",
                    name: "ServiceManager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_ServiceManager(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ServiceManager]",
                    name: "ServiceManager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Disabled(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Disabled]",
                    name: "Disabled",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Disabled(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Disabled]",
                    name: "Disabled",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Lockout(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Lockout]",
                    name: "Lockout",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Lockout(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Lockout]",
                    name: "Lockout",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection LockoutCounter(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LockoutCounter]",
                    name: "LockoutCounter",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_LockoutCounter(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LockoutCounter]",
                    name: "LockoutCounter",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Developer(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Developer]",
                    name: "Developer",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Developer(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Developer]",
                    name: "Developer",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection UserSettings(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserSettings]",
                    name: "UserSettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_UserSettings(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserSettings]",
                    name: "UserSettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection ApiKey(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ApiKey]",
                    name: "ApiKey",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_ApiKey(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ApiKey]",
                    name: "ApiKey",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection LdapSearchRoot(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LdapSearchRoot]",
                    name: "LdapSearchRoot",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_LdapSearchRoot(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LdapSearchRoot]",
                    name: "LdapSearchRoot",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection SynchronizedTime(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SynchronizedTime]",
                    name: "SynchronizedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_SynchronizedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SynchronizedTime]",
                    name: "SynchronizedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Comments(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Creator(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection Updator(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection CreatedTime(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static UsersParamCollection UpdatedTime(
            this UsersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Users_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysColumnCollection LoginKeysColumn()
        {
            return new LoginKeysColumnCollection();
        }

        public class LoginKeysColumnCollection : SqlColumnCollection
        {
            public new LoginKeysColumnCollection Add(
                string columnBracket = null,
                string tableName = "LoginKeys",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static LoginKeysJoinCollection LoginKeysJoin()
        {
            return new LoginKeysJoinCollection();
        }

        public class LoginKeysJoinCollection : SqlJoinCollection
        {
            public LoginKeysJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static LoginKeysWhereCollection LoginKeysWhere()
        {
            return new LoginKeysWhereCollection();
        }

        public class LoginKeysWhereCollection : SqlWhereCollection
        {
            public new LoginKeysWhereCollection Add(
                string tableName = "LoginKeys",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static LoginKeysGroupByCollection LoginKeysGroupBy()
        {
            return new LoginKeysGroupByCollection();
        }

        public class LoginKeysGroupByCollection : SqlGroupByCollection
        {
            public new LoginKeysGroupByCollection Add(
                string columnBracket, string tableName = "LoginKeys")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static LoginKeysHavingCollection LoginKeysHaving()
        {
            return new LoginKeysHavingCollection();
        }

        public class LoginKeysHavingCollection : SqlHavingCollection
        {
            public LoginKeysHavingCollection Add(
                string columnBracket,
                string tableName = "LoginKeys",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static LoginKeysOrderByCollection LoginKeysOrderBy()
        {
            return new LoginKeysOrderByCollection();
        }

        public class LoginKeysOrderByCollection : SqlOrderByCollection
        {
            public new LoginKeysOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "LoginKeys",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static LoginKeysParamCollection LoginKeysParam()
        {
            return new LoginKeysParamCollection();
        }

        public class LoginKeysParamCollection : SqlParamCollection
        {
            public new LoginKeysParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static LoginKeysColumnCollection LoginKeysColumn(
            this LoginKeysColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "LoginId":
                    return self.LoginId(_as: _as, function: function);
                case "Key":
                    return self.Key(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "TenantNames":
                    return self.TenantNames(_as: _as, function: function);
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "UserId":
                    return self.UserId(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static LoginKeysColumnCollection LoginId(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_LoginId(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "LoginId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LoginId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection Key(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Key",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Key]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_Key(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Key",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Key]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection Ver(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_Ver(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection TenantNames(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "TenantNames",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantNames]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_TenantNames(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "TenantNames",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantNames]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection TenantId(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_TenantId(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection UserId(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_UserId(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection Comments(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_Comments(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection Creator(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_Creator(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection Updator(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_Updator(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection CreatedTime(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection UpdatedTime(
            this LoginKeysColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection LoginKeys_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "LoginKeys",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LoginKeysColumnCollection LoginKeysCount(
            this LoginKeysColumnCollection self,
            string _as = "LoginKeysCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static LoginKeysWhereCollection LoginId(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_LoginId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LoginId]" },
                    tableName: tableName,
                    name: "LoginId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection Key(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Key]" },
                    tableName: tableName,
                    name: "Key",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_Key(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Key]" },
                    tableName: tableName,
                    name: "Key",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection Ver(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection TenantNames(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantNames]" },
                    tableName: tableName,
                    name: "TenantNames",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_TenantNames(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantNames]" },
                    tableName: tableName,
                    name: "TenantNames",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection TenantId(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection UserId(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_UserId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection Comments(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection Creator(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection Updator(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection CreatedTime(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection UpdatedTime(
            this LoginKeysWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection LoginKeys_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LoginKeysWhereCollection Ver_In(
            this LoginKeysWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "LoginKeys",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LoginKeysWhereCollection TenantId_In(
            this LoginKeysWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "LoginKeys",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LoginKeysWhereCollection UserId_In(
            this LoginKeysWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "LoginKeys",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LoginKeysWhereCollection Creator_In(
            this LoginKeysWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "LoginKeys",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LoginKeysWhereCollection Updator_In(
            this LoginKeysWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "LoginKeys",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LoginKeysWhereCollection Ver_Between(
            this LoginKeysWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection LoginKeys_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LoginKeysWhereCollection TenantId_Between(
            this LoginKeysWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection LoginKeys_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LoginKeysWhereCollection UserId_Between(
            this LoginKeysWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection LoginKeys_UserId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LoginKeysWhereCollection Creator_Between(
            this LoginKeysWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection LoginKeys_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LoginKeysWhereCollection Updator_Between(
            this LoginKeysWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection LoginKeys_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LoginKeysWhereCollection CreatedTime_Between(
            this LoginKeysWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection LoginKeys_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static LoginKeysWhereCollection UpdatedTime_Between(
            this LoginKeysWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection LoginKeys_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "LoginKeys",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static LoginKeysWhereCollection Sub(
            this LoginKeysWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static LoginKeysWhereCollection Or(
            this LoginKeysWhereCollection self,
            LoginKeysWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static LoginKeysGroupByCollection LoginKeysGroupBy(
            this LoginKeysGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "LoginId": return self.LoginId();
                    case "Key": return self.Key();
                    case "Ver": return self.Ver();
                    case "TenantNames": return self.TenantNames();
                    case "TenantId": return self.TenantId();
                    case "UserId": return self.UserId();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static LoginKeysGroupByCollection LoginId(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_LoginId(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[LoginId]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection Key(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Key]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_Key(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Key]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection Ver(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_Ver(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection TenantNames(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[TenantNames]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_TenantNames(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[TenantNames]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection TenantId(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_TenantId(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection UserId(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_UserId(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection Comments(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_Comments(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection Creator(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_Creator(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection Updator(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_Updator(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection CreatedTime(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_CreatedTime(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static LoginKeysGroupByCollection UpdatedTime(
            this LoginKeysGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection LoginKeys_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "LoginKeys")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static LoginKeysHavingCollection LoginKeysCount(
            this LoginKeysHavingCollection self,
            object value = null,
            string tableName = "LoginKeys",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static LoginKeysHavingCollection CreatedTime(
            this LoginKeysHavingCollection self,
            string tableName = "LoginKeys",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static LoginKeysHavingCollection UpdatedTime(
            this LoginKeysHavingCollection self,
            string tableName = "LoginKeys",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static LoginKeysOrderByCollection LoginId(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection Key(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Key]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection Ver(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection TenantNames(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantNames]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection TenantId(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection UserId(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection Comments(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection Creator(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection Updator(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection CreatedTime(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection UpdatedTime(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_LoginId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LoginId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_Key(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Key]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_TenantNames(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantNames]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_UserId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection LoginKeys_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "LoginKeys",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LoginKeysOrderByCollection LoginKeysCount(
            this LoginKeysOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static LoginKeysParamCollection LoginId(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_LoginId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LoginId]",
                    name: "LoginId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection Key(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Key]",
                    name: "Key",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_Key(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Key]",
                    name: "Key",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection Ver(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection TenantNames(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantNames]",
                    name: "TenantNames",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_TenantNames(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantNames]",
                    name: "TenantNames",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection TenantId(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection UserId(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_UserId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection Comments(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection Creator(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection Updator(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection CreatedTime(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LoginKeysParamCollection UpdatedTime(
            this LoginKeysParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection LoginKeys_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesColumnCollection MailAddressesColumn()
        {
            return new MailAddressesColumnCollection();
        }

        public class MailAddressesColumnCollection : SqlColumnCollection
        {
            public new MailAddressesColumnCollection Add(
                string columnBracket = null,
                string tableName = "MailAddresses",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static MailAddressesJoinCollection MailAddressesJoin()
        {
            return new MailAddressesJoinCollection();
        }

        public class MailAddressesJoinCollection : SqlJoinCollection
        {
            public MailAddressesJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static MailAddressesWhereCollection MailAddressesWhere()
        {
            return new MailAddressesWhereCollection();
        }

        public class MailAddressesWhereCollection : SqlWhereCollection
        {
            public new MailAddressesWhereCollection Add(
                string tableName = "MailAddresses",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static MailAddressesGroupByCollection MailAddressesGroupBy()
        {
            return new MailAddressesGroupByCollection();
        }

        public class MailAddressesGroupByCollection : SqlGroupByCollection
        {
            public new MailAddressesGroupByCollection Add(
                string columnBracket, string tableName = "MailAddresses")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static MailAddressesHavingCollection MailAddressesHaving()
        {
            return new MailAddressesHavingCollection();
        }

        public class MailAddressesHavingCollection : SqlHavingCollection
        {
            public MailAddressesHavingCollection Add(
                string columnBracket,
                string tableName = "MailAddresses",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static MailAddressesOrderByCollection MailAddressesOrderBy()
        {
            return new MailAddressesOrderByCollection();
        }

        public class MailAddressesOrderByCollection : SqlOrderByCollection
        {
            public new MailAddressesOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "MailAddresses",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static MailAddressesParamCollection MailAddressesParam()
        {
            return new MailAddressesParamCollection();
        }

        public class MailAddressesParamCollection : SqlParamCollection
        {
            public new MailAddressesParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string MailAddresses_MailAddress_WhereLike(
            string tableName = "MailAddresses",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[MailAddress] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static MailAddressesColumnCollection MailAddressesColumn(
            this MailAddressesColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "OwnerId":
                    return self.OwnerId(_as: _as, function: function);
                case "OwnerType":
                    return self.OwnerType(_as: _as, function: function);
                case "MailAddressId":
                    return self.MailAddressId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "MailAddress":
                    return self.MailAddress(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static MailAddressesColumnCollection OwnerId(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "OwnerId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OwnerId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_OwnerId(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "OwnerId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OwnerId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection OwnerType(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "OwnerType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OwnerType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_OwnerType(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "OwnerType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OwnerType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection MailAddressId(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "MailAddressId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddressId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_MailAddressId(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "MailAddressId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddressId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection Ver(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_Ver(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection MailAddress(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "MailAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_MailAddress(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "MailAddress",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[MailAddress]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection Comments(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_Comments(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection Creator(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_Creator(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection Updator(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_Updator(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection CreatedTime(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection UpdatedTime(
            this MailAddressesColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection MailAddresses_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "MailAddresses",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static MailAddressesColumnCollection MailAddressesCount(
            this MailAddressesColumnCollection self,
            string _as = "MailAddressesCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static MailAddressesWhereCollection OwnerId(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_OwnerId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection OwnerType(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerType]" },
                    tableName: tableName,
                    name: "OwnerType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_OwnerType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerType]" },
                    tableName: tableName,
                    name: "OwnerType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection MailAddressId(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddressId]" },
                    tableName: tableName,
                    name: "MailAddressId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_MailAddressId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddressId]" },
                    tableName: tableName,
                    name: "MailAddressId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection Ver(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection MailAddress(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddress]" },
                    tableName: tableName,
                    name: "MailAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_MailAddress(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddress]" },
                    tableName: tableName,
                    name: "MailAddress",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection Comments(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection Creator(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection Updator(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection CreatedTime(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection UpdatedTime(
            this MailAddressesWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection MailAddresses_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static MailAddressesWhereCollection OwnerId_In(
            this MailAddressesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "MailAddresses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static MailAddressesWhereCollection MailAddressId_In(
            this MailAddressesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "MailAddresses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[MailAddressId]" },
                    tableName: tableName,
                    name: "MailAddressId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[MailAddressId]" },
                    tableName: tableName,
                    name: "MailAddressId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static MailAddressesWhereCollection Ver_In(
            this MailAddressesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "MailAddresses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static MailAddressesWhereCollection Creator_In(
            this MailAddressesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "MailAddresses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static MailAddressesWhereCollection Updator_In(
            this MailAddressesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "MailAddresses",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static MailAddressesWhereCollection OwnerId_Between(
            this MailAddressesWhereCollection self,
            long begin,
            long end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection MailAddresses_OwnerId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static MailAddressesWhereCollection MailAddressId_Between(
            this MailAddressesWhereCollection self,
            long begin,
            long end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddressId]" },
                    tableName: tableName,
                    name: "MailAddressId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection MailAddresses_MailAddressId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[MailAddressId]" },
                    tableName: tableName,
                    name: "MailAddressId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static MailAddressesWhereCollection Ver_Between(
            this MailAddressesWhereCollection self,
            int begin,
            int end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection MailAddresses_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static MailAddressesWhereCollection Creator_Between(
            this MailAddressesWhereCollection self,
            int begin,
            int end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection MailAddresses_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static MailAddressesWhereCollection Updator_Between(
            this MailAddressesWhereCollection self,
            int begin,
            int end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection MailAddresses_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static MailAddressesWhereCollection CreatedTime_Between(
            this MailAddressesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection MailAddresses_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static MailAddressesWhereCollection UpdatedTime_Between(
            this MailAddressesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection MailAddresses_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "MailAddresses",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static MailAddressesWhereCollection Sub(
            this MailAddressesWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static MailAddressesWhereCollection Or(
            this MailAddressesWhereCollection self,
            MailAddressesWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static MailAddressesGroupByCollection MailAddressesGroupBy(
            this MailAddressesGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "OwnerId": return self.OwnerId();
                    case "OwnerType": return self.OwnerType();
                    case "MailAddressId": return self.MailAddressId();
                    case "Ver": return self.Ver();
                    case "MailAddress": return self.MailAddress();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static MailAddressesGroupByCollection OwnerId(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[OwnerId]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_OwnerId(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[OwnerId]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection OwnerType(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[OwnerType]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_OwnerType(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[OwnerType]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection MailAddressId(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[MailAddressId]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_MailAddressId(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[MailAddressId]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection Ver(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_Ver(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection MailAddress(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[MailAddress]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_MailAddress(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[MailAddress]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection Comments(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_Comments(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection Creator(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_Creator(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection Updator(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_Updator(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection CreatedTime(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_CreatedTime(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static MailAddressesGroupByCollection UpdatedTime(
            this MailAddressesGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection MailAddresses_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "MailAddresses")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static MailAddressesHavingCollection MailAddressesCount(
            this MailAddressesHavingCollection self,
            object value = null,
            string tableName = "MailAddresses",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static MailAddressesHavingCollection CreatedTime(
            this MailAddressesHavingCollection self,
            string tableName = "MailAddresses",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static MailAddressesHavingCollection UpdatedTime(
            this MailAddressesHavingCollection self,
            string tableName = "MailAddresses",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static MailAddressesOrderByCollection OwnerId(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OwnerId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection OwnerType(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OwnerType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection MailAddressId(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddressId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection Ver(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection MailAddress(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection Comments(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection Creator(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection Updator(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection CreatedTime(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection UpdatedTime(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_OwnerId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OwnerId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_OwnerType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OwnerType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_MailAddressId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddressId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_MailAddress(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[MailAddress]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection MailAddresses_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "MailAddresses",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static MailAddressesOrderByCollection MailAddressesCount(
            this MailAddressesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static MailAddressesParamCollection OwnerId(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OwnerId]",
                    name: "OwnerId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_OwnerId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OwnerId]",
                    name: "OwnerId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection OwnerType(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OwnerType]",
                    name: "OwnerType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_OwnerType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OwnerType]",
                    name: "OwnerType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection MailAddressId(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddressId]",
                    name: "MailAddressId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_MailAddressId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddressId]",
                    name: "MailAddressId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection Ver(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection MailAddress(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddress]",
                    name: "MailAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_MailAddress(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[MailAddress]",
                    name: "MailAddress",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection Comments(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection Creator(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection Updator(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection CreatedTime(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static MailAddressesParamCollection UpdatedTime(
            this MailAddressesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection MailAddresses_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsColumnCollection OutgoingMailsColumn()
        {
            return new OutgoingMailsColumnCollection();
        }

        public class OutgoingMailsColumnCollection : SqlColumnCollection
        {
            public new OutgoingMailsColumnCollection Add(
                string columnBracket = null,
                string tableName = "OutgoingMails",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static OutgoingMailsJoinCollection OutgoingMailsJoin()
        {
            return new OutgoingMailsJoinCollection();
        }

        public class OutgoingMailsJoinCollection : SqlJoinCollection
        {
            public OutgoingMailsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static OutgoingMailsWhereCollection OutgoingMailsWhere()
        {
            return new OutgoingMailsWhereCollection();
        }

        public class OutgoingMailsWhereCollection : SqlWhereCollection
        {
            public new OutgoingMailsWhereCollection Add(
                string tableName = "OutgoingMails",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static OutgoingMailsGroupByCollection OutgoingMailsGroupBy()
        {
            return new OutgoingMailsGroupByCollection();
        }

        public class OutgoingMailsGroupByCollection : SqlGroupByCollection
        {
            public new OutgoingMailsGroupByCollection Add(
                string columnBracket, string tableName = "OutgoingMails")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static OutgoingMailsHavingCollection OutgoingMailsHaving()
        {
            return new OutgoingMailsHavingCollection();
        }

        public class OutgoingMailsHavingCollection : SqlHavingCollection
        {
            public OutgoingMailsHavingCollection Add(
                string columnBracket,
                string tableName = "OutgoingMails",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static OutgoingMailsOrderByCollection OutgoingMailsOrderBy()
        {
            return new OutgoingMailsOrderByCollection();
        }

        public class OutgoingMailsOrderByCollection : SqlOrderByCollection
        {
            public new OutgoingMailsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "OutgoingMails",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static OutgoingMailsParamCollection OutgoingMailsParam()
        {
            return new OutgoingMailsParamCollection();
        }

        public class OutgoingMailsParamCollection : SqlParamCollection
        {
            public new OutgoingMailsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static OutgoingMailsColumnCollection OutgoingMailsColumn(
            this OutgoingMailsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "ReferenceType":
                    return self.ReferenceType(_as: _as, function: function);
                case "ReferenceId":
                    return self.ReferenceId(_as: _as, function: function);
                case "ReferenceVer":
                    return self.ReferenceVer(_as: _as, function: function);
                case "OutgoingMailId":
                    return self.OutgoingMailId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Host":
                    return self.Host(_as: _as, function: function);
                case "Port":
                    return self.Port(_as: _as, function: function);
                case "From":
                    return self.From(_as: _as, function: function);
                case "To":
                    return self.To(_as: _as, function: function);
                case "Cc":
                    return self.Cc(_as: _as, function: function);
                case "Bcc":
                    return self.Bcc(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "SentTime":
                    return self.SentTime(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static OutgoingMailsColumnCollection ReferenceType(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_ReferenceType(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection ReferenceId(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_ReferenceId(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection ReferenceVer(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "ReferenceVer",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceVer]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_ReferenceVer(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "ReferenceVer",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceVer]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection OutgoingMailId(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "OutgoingMailId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OutgoingMailId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_OutgoingMailId(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "OutgoingMailId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OutgoingMailId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Ver(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Ver(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Host(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Host",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Host]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Host(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Host",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Host]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Port(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Port",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Port]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Port(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Port",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Port]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection From(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "From",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[From]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_From(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "From",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[From]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection To(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "To",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[To]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_To(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "To",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[To]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Cc(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Cc",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Cc]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Cc(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Cc",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Cc]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Bcc(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Bcc",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Bcc]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Bcc(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Bcc",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Bcc]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Title(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Title(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Body(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Body(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection SentTime(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "SentTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SentTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_SentTime(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "SentTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SentTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Comments(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Comments(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Creator(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Creator(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection Updator(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_Updator(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection CreatedTime(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection UpdatedTime(
            this OutgoingMailsColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection OutgoingMails_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "OutgoingMails",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OutgoingMailsColumnCollection OutgoingMailsCount(
            this OutgoingMailsColumnCollection self,
            string _as = "OutgoingMailsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static OutgoingMailsWhereCollection ReferenceType(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_ReferenceType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection ReferenceId(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_ReferenceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection ReferenceVer(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceVer]" },
                    tableName: tableName,
                    name: "ReferenceVer",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_ReferenceVer(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceVer]" },
                    tableName: tableName,
                    name: "ReferenceVer",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection OutgoingMailId(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OutgoingMailId]" },
                    tableName: tableName,
                    name: "OutgoingMailId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_OutgoingMailId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OutgoingMailId]" },
                    tableName: tableName,
                    name: "OutgoingMailId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Ver(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Host(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Host]" },
                    tableName: tableName,
                    name: "Host",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Host(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Host]" },
                    tableName: tableName,
                    name: "Host",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Port(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Port]" },
                    tableName: tableName,
                    name: "Port",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Port(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Port]" },
                    tableName: tableName,
                    name: "Port",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection From(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[From]" },
                    tableName: tableName,
                    name: "From",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_From(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[From]" },
                    tableName: tableName,
                    name: "From",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection To(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[To]" },
                    tableName: tableName,
                    name: "To",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_To(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[To]" },
                    tableName: tableName,
                    name: "To",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Cc(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Cc]" },
                    tableName: tableName,
                    name: "Cc",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Cc(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Cc]" },
                    tableName: tableName,
                    name: "Cc",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Bcc(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Bcc]" },
                    tableName: tableName,
                    name: "Bcc",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Bcc(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Bcc]" },
                    tableName: tableName,
                    name: "Bcc",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Title(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Body(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection SentTime(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SentTime]" },
                    tableName: tableName,
                    name: "SentTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_SentTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SentTime]" },
                    tableName: tableName,
                    name: "SentTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Comments(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Creator(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection Updator(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection CreatedTime(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection UpdatedTime(
            this OutgoingMailsWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection OutgoingMails_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsWhereCollection ReferenceId_In(
            this OutgoingMailsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "OutgoingMails",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OutgoingMailsWhereCollection ReferenceVer_In(
            this OutgoingMailsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "OutgoingMails",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceVer]" },
                    tableName: tableName,
                    name: "ReferenceVer",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceVer]" },
                    tableName: tableName,
                    name: "ReferenceVer",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OutgoingMailsWhereCollection OutgoingMailId_In(
            this OutgoingMailsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "OutgoingMails",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[OutgoingMailId]" },
                    tableName: tableName,
                    name: "OutgoingMailId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[OutgoingMailId]" },
                    tableName: tableName,
                    name: "OutgoingMailId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OutgoingMailsWhereCollection Ver_In(
            this OutgoingMailsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "OutgoingMails",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OutgoingMailsWhereCollection Port_In(
            this OutgoingMailsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "OutgoingMails",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Port]" },
                    tableName: tableName,
                    name: "Port",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Port]" },
                    tableName: tableName,
                    name: "Port",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OutgoingMailsWhereCollection Creator_In(
            this OutgoingMailsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "OutgoingMails",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OutgoingMailsWhereCollection Updator_In(
            this OutgoingMailsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "OutgoingMails",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OutgoingMailsWhereCollection ReferenceId_Between(
            this OutgoingMailsWhereCollection self,
            long begin,
            long end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_ReferenceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection ReferenceVer_Between(
            this OutgoingMailsWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceVer]" },
                    tableName: tableName,
                    name: "ReferenceVer",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_ReferenceVer_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceVer]" },
                    tableName: tableName,
                    name: "ReferenceVer",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection OutgoingMailId_Between(
            this OutgoingMailsWhereCollection self,
            long begin,
            long end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OutgoingMailId]" },
                    tableName: tableName,
                    name: "OutgoingMailId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_OutgoingMailId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OutgoingMailId]" },
                    tableName: tableName,
                    name: "OutgoingMailId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection Ver_Between(
            this OutgoingMailsWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection Port_Between(
            this OutgoingMailsWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Port]" },
                    tableName: tableName,
                    name: "Port",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Port_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Port]" },
                    tableName: tableName,
                    name: "Port",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection Creator_Between(
            this OutgoingMailsWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection Updator_Between(
            this OutgoingMailsWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection SentTime_Between(
            this OutgoingMailsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SentTime]" },
                    tableName: tableName,
                    name: "SentTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_SentTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SentTime]" },
                    tableName: tableName,
                    name: "SentTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection CreatedTime_Between(
            this OutgoingMailsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection UpdatedTime_Between(
            this OutgoingMailsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection OutgoingMails_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "OutgoingMails",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static OutgoingMailsWhereCollection Sub(
            this OutgoingMailsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static OutgoingMailsWhereCollection Or(
            this OutgoingMailsWhereCollection self,
            OutgoingMailsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static OutgoingMailsGroupByCollection OutgoingMailsGroupBy(
            this OutgoingMailsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "ReferenceType": return self.ReferenceType();
                    case "ReferenceId": return self.ReferenceId();
                    case "ReferenceVer": return self.ReferenceVer();
                    case "OutgoingMailId": return self.OutgoingMailId();
                    case "Ver": return self.Ver();
                    case "Host": return self.Host();
                    case "Port": return self.Port();
                    case "From": return self.From();
                    case "To": return self.To();
                    case "Cc": return self.Cc();
                    case "Bcc": return self.Bcc();
                    case "Title": return self.Title();
                    case "Body": return self.Body();
                    case "SentTime": return self.SentTime();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static OutgoingMailsGroupByCollection ReferenceType(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_ReferenceType(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection ReferenceId(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_ReferenceId(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection ReferenceVer(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[ReferenceVer]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_ReferenceVer(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[ReferenceVer]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection OutgoingMailId(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[OutgoingMailId]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_OutgoingMailId(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[OutgoingMailId]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Ver(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Ver(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Host(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Host]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Host(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Host]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Port(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Port]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Port(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Port]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection From(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[From]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_From(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[From]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection To(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[To]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_To(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[To]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Cc(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Cc]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Cc(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Cc]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Bcc(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Bcc]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Bcc(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Bcc]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Title(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Title(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Body(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Body(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection SentTime(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[SentTime]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_SentTime(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[SentTime]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Comments(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Comments(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Creator(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Creator(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection Updator(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_Updator(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection CreatedTime(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_CreatedTime(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static OutgoingMailsGroupByCollection UpdatedTime(
            this OutgoingMailsGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection OutgoingMails_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "OutgoingMails")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static OutgoingMailsHavingCollection OutgoingMailsCount(
            this OutgoingMailsHavingCollection self,
            object value = null,
            string tableName = "OutgoingMails",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static OutgoingMailsHavingCollection CreatedTime(
            this OutgoingMailsHavingCollection self,
            string tableName = "OutgoingMails",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static OutgoingMailsHavingCollection UpdatedTime(
            this OutgoingMailsHavingCollection self,
            string tableName = "OutgoingMails",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static OutgoingMailsOrderByCollection ReferenceType(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection ReferenceId(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection ReferenceVer(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceVer]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection OutgoingMailId(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OutgoingMailId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Ver(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Host(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Host]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Port(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Port]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection From(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[From]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection To(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[To]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Cc(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Cc]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Bcc(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Bcc]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Title(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Body(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection SentTime(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SentTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Comments(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Creator(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection Updator(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection CreatedTime(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection UpdatedTime(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_ReferenceType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_ReferenceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_ReferenceVer(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceVer]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_OutgoingMailId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OutgoingMailId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Host(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Host]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Port(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Port]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_From(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[From]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_To(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[To]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Cc(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Cc]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Bcc(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Bcc]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_SentTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SentTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection OutgoingMails_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "OutgoingMails",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OutgoingMailsOrderByCollection OutgoingMailsCount(
            this OutgoingMailsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static OutgoingMailsParamCollection ReferenceType(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_ReferenceType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection ReferenceId(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_ReferenceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection ReferenceVer(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceVer]",
                    name: "ReferenceVer",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_ReferenceVer(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceVer]",
                    name: "ReferenceVer",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection OutgoingMailId(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OutgoingMailId]",
                    name: "OutgoingMailId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_OutgoingMailId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OutgoingMailId]",
                    name: "OutgoingMailId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Ver(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Host(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Host]",
                    name: "Host",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Host(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Host]",
                    name: "Host",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Port(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Port]",
                    name: "Port",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Port(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Port]",
                    name: "Port",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection From(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[From]",
                    name: "From",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_From(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[From]",
                    name: "From",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection To(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[To]",
                    name: "To",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_To(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[To]",
                    name: "To",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Cc(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Cc]",
                    name: "Cc",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Cc(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Cc]",
                    name: "Cc",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Bcc(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Bcc]",
                    name: "Bcc",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Bcc(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Bcc]",
                    name: "Bcc",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Title(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Body(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection SentTime(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SentTime]",
                    name: "SentTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_SentTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SentTime]",
                    name: "SentTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Comments(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Creator(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection Updator(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection CreatedTime(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OutgoingMailsParamCollection UpdatedTime(
            this OutgoingMailsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection OutgoingMails_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesColumnCollection SearchIndexesColumn()
        {
            return new SearchIndexesColumnCollection();
        }

        public class SearchIndexesColumnCollection : SqlColumnCollection
        {
            public new SearchIndexesColumnCollection Add(
                string columnBracket = null,
                string tableName = "SearchIndexes",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static SearchIndexesJoinCollection SearchIndexesJoin()
        {
            return new SearchIndexesJoinCollection();
        }

        public class SearchIndexesJoinCollection : SqlJoinCollection
        {
            public SearchIndexesJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static SearchIndexesWhereCollection SearchIndexesWhere()
        {
            return new SearchIndexesWhereCollection();
        }

        public class SearchIndexesWhereCollection : SqlWhereCollection
        {
            public new SearchIndexesWhereCollection Add(
                string tableName = "SearchIndexes",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static SearchIndexesGroupByCollection SearchIndexesGroupBy()
        {
            return new SearchIndexesGroupByCollection();
        }

        public class SearchIndexesGroupByCollection : SqlGroupByCollection
        {
            public new SearchIndexesGroupByCollection Add(
                string columnBracket, string tableName = "SearchIndexes")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static SearchIndexesHavingCollection SearchIndexesHaving()
        {
            return new SearchIndexesHavingCollection();
        }

        public class SearchIndexesHavingCollection : SqlHavingCollection
        {
            public SearchIndexesHavingCollection Add(
                string columnBracket,
                string tableName = "SearchIndexes",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static SearchIndexesOrderByCollection SearchIndexesOrderBy()
        {
            return new SearchIndexesOrderByCollection();
        }

        public class SearchIndexesOrderByCollection : SqlOrderByCollection
        {
            public new SearchIndexesOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "SearchIndexes",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static SearchIndexesParamCollection SearchIndexesParam()
        {
            return new SearchIndexesParamCollection();
        }

        public class SearchIndexesParamCollection : SqlParamCollection
        {
            public new SearchIndexesParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static SearchIndexesColumnCollection SearchIndexesColumn(
            this SearchIndexesColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "Word":
                    return self.Word(_as: _as, function: function);
                case "ReferenceId":
                    return self.ReferenceId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Priority":
                    return self.Priority(_as: _as, function: function);
                case "ReferenceType":
                    return self.ReferenceType(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Subset":
                    return self.Subset(_as: _as, function: function);
                case "InheritPermission":
                    return self.InheritPermission(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static SearchIndexesColumnCollection Word(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Word",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Word]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Word(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Word",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Word]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection ReferenceId(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_ReferenceId(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection Ver(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Ver(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection Priority(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Priority",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Priority]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Priority(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Priority",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Priority]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection ReferenceType(
            this SearchIndexesColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_ReferenceType(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection Title(
            this SearchIndexesColumnCollection self,
            string tableName = "Items",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Title(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection Subset(
            this SearchIndexesColumnCollection self,
            string tableName = "Items",
            string columnName = "Subset",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Subset]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Subset(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Subset",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Subset]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection InheritPermission(
            this SearchIndexesColumnCollection self,
            string tableName = "Sites",
            string columnName = "InheritPermission",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InheritPermission]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_InheritPermission(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "InheritPermission",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InheritPermission]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection Comments(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Comments(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection Creator(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Creator(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection Updator(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_Updator(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection CreatedTime(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection UpdatedTime(
            this SearchIndexesColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection SearchIndexes_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "SearchIndexes",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SearchIndexesColumnCollection SearchIndexesCount(
            this SearchIndexesColumnCollection self,
            string _as = "SearchIndexesCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static SearchIndexesWhereCollection Word(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Word]" },
                    tableName: tableName,
                    name: "Word",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Word(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Word]" },
                    tableName: tableName,
                    name: "Word",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection ReferenceId(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_ReferenceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection Ver(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection Priority(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Priority]" },
                    tableName: tableName,
                    name: "Priority",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Priority(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Priority]" },
                    tableName: tableName,
                    name: "Priority",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection ReferenceType(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_ReferenceType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection Title(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection Subset(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Subset]" },
                    tableName: tableName,
                    name: "Subset",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Subset(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Subset]" },
                    tableName: tableName,
                    name: "Subset",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection InheritPermission(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_InheritPermission(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection Comments(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection Creator(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection Updator(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection CreatedTime(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection UpdatedTime(
            this SearchIndexesWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection SearchIndexes_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SearchIndexesWhereCollection ReferenceId_In(
            this SearchIndexesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "SearchIndexes",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SearchIndexesWhereCollection Ver_In(
            this SearchIndexesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SearchIndexes",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SearchIndexesWhereCollection Priority_In(
            this SearchIndexesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SearchIndexes",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Priority]" },
                    tableName: tableName,
                    name: "Priority",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Priority]" },
                    tableName: tableName,
                    name: "Priority",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SearchIndexesWhereCollection InheritPermission_In(
            this SearchIndexesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SearchIndexesWhereCollection Creator_In(
            this SearchIndexesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SearchIndexes",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SearchIndexesWhereCollection Updator_In(
            this SearchIndexesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "SearchIndexes",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SearchIndexesWhereCollection ReferenceId_Between(
            this SearchIndexesWhereCollection self,
            long begin,
            long end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_ReferenceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection Ver_Between(
            this SearchIndexesWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection Priority_Between(
            this SearchIndexesWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Priority]" },
                    tableName: tableName,
                    name: "Priority",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Priority_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Priority]" },
                    tableName: tableName,
                    name: "Priority",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection InheritPermission_Between(
            this SearchIndexesWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_InheritPermission_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection Creator_Between(
            this SearchIndexesWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection Updator_Between(
            this SearchIndexesWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection CreatedTime_Between(
            this SearchIndexesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection UpdatedTime_Between(
            this SearchIndexesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection SearchIndexes_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "SearchIndexes",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SearchIndexesWhereCollection Sub(
            this SearchIndexesWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static SearchIndexesWhereCollection Or(
            this SearchIndexesWhereCollection self,
            SearchIndexesWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static SearchIndexesGroupByCollection SearchIndexesGroupBy(
            this SearchIndexesGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "Word": return self.Word();
                    case "ReferenceId": return self.ReferenceId();
                    case "Ver": return self.Ver();
                    case "Priority": return self.Priority();
                    case "ReferenceType": return self.ReferenceType();
                    case "Title": return self.Title();
                    case "Subset": return self.Subset();
                    case "InheritPermission": return self.InheritPermission();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static SearchIndexesGroupByCollection Word(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Word]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Word(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Word]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection ReferenceId(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_ReferenceId(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection Ver(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Ver(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection Priority(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Priority]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Priority(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Priority]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection ReferenceType(
            this SearchIndexesGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_ReferenceType(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection Title(
            this SearchIndexesGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Title(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection Subset(
            this SearchIndexesGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Subset]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Subset(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Subset]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection InheritPermission(
            this SearchIndexesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[InheritPermission]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_InheritPermission(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[InheritPermission]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection Comments(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Comments(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection Creator(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Creator(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection Updator(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_Updator(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection CreatedTime(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_CreatedTime(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SearchIndexesGroupByCollection UpdatedTime(
            this SearchIndexesGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection SearchIndexes_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "SearchIndexes")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SearchIndexesHavingCollection SearchIndexesCount(
            this SearchIndexesHavingCollection self,
            object value = null,
            string tableName = "SearchIndexes",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static SearchIndexesHavingCollection Priority(
            this SearchIndexesHavingCollection self,
            string tableName = "SearchIndexes",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "Priority",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static SearchIndexesHavingCollection CreatedTime(
            this SearchIndexesHavingCollection self,
            string tableName = "SearchIndexes",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static SearchIndexesHavingCollection UpdatedTime(
            this SearchIndexesHavingCollection self,
            string tableName = "SearchIndexes",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static SearchIndexesOrderByCollection Word(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Word]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection ReferenceId(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection Ver(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection Priority(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Priority]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection ReferenceType(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection Title(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection Subset(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Subset]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection InheritPermission(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InheritPermission]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection Comments(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection Creator(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection Updator(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection CreatedTime(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection UpdatedTime(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Word(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Word]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_ReferenceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Priority(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Priority]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_ReferenceType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Subset(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Subset]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_InheritPermission(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InheritPermission]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection SearchIndexes_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "SearchIndexes",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SearchIndexesOrderByCollection SearchIndexesCount(
            this SearchIndexesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static SearchIndexesParamCollection Word(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Word]",
                    name: "Word",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_Word(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Word]",
                    name: "Word",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection ReferenceId(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_ReferenceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection Ver(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection Priority(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Priority]",
                    name: "Priority",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_Priority(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Priority]",
                    name: "Priority",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection Comments(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection Creator(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection Updator(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection CreatedTime(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SearchIndexesParamCollection UpdatedTime(
            this SearchIndexesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection SearchIndexes_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsColumnCollection ItemsColumn()
        {
            return new ItemsColumnCollection();
        }

        public class ItemsColumnCollection : SqlColumnCollection
        {
            public new ItemsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Items",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static ItemsJoinCollection ItemsJoin()
        {
            return new ItemsJoinCollection();
        }

        public class ItemsJoinCollection : SqlJoinCollection
        {
            public ItemsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static ItemsWhereCollection ItemsWhere()
        {
            return new ItemsWhereCollection();
        }

        public class ItemsWhereCollection : SqlWhereCollection
        {
            public new ItemsWhereCollection Add(
                string tableName = "Items",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static ItemsGroupByCollection ItemsGroupBy()
        {
            return new ItemsGroupByCollection();
        }

        public class ItemsGroupByCollection : SqlGroupByCollection
        {
            public new ItemsGroupByCollection Add(
                string columnBracket, string tableName = "Items")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static ItemsHavingCollection ItemsHaving()
        {
            return new ItemsHavingCollection();
        }

        public class ItemsHavingCollection : SqlHavingCollection
        {
            public ItemsHavingCollection Add(
                string columnBracket,
                string tableName = "Items",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static ItemsOrderByCollection ItemsOrderBy()
        {
            return new ItemsOrderByCollection();
        }

        public class ItemsOrderByCollection : SqlOrderByCollection
        {
            public new ItemsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Items",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static ItemsParamCollection ItemsParam()
        {
            return new ItemsParamCollection();
        }

        public class ItemsParamCollection : SqlParamCollection
        {
            public new ItemsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Items_Title_WhereLike(
            string tableName = "Items",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Title] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Items_FullText_WhereLike(
            string tableName = "Items",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[FullText] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static ItemsColumnCollection ItemsColumn(
            this ItemsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "ReferenceId":
                    return self.ReferenceId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "ReferenceType":
                    return self.ReferenceType(_as: _as, function: function);
                case "SiteId":
                    return self.SiteId(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "FullText":
                    return self.FullText(_as: _as, function: function);
                case "SearchIndexCreatedTime":
                    return self.SearchIndexCreatedTime(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static ItemsColumnCollection ReferenceId(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_ReferenceId(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection Ver(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_Ver(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection ReferenceType(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_ReferenceType(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection SiteId(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_SiteId(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection Title(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_Title(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection FullText(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "FullText",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FullText]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_FullText(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "FullText",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FullText]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection SearchIndexCreatedTime(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "SearchIndexCreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SearchIndexCreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_SearchIndexCreatedTime(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "SearchIndexCreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SearchIndexCreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection Comments(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_Comments(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection Creator(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_Creator(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection Updator(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_Updator(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection CreatedTime(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection UpdatedTime(
            this ItemsColumnCollection self,
            string tableName = "Items",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Items_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ItemsColumnCollection ItemsCount(
            this ItemsColumnCollection self,
            string _as = "ItemsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static ItemsWhereCollection ReferenceId(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_ReferenceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection Ver(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection ReferenceType(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_ReferenceType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection SiteId(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_SiteId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection Title(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection FullText(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FullText]" },
                    tableName: tableName,
                    name: "FullText",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_FullText(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FullText]" },
                    tableName: tableName,
                    name: "FullText",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection SearchIndexCreatedTime(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SearchIndexCreatedTime]" },
                    tableName: tableName,
                    name: "SearchIndexCreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_SearchIndexCreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SearchIndexCreatedTime]" },
                    tableName: tableName,
                    name: "SearchIndexCreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection Comments(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection Creator(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection Updator(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection CreatedTime(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection UpdatedTime(
            this ItemsWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Items_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ItemsWhereCollection ReferenceId_In(
            this ItemsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Items",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ItemsWhereCollection Ver_In(
            this ItemsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Items",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ItemsWhereCollection SiteId_In(
            this ItemsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Items",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ItemsWhereCollection Creator_In(
            this ItemsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Items",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ItemsWhereCollection Updator_In(
            this ItemsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Items",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ItemsWhereCollection ReferenceId_Between(
            this ItemsWhereCollection self,
            long begin,
            long end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_ReferenceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection Ver_Between(
            this ItemsWhereCollection self,
            int begin,
            int end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection SiteId_Between(
            this ItemsWhereCollection self,
            long begin,
            long end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_SiteId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection Creator_Between(
            this ItemsWhereCollection self,
            int begin,
            int end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection Updator_Between(
            this ItemsWhereCollection self,
            int begin,
            int end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection SearchIndexCreatedTime_Between(
            this ItemsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SearchIndexCreatedTime]" },
                    tableName: tableName,
                    name: "SearchIndexCreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_SearchIndexCreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SearchIndexCreatedTime]" },
                    tableName: tableName,
                    name: "SearchIndexCreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection CreatedTime_Between(
            this ItemsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection UpdatedTime_Between(
            this ItemsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Items_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ItemsWhereCollection Sub(
            this ItemsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static ItemsWhereCollection Or(
            this ItemsWhereCollection self,
            ItemsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static ItemsGroupByCollection ItemsGroupBy(
            this ItemsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "ReferenceId": return self.ReferenceId();
                    case "Ver": return self.Ver();
                    case "ReferenceType": return self.ReferenceType();
                    case "SiteId": return self.SiteId();
                    case "Title": return self.Title();
                    case "FullText": return self.FullText();
                    case "SearchIndexCreatedTime": return self.SearchIndexCreatedTime();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static ItemsGroupByCollection ReferenceId(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_ReferenceId(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static ItemsGroupByCollection Ver(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_Ver(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static ItemsGroupByCollection ReferenceType(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_ReferenceType(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static ItemsGroupByCollection SiteId(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_SiteId(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static ItemsGroupByCollection Title(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_Title(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static ItemsGroupByCollection FullText(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[FullText]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_FullText(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[FullText]", tableName: tableName);
        }

        public static ItemsGroupByCollection SearchIndexCreatedTime(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[SearchIndexCreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_SearchIndexCreatedTime(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[SearchIndexCreatedTime]", tableName: tableName);
        }

        public static ItemsGroupByCollection Comments(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_Comments(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static ItemsGroupByCollection Creator(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_Creator(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static ItemsGroupByCollection Updator(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_Updator(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static ItemsGroupByCollection CreatedTime(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static ItemsGroupByCollection UpdatedTime(
            this ItemsGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Items_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static ItemsHavingCollection ItemsCount(
            this ItemsHavingCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static ItemsHavingCollection CreatedTime(
            this ItemsHavingCollection self,
            string tableName = "Items",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static ItemsHavingCollection UpdatedTime(
            this ItemsHavingCollection self,
            string tableName = "Items",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static ItemsOrderByCollection ReferenceId(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection Ver(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection ReferenceType(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection SiteId(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection Title(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection FullText(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FullText]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection SearchIndexCreatedTime(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SearchIndexCreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection Comments(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection Creator(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection Updator(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection CreatedTime(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection UpdatedTime(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_ReferenceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_ReferenceType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_SiteId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_FullText(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FullText]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_SearchIndexCreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SearchIndexCreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Items_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ItemsOrderByCollection ItemsCount(
            this ItemsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static ItemsParamCollection ReferenceId(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_ReferenceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection Ver(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection ReferenceType(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_ReferenceType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection SiteId(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_SiteId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection Title(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection FullText(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FullText]",
                    name: "FullText",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_FullText(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FullText]",
                    name: "FullText",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection SearchIndexCreatedTime(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SearchIndexCreatedTime]",
                    name: "SearchIndexCreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_SearchIndexCreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SearchIndexCreatedTime]",
                    name: "SearchIndexCreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection Comments(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection Creator(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection Updator(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection CreatedTime(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ItemsParamCollection UpdatedTime(
            this ItemsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Items_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesColumnCollection SitesColumn()
        {
            return new SitesColumnCollection();
        }

        public class SitesColumnCollection : SqlColumnCollection
        {
            public new SitesColumnCollection Add(
                string columnBracket = null,
                string tableName = "Sites",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static SitesJoinCollection SitesJoin()
        {
            return new SitesJoinCollection();
        }

        public class SitesJoinCollection : SqlJoinCollection
        {
            public SitesJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static SitesWhereCollection SitesWhere()
        {
            return new SitesWhereCollection();
        }

        public class SitesWhereCollection : SqlWhereCollection
        {
            public new SitesWhereCollection Add(
                string tableName = "Sites",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static SitesGroupByCollection SitesGroupBy()
        {
            return new SitesGroupByCollection();
        }

        public class SitesGroupByCollection : SqlGroupByCollection
        {
            public new SitesGroupByCollection Add(
                string columnBracket, string tableName = "Sites")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static SitesHavingCollection SitesHaving()
        {
            return new SitesHavingCollection();
        }

        public class SitesHavingCollection : SqlHavingCollection
        {
            public SitesHavingCollection Add(
                string columnBracket,
                string tableName = "Sites",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static SitesOrderByCollection SitesOrderBy()
        {
            return new SitesOrderByCollection();
        }

        public class SitesOrderByCollection : SqlOrderByCollection
        {
            public new SitesOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Sites",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static SitesParamCollection SitesParam()
        {
            return new SitesParamCollection();
        }

        public class SitesParamCollection : SqlParamCollection
        {
            public new SitesParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Sites_Title_WhereLike(
            string tableName = "Sites",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Title] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Sites_Body_WhereLike(
            string tableName = "Sites",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static SitesColumnCollection SitesColumn(
            this SitesColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "SiteId":
                    return self.SiteId(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "TitleBody":
                    return self.TitleBody(_as: _as, function: function);
                case "GridGuide":
                    return self.GridGuide(_as: _as, function: function);
                case "EditorGuide":
                    return self.EditorGuide(_as: _as, function: function);
                case "ReferenceType":
                    return self.ReferenceType(_as: _as, function: function);
                case "ParentId":
                    return self.ParentId(_as: _as, function: function);
                case "InheritPermission":
                    return self.InheritPermission(_as: _as, function: function);
                case "SiteSettings":
                    return self.SiteSettings(_as: _as, function: function);
                case "Publish":
                    return self.Publish(_as: _as, function: function);
                case "LockedTime":
                    return self.LockedTime(_as: _as, function: function);
                case "LockedUser":
                    return self.LockedUser(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static SitesColumnCollection TenantId(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_TenantId(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection SiteId(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_SiteId(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection UpdatedTime(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection Ver(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_Ver(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection Title(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_Title(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection Body(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_Body(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection GridGuide(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "GridGuide",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GridGuide]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_GridGuide(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "GridGuide",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GridGuide]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection EditorGuide(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "EditorGuide",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[EditorGuide]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_EditorGuide(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "EditorGuide",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[EditorGuide]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection ReferenceType(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_ReferenceType(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection ParentId(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "ParentId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ParentId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_ParentId(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "ParentId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ParentId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection InheritPermission(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "InheritPermission",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InheritPermission]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_InheritPermission(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "InheritPermission",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[InheritPermission]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection SiteSettings(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "SiteSettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteSettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_SiteSettings(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "SiteSettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteSettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection Publish(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "Publish",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Publish]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_Publish(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "Publish",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Publish]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection LockedTime(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "LockedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LockedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_LockedTime(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "LockedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LockedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection LockedUser(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "LockedUser",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LockedUser]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_LockedUser(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "LockedUser",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[LockedUser]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection Comments(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_Comments(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection Creator(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_Creator(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection Updator(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_Updator(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection CreatedTime(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Sites_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SitesColumnCollection TitleBody(
            this SitesColumnCollection self,
            string tableName = "Sites",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SqlColumnCollection Sites_TitleBody(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SitesColumnCollection SitesCount(
            this SitesColumnCollection self,
            string _as = "SitesCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static SitesWhereCollection TenantId(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection SiteId(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_SiteId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection UpdatedTime(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection Ver(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection Title(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection Body(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection GridGuide(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GridGuide]" },
                    tableName: tableName,
                    name: "GridGuide",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_GridGuide(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GridGuide]" },
                    tableName: tableName,
                    name: "GridGuide",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection EditorGuide(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[EditorGuide]" },
                    tableName: tableName,
                    name: "EditorGuide",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_EditorGuide(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[EditorGuide]" },
                    tableName: tableName,
                    name: "EditorGuide",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection ReferenceType(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_ReferenceType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection ParentId(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ParentId]" },
                    tableName: tableName,
                    name: "ParentId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_ParentId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ParentId]" },
                    tableName: tableName,
                    name: "ParentId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection InheritPermission(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_InheritPermission(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection SiteSettings(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteSettings]" },
                    tableName: tableName,
                    name: "SiteSettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_SiteSettings(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteSettings]" },
                    tableName: tableName,
                    name: "SiteSettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection Publish(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Publish]" },
                    tableName: tableName,
                    name: "Publish",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_Publish(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Publish]" },
                    tableName: tableName,
                    name: "Publish",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection LockedTime(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedTime]" },
                    tableName: tableName,
                    name: "LockedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_LockedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedTime]" },
                    tableName: tableName,
                    name: "LockedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection LockedUser(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedUser]" },
                    tableName: tableName,
                    name: "LockedUser",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_LockedUser(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedUser]" },
                    tableName: tableName,
                    name: "LockedUser",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection Comments(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection Creator(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection Updator(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection CreatedTime(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection TitleBody(
            this SitesWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Sites_TitleBody(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SitesWhereCollection TenantId_In(
            this SitesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection SiteId_In(
            this SitesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection Ver_In(
            this SitesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection ParentId_In(
            this SitesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ParentId]" },
                    tableName: tableName,
                    name: "ParentId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ParentId]" },
                    tableName: tableName,
                    name: "ParentId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection InheritPermission_In(
            this SitesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection LockedUser_In(
            this SitesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[LockedUser]" },
                    tableName: tableName,
                    name: "LockedUser",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[LockedUser]" },
                    tableName: tableName,
                    name: "LockedUser",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection Creator_In(
            this SitesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection Updator_In(
            this SitesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Sites",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static SitesWhereCollection TenantId_Between(
            this SitesWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection SiteId_Between(
            this SitesWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_SiteId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection Ver_Between(
            this SitesWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection ParentId_Between(
            this SitesWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ParentId]" },
                    tableName: tableName,
                    name: "ParentId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_ParentId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ParentId]" },
                    tableName: tableName,
                    name: "ParentId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection InheritPermission_Between(
            this SitesWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_InheritPermission_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[InheritPermission]" },
                    tableName: tableName,
                    name: "InheritPermission",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection LockedUser_Between(
            this SitesWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedUser]" },
                    tableName: tableName,
                    name: "LockedUser",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_LockedUser_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedUser]" },
                    tableName: tableName,
                    name: "LockedUser",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection Creator_Between(
            this SitesWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection Updator_Between(
            this SitesWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection UpdatedTime_Between(
            this SitesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection LockedTime_Between(
            this SitesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedTime]" },
                    tableName: tableName,
                    name: "LockedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_LockedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[LockedTime]" },
                    tableName: tableName,
                    name: "LockedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection CreatedTime_Between(
            this SitesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Sites_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Sites",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SitesWhereCollection Sub(
            this SitesWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static SitesWhereCollection Or(
            this SitesWhereCollection self,
            SitesWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static SitesGroupByCollection SitesGroupBy(
            this SitesGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "TenantId": return self.TenantId();
                    case "SiteId": return self.SiteId();
                    case "UpdatedTime": return self.UpdatedTime();
                    case "Ver": return self.Ver();
                    case "Title": return self.Title();
                    case "Body": return self.Body();
                    case "TitleBody": return self.TitleBody();
                    case "GridGuide": return self.GridGuide();
                    case "EditorGuide": return self.EditorGuide();
                    case "ReferenceType": return self.ReferenceType();
                    case "ParentId": return self.ParentId();
                    case "InheritPermission": return self.InheritPermission();
                    case "SiteSettings": return self.SiteSettings();
                    case "Publish": return self.Publish();
                    case "LockedTime": return self.LockedTime();
                    case "LockedUser": return self.LockedUser();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static SitesGroupByCollection TenantId(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_TenantId(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SitesGroupByCollection SiteId(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_SiteId(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SitesGroupByCollection UpdatedTime(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SitesGroupByCollection Ver(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_Ver(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SitesGroupByCollection Title(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_Title(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SitesGroupByCollection Body(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_Body(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SitesGroupByCollection TitleBody(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_TitleBody(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static SitesGroupByCollection GridGuide(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[GridGuide]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_GridGuide(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[GridGuide]", tableName: tableName);
        }

        public static SitesGroupByCollection EditorGuide(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[EditorGuide]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_EditorGuide(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[EditorGuide]", tableName: tableName);
        }

        public static SitesGroupByCollection ReferenceType(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_ReferenceType(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SitesGroupByCollection ParentId(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[ParentId]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_ParentId(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[ParentId]", tableName: tableName);
        }

        public static SitesGroupByCollection InheritPermission(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[InheritPermission]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_InheritPermission(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[InheritPermission]", tableName: tableName);
        }

        public static SitesGroupByCollection SiteSettings(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[SiteSettings]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_SiteSettings(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[SiteSettings]", tableName: tableName);
        }

        public static SitesGroupByCollection Publish(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Publish]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_Publish(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Publish]", tableName: tableName);
        }

        public static SitesGroupByCollection LockedTime(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[LockedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_LockedTime(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[LockedTime]", tableName: tableName);
        }

        public static SitesGroupByCollection LockedUser(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[LockedUser]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_LockedUser(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[LockedUser]", tableName: tableName);
        }

        public static SitesGroupByCollection Comments(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_Comments(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SitesGroupByCollection Creator(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_Creator(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SitesGroupByCollection Updator(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_Updator(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SitesGroupByCollection CreatedTime(
            this SitesGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Sites_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SitesHavingCollection SitesCount(
            this SitesHavingCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static SitesHavingCollection CreatedTime(
            this SitesHavingCollection self,
            string tableName = "Sites",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static SitesOrderByCollection TenantId(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection SiteId(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection UpdatedTime(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection Ver(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection Title(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection Body(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection TitleBody(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection GridGuide(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GridGuide]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection EditorGuide(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[EditorGuide]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection ReferenceType(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection ParentId(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ParentId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection InheritPermission(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InheritPermission]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection SiteSettings(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteSettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection Publish(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Publish]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection LockedTime(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LockedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection LockedUser(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LockedUser]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection Comments(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection Creator(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection Updator(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection CreatedTime(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_SiteId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_TitleBody(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_GridGuide(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GridGuide]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_EditorGuide(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[EditorGuide]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_ReferenceType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_ParentId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ParentId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_InheritPermission(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[InheritPermission]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_SiteSettings(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteSettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_Publish(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Publish]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_LockedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LockedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_LockedUser(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[LockedUser]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Sites_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SitesOrderByCollection SitesCount(
            this SitesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static SitesParamCollection ItemId(this SitesParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.SiteId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.SiteId(value: itemId);
            }
        }

        public static SitesParamCollection TenantId(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection SiteId(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_SiteId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection UpdatedTime(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection Ver(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection Title(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection Body(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection GridGuide(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GridGuide]",
                    name: "GridGuide",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_GridGuide(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GridGuide]",
                    name: "GridGuide",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection EditorGuide(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[EditorGuide]",
                    name: "EditorGuide",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_EditorGuide(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[EditorGuide]",
                    name: "EditorGuide",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection ReferenceType(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_ReferenceType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection ParentId(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ParentId]",
                    name: "ParentId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_ParentId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ParentId]",
                    name: "ParentId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection InheritPermission(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[InheritPermission]",
                    name: "InheritPermission",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_InheritPermission(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[InheritPermission]",
                    name: "InheritPermission",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection SiteSettings(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteSettings]",
                    name: "SiteSettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_SiteSettings(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteSettings]",
                    name: "SiteSettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection Publish(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Publish]",
                    name: "Publish",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_Publish(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Publish]",
                    name: "Publish",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection LockedTime(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LockedTime]",
                    name: "LockedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_LockedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LockedTime]",
                    name: "LockedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection LockedUser(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LockedUser]",
                    name: "LockedUser",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_LockedUser(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[LockedUser]",
                    name: "LockedUser",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection Comments(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection Creator(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection Updator(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SitesParamCollection CreatedTime(
            this SitesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Sites_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersColumnCollection OrdersColumn()
        {
            return new OrdersColumnCollection();
        }

        public class OrdersColumnCollection : SqlColumnCollection
        {
            public new OrdersColumnCollection Add(
                string columnBracket = null,
                string tableName = "Orders",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static OrdersJoinCollection OrdersJoin()
        {
            return new OrdersJoinCollection();
        }

        public class OrdersJoinCollection : SqlJoinCollection
        {
            public OrdersJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static OrdersWhereCollection OrdersWhere()
        {
            return new OrdersWhereCollection();
        }

        public class OrdersWhereCollection : SqlWhereCollection
        {
            public new OrdersWhereCollection Add(
                string tableName = "Orders",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static OrdersGroupByCollection OrdersGroupBy()
        {
            return new OrdersGroupByCollection();
        }

        public class OrdersGroupByCollection : SqlGroupByCollection
        {
            public new OrdersGroupByCollection Add(
                string columnBracket, string tableName = "Orders")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static OrdersHavingCollection OrdersHaving()
        {
            return new OrdersHavingCollection();
        }

        public class OrdersHavingCollection : SqlHavingCollection
        {
            public OrdersHavingCollection Add(
                string columnBracket,
                string tableName = "Orders",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static OrdersOrderByCollection OrdersOrderBy()
        {
            return new OrdersOrderByCollection();
        }

        public class OrdersOrderByCollection : SqlOrderByCollection
        {
            public new OrdersOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Orders",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static OrdersParamCollection OrdersParam()
        {
            return new OrdersParamCollection();
        }

        public class OrdersParamCollection : SqlParamCollection
        {
            public new OrdersParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static OrdersColumnCollection OrdersColumn(
            this OrdersColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "ReferenceId":
                    return self.ReferenceId(_as: _as, function: function);
                case "ReferenceType":
                    return self.ReferenceType(_as: _as, function: function);
                case "OwnerId":
                    return self.OwnerId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Data":
                    return self.Data(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static OrdersColumnCollection ReferenceId(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_ReferenceId(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection ReferenceType(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_ReferenceType(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection OwnerId(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "OwnerId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OwnerId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_OwnerId(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "OwnerId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[OwnerId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection Ver(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_Ver(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection Data(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "Data",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Data]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_Data(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "Data",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Data]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection Comments(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_Comments(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection Creator(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_Creator(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection Updator(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_Updator(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection CreatedTime(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection UpdatedTime(
            this OrdersColumnCollection self,
            string tableName = "Orders",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Orders_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Orders",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static OrdersColumnCollection OrdersCount(
            this OrdersColumnCollection self,
            string _as = "OrdersCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static OrdersWhereCollection ReferenceId(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_ReferenceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection ReferenceType(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_ReferenceType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection OwnerId(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_OwnerId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection Ver(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection Data(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Data]" },
                    tableName: tableName,
                    name: "Data",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_Data(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Data]" },
                    tableName: tableName,
                    name: "Data",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection Comments(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection Creator(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection Updator(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection CreatedTime(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection UpdatedTime(
            this OrdersWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Orders_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static OrdersWhereCollection ReferenceId_In(
            this OrdersWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Orders",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OrdersWhereCollection OwnerId_In(
            this OrdersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Orders",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OrdersWhereCollection Ver_In(
            this OrdersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Orders",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OrdersWhereCollection Creator_In(
            this OrdersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Orders",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OrdersWhereCollection Updator_In(
            this OrdersWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Orders",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static OrdersWhereCollection ReferenceId_Between(
            this OrdersWhereCollection self,
            long begin,
            long end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Orders_ReferenceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OrdersWhereCollection OwnerId_Between(
            this OrdersWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Orders_OwnerId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[OwnerId]" },
                    tableName: tableName,
                    name: "OwnerId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OrdersWhereCollection Ver_Between(
            this OrdersWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Orders_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OrdersWhereCollection Creator_Between(
            this OrdersWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Orders_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OrdersWhereCollection Updator_Between(
            this OrdersWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Orders_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static OrdersWhereCollection CreatedTime_Between(
            this OrdersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Orders_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static OrdersWhereCollection UpdatedTime_Between(
            this OrdersWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Orders_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Orders",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static OrdersWhereCollection Sub(
            this OrdersWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static OrdersWhereCollection Or(
            this OrdersWhereCollection self,
            OrdersWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static OrdersGroupByCollection OrdersGroupBy(
            this OrdersGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "ReferenceId": return self.ReferenceId();
                    case "ReferenceType": return self.ReferenceType();
                    case "OwnerId": return self.OwnerId();
                    case "Ver": return self.Ver();
                    case "Data": return self.Data();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static OrdersGroupByCollection ReferenceId(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_ReferenceId(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static OrdersGroupByCollection ReferenceType(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_ReferenceType(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static OrdersGroupByCollection OwnerId(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[OwnerId]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_OwnerId(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[OwnerId]", tableName: tableName);
        }

        public static OrdersGroupByCollection Ver(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_Ver(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static OrdersGroupByCollection Data(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Data]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_Data(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Data]", tableName: tableName);
        }

        public static OrdersGroupByCollection Comments(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_Comments(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static OrdersGroupByCollection Creator(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_Creator(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static OrdersGroupByCollection Updator(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_Updator(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static OrdersGroupByCollection CreatedTime(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static OrdersGroupByCollection UpdatedTime(
            this OrdersGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Orders_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Orders")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static OrdersHavingCollection OrdersCount(
            this OrdersHavingCollection self,
            object value = null,
            string tableName = "Orders",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static OrdersHavingCollection CreatedTime(
            this OrdersHavingCollection self,
            string tableName = "Orders",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static OrdersHavingCollection UpdatedTime(
            this OrdersHavingCollection self,
            string tableName = "Orders",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static OrdersOrderByCollection ReferenceId(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection ReferenceType(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection OwnerId(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OwnerId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection Ver(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection Data(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Data]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection Comments(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection Creator(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection Updator(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection CreatedTime(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection UpdatedTime(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_ReferenceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_ReferenceType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_OwnerId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[OwnerId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_Data(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Data]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Orders_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Orders",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static OrdersOrderByCollection OrdersCount(
            this OrdersOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static OrdersParamCollection ReferenceId(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_ReferenceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection ReferenceType(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_ReferenceType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection OwnerId(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OwnerId]",
                    name: "OwnerId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_OwnerId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[OwnerId]",
                    name: "OwnerId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection Ver(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection Data(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Data]",
                    name: "Data",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_Data(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Data]",
                    name: "Data",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection Comments(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection Creator(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection Updator(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection CreatedTime(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static OrdersParamCollection UpdatedTime(
            this OrdersParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Orders_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsColumnCollection ExportSettingsColumn()
        {
            return new ExportSettingsColumnCollection();
        }

        public class ExportSettingsColumnCollection : SqlColumnCollection
        {
            public new ExportSettingsColumnCollection Add(
                string columnBracket = null,
                string tableName = "ExportSettings",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static ExportSettingsJoinCollection ExportSettingsJoin()
        {
            return new ExportSettingsJoinCollection();
        }

        public class ExportSettingsJoinCollection : SqlJoinCollection
        {
            public ExportSettingsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static ExportSettingsWhereCollection ExportSettingsWhere()
        {
            return new ExportSettingsWhereCollection();
        }

        public class ExportSettingsWhereCollection : SqlWhereCollection
        {
            public new ExportSettingsWhereCollection Add(
                string tableName = "ExportSettings",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static ExportSettingsGroupByCollection ExportSettingsGroupBy()
        {
            return new ExportSettingsGroupByCollection();
        }

        public class ExportSettingsGroupByCollection : SqlGroupByCollection
        {
            public new ExportSettingsGroupByCollection Add(
                string columnBracket, string tableName = "ExportSettings")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static ExportSettingsHavingCollection ExportSettingsHaving()
        {
            return new ExportSettingsHavingCollection();
        }

        public class ExportSettingsHavingCollection : SqlHavingCollection
        {
            public ExportSettingsHavingCollection Add(
                string columnBracket,
                string tableName = "ExportSettings",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static ExportSettingsOrderByCollection ExportSettingsOrderBy()
        {
            return new ExportSettingsOrderByCollection();
        }

        public class ExportSettingsOrderByCollection : SqlOrderByCollection
        {
            public new ExportSettingsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "ExportSettings",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static ExportSettingsParamCollection ExportSettingsParam()
        {
            return new ExportSettingsParamCollection();
        }

        public class ExportSettingsParamCollection : SqlParamCollection
        {
            public new ExportSettingsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static ExportSettingsColumnCollection ExportSettingsColumn(
            this ExportSettingsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "ReferenceType":
                    return self.ReferenceType(_as: _as, function: function);
                case "ReferenceId":
                    return self.ReferenceId(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "ExportSettingId":
                    return self.ExportSettingId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "AddHeader":
                    return self.AddHeader(_as: _as, function: function);
                case "ExportColumns":
                    return self.ExportColumns(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static ExportSettingsColumnCollection ReferenceType(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_ReferenceType(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection ReferenceId(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_ReferenceId(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection Title(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_Title(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection ExportSettingId(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ExportSettingId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ExportSettingId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_ExportSettingId(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ExportSettingId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ExportSettingId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection Ver(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_Ver(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection AddHeader(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "AddHeader",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[AddHeader]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_AddHeader(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "AddHeader",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[AddHeader]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection ExportColumns(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ExportColumns",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ExportColumns]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_ExportColumns(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "ExportColumns",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ExportColumns]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection Comments(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_Comments(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection Creator(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_Creator(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection Updator(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_Updator(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection CreatedTime(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection UpdatedTime(
            this ExportSettingsColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection ExportSettings_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "ExportSettings",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ExportSettingsColumnCollection ExportSettingsCount(
            this ExportSettingsColumnCollection self,
            string _as = "ExportSettingsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static ExportSettingsWhereCollection ReferenceType(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_ReferenceType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection ReferenceId(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_ReferenceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection Title(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection ExportSettingId(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ExportSettingId]" },
                    tableName: tableName,
                    name: "ExportSettingId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_ExportSettingId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ExportSettingId]" },
                    tableName: tableName,
                    name: "ExportSettingId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection Ver(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection AddHeader(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[AddHeader]" },
                    tableName: tableName,
                    name: "AddHeader",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_AddHeader(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[AddHeader]" },
                    tableName: tableName,
                    name: "AddHeader",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection ExportColumns(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ExportColumns]" },
                    tableName: tableName,
                    name: "ExportColumns",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_ExportColumns(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ExportColumns]" },
                    tableName: tableName,
                    name: "ExportColumns",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection Comments(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection Creator(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection Updator(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection CreatedTime(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection UpdatedTime(
            this ExportSettingsWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection ExportSettings_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ExportSettingsWhereCollection ReferenceId_In(
            this ExportSettingsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "ExportSettings",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ExportSettingsWhereCollection ExportSettingId_In(
            this ExportSettingsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "ExportSettings",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ExportSettingId]" },
                    tableName: tableName,
                    name: "ExportSettingId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ExportSettingId]" },
                    tableName: tableName,
                    name: "ExportSettingId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ExportSettingsWhereCollection Ver_In(
            this ExportSettingsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "ExportSettings",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ExportSettingsWhereCollection Creator_In(
            this ExportSettingsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "ExportSettings",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ExportSettingsWhereCollection Updator_In(
            this ExportSettingsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "ExportSettings",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ExportSettingsWhereCollection ReferenceId_Between(
            this ExportSettingsWhereCollection self,
            long begin,
            long end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ExportSettings_ReferenceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ExportSettingsWhereCollection ExportSettingId_Between(
            this ExportSettingsWhereCollection self,
            long begin,
            long end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ExportSettingId]" },
                    tableName: tableName,
                    name: "ExportSettingId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ExportSettings_ExportSettingId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ExportSettingId]" },
                    tableName: tableName,
                    name: "ExportSettingId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ExportSettingsWhereCollection Ver_Between(
            this ExportSettingsWhereCollection self,
            int begin,
            int end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ExportSettings_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ExportSettingsWhereCollection Creator_Between(
            this ExportSettingsWhereCollection self,
            int begin,
            int end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ExportSettings_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ExportSettingsWhereCollection Updator_Between(
            this ExportSettingsWhereCollection self,
            int begin,
            int end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ExportSettings_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ExportSettingsWhereCollection CreatedTime_Between(
            this ExportSettingsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ExportSettings_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ExportSettingsWhereCollection UpdatedTime_Between(
            this ExportSettingsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection ExportSettings_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "ExportSettings",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ExportSettingsWhereCollection Sub(
            this ExportSettingsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static ExportSettingsWhereCollection Or(
            this ExportSettingsWhereCollection self,
            ExportSettingsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static ExportSettingsGroupByCollection ExportSettingsGroupBy(
            this ExportSettingsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "ReferenceType": return self.ReferenceType();
                    case "ReferenceId": return self.ReferenceId();
                    case "Title": return self.Title();
                    case "ExportSettingId": return self.ExportSettingId();
                    case "Ver": return self.Ver();
                    case "AddHeader": return self.AddHeader();
                    case "ExportColumns": return self.ExportColumns();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static ExportSettingsGroupByCollection ReferenceType(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_ReferenceType(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection ReferenceId(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_ReferenceId(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection Title(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_Title(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection ExportSettingId(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ExportSettingId]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_ExportSettingId(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ExportSettingId]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection Ver(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_Ver(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection AddHeader(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[AddHeader]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_AddHeader(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[AddHeader]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection ExportColumns(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ExportColumns]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_ExportColumns(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[ExportColumns]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection Comments(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_Comments(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection Creator(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_Creator(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection Updator(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_Updator(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection CreatedTime(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_CreatedTime(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static ExportSettingsGroupByCollection UpdatedTime(
            this ExportSettingsGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection ExportSettings_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "ExportSettings")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static ExportSettingsHavingCollection ExportSettingsCount(
            this ExportSettingsHavingCollection self,
            object value = null,
            string tableName = "ExportSettings",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static ExportSettingsHavingCollection CreatedTime(
            this ExportSettingsHavingCollection self,
            string tableName = "ExportSettings",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static ExportSettingsHavingCollection UpdatedTime(
            this ExportSettingsHavingCollection self,
            string tableName = "ExportSettings",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static ExportSettingsOrderByCollection ReferenceType(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection ReferenceId(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection Title(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection ExportSettingId(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ExportSettingId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection Ver(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection AddHeader(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[AddHeader]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection ExportColumns(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ExportColumns]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection Comments(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection Creator(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection Updator(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection CreatedTime(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection UpdatedTime(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_ReferenceType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_ReferenceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_ExportSettingId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ExportSettingId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_AddHeader(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[AddHeader]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_ExportColumns(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ExportColumns]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection ExportSettings_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "ExportSettings",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ExportSettingsOrderByCollection ExportSettingsCount(
            this ExportSettingsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static ExportSettingsParamCollection ReferenceType(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_ReferenceType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceType]",
                    name: "ReferenceType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection ReferenceId(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_ReferenceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection Title(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection ExportSettingId(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ExportSettingId]",
                    name: "ExportSettingId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_ExportSettingId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ExportSettingId]",
                    name: "ExportSettingId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection Ver(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection AddHeader(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[AddHeader]",
                    name: "AddHeader",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_AddHeader(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[AddHeader]",
                    name: "AddHeader",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection ExportColumns(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ExportColumns]",
                    name: "ExportColumns",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_ExportColumns(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ExportColumns]",
                    name: "ExportColumns",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection Comments(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection Creator(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection Updator(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection CreatedTime(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ExportSettingsParamCollection UpdatedTime(
            this ExportSettingsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection ExportSettings_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksColumnCollection LinksColumn()
        {
            return new LinksColumnCollection();
        }

        public class LinksColumnCollection : SqlColumnCollection
        {
            public new LinksColumnCollection Add(
                string columnBracket = null,
                string tableName = "Links",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static LinksJoinCollection LinksJoin()
        {
            return new LinksJoinCollection();
        }

        public class LinksJoinCollection : SqlJoinCollection
        {
            public LinksJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static LinksWhereCollection LinksWhere()
        {
            return new LinksWhereCollection();
        }

        public class LinksWhereCollection : SqlWhereCollection
        {
            public new LinksWhereCollection Add(
                string tableName = "Links",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static LinksGroupByCollection LinksGroupBy()
        {
            return new LinksGroupByCollection();
        }

        public class LinksGroupByCollection : SqlGroupByCollection
        {
            public new LinksGroupByCollection Add(
                string columnBracket, string tableName = "Links")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static LinksHavingCollection LinksHaving()
        {
            return new LinksHavingCollection();
        }

        public class LinksHavingCollection : SqlHavingCollection
        {
            public LinksHavingCollection Add(
                string columnBracket,
                string tableName = "Links",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static LinksOrderByCollection LinksOrderBy()
        {
            return new LinksOrderByCollection();
        }

        public class LinksOrderByCollection : SqlOrderByCollection
        {
            public new LinksOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Links",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static LinksParamCollection LinksParam()
        {
            return new LinksParamCollection();
        }

        public class LinksParamCollection : SqlParamCollection
        {
            public new LinksParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static LinksColumnCollection LinksColumn(
            this LinksColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "DestinationId":
                    return self.DestinationId(_as: _as, function: function);
                case "SourceId":
                    return self.SourceId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "ReferenceType":
                    return self.ReferenceType(_as: _as, function: function);
                case "SiteId":
                    return self.SiteId(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Subset":
                    return self.Subset(_as: _as, function: function);
                case "SiteTitle":
                    return self.SiteTitle(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static LinksColumnCollection DestinationId(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "DestinationId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DestinationId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_DestinationId(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "DestinationId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DestinationId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection SourceId(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "SourceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SourceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_SourceId(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "SourceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SourceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection Ver(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_Ver(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection ReferenceType(
            this LinksColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_ReferenceType(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "ReferenceType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection SiteId(
            this LinksColumnCollection self,
            string tableName = "Items",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_SiteId(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection Title(
            this LinksColumnCollection self,
            string tableName = "Items",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_Title(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection Subset(
            this LinksColumnCollection self,
            string tableName = "Items",
            string columnName = "Subset",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Subset]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_Subset(
            this SqlColumnCollection self,
            string tableName = "Items",
            string columnName = "Subset",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Subset]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection Comments(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_Comments(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection Creator(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_Creator(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection Updator(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_Updator(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection CreatedTime(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection UpdatedTime(
            this LinksColumnCollection self,
            string tableName = "Links",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Links",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection SiteTitle(
            this LinksColumnCollection self,
            string tableName = "Sites",
            string columnName = "SiteTitle",
            string _as = "SiteTitle",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Links_SiteTitle(
            this SqlColumnCollection self,
            string tableName = "Sites",
            string columnName = "SiteTitle",
            string _as = "SiteTitle",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static LinksColumnCollection LinksCount(
            this LinksColumnCollection self,
            string _as = "LinksCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static LinksWhereCollection DestinationId(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DestinationId]" },
                    tableName: tableName,
                    name: "DestinationId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_DestinationId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DestinationId]" },
                    tableName: tableName,
                    name: "DestinationId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection SourceId(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SourceId]" },
                    tableName: tableName,
                    name: "SourceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_SourceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SourceId]" },
                    tableName: tableName,
                    name: "SourceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection Ver(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection ReferenceType(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_ReferenceType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceType]" },
                    tableName: tableName,
                    name: "ReferenceType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection SiteId(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_SiteId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection Title(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection Subset(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Subset]" },
                    tableName: tableName,
                    name: "Subset",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_Subset(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Items",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Subset]" },
                    tableName: tableName,
                    name: "Subset",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection Comments(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection Creator(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection Updator(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection CreatedTime(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection UpdatedTime(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection SiteTitle(
            this LinksWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Links_SiteTitle(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Sites",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static LinksWhereCollection DestinationId_In(
            this LinksWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Links",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[DestinationId]" },
                    tableName: tableName,
                    name: "DestinationId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[DestinationId]" },
                    tableName: tableName,
                    name: "DestinationId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LinksWhereCollection SourceId_In(
            this LinksWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Links",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SourceId]" },
                    tableName: tableName,
                    name: "SourceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SourceId]" },
                    tableName: tableName,
                    name: "SourceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LinksWhereCollection Ver_In(
            this LinksWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Links",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LinksWhereCollection SiteId_In(
            this LinksWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Items",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LinksWhereCollection Creator_In(
            this LinksWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Links",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LinksWhereCollection Updator_In(
            this LinksWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Links",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static LinksWhereCollection DestinationId_Between(
            this LinksWhereCollection self,
            long begin,
            long end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DestinationId]" },
                    tableName: tableName,
                    name: "DestinationId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_DestinationId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DestinationId]" },
                    tableName: tableName,
                    name: "DestinationId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection SourceId_Between(
            this LinksWhereCollection self,
            long begin,
            long end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SourceId]" },
                    tableName: tableName,
                    name: "SourceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_SourceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SourceId]" },
                    tableName: tableName,
                    name: "SourceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection Ver_Between(
            this LinksWhereCollection self,
            int begin,
            int end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection SiteId_Between(
            this LinksWhereCollection self,
            long begin,
            long end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_SiteId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Items",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection Creator_Between(
            this LinksWhereCollection self,
            int begin,
            int end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection Updator_Between(
            this LinksWhereCollection self,
            int begin,
            int end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection CreatedTime_Between(
            this LinksWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection UpdatedTime_Between(
            this LinksWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Links_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Links",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static LinksWhereCollection Sub(
            this LinksWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static LinksWhereCollection Or(
            this LinksWhereCollection self,
            LinksWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static LinksGroupByCollection LinksGroupBy(
            this LinksGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "DestinationId": return self.DestinationId();
                    case "SourceId": return self.SourceId();
                    case "Ver": return self.Ver();
                    case "ReferenceType": return self.ReferenceType();
                    case "SiteId": return self.SiteId();
                    case "Title": return self.Title();
                    case "Subset": return self.Subset();
                    case "SiteTitle": return self.SiteTitle();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static LinksGroupByCollection DestinationId(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[DestinationId]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_DestinationId(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[DestinationId]", tableName: tableName);
        }

        public static LinksGroupByCollection SourceId(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[SourceId]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_SourceId(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[SourceId]", tableName: tableName);
        }

        public static LinksGroupByCollection Ver(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_Ver(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static LinksGroupByCollection ReferenceType(
            this LinksGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_ReferenceType(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[ReferenceType]", tableName: tableName);
        }

        public static LinksGroupByCollection SiteId(
            this LinksGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_SiteId(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static LinksGroupByCollection Title(
            this LinksGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_Title(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static LinksGroupByCollection Subset(
            this LinksGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Subset]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_Subset(
            this SqlGroupByCollection self, string tableName = "Items")
        {
            return self.Add(columnBracket: "[Subset]", tableName: tableName);
        }

        public static LinksGroupByCollection SiteTitle(
            this LinksGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_SiteTitle(
            this SqlGroupByCollection self, string tableName = "Sites")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static LinksGroupByCollection Comments(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_Comments(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static LinksGroupByCollection Creator(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_Creator(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static LinksGroupByCollection Updator(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_Updator(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static LinksGroupByCollection CreatedTime(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static LinksGroupByCollection UpdatedTime(
            this LinksGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Links_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Links")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static LinksHavingCollection LinksCount(
            this LinksHavingCollection self,
            object value = null,
            string tableName = "Links",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static LinksHavingCollection CreatedTime(
            this LinksHavingCollection self,
            string tableName = "Links",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static LinksHavingCollection UpdatedTime(
            this LinksHavingCollection self,
            string tableName = "Links",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static LinksOrderByCollection DestinationId(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DestinationId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection SourceId(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SourceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection Ver(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection ReferenceType(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection SiteId(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection Title(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection Subset(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Subset]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection SiteTitle(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection Comments(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection Creator(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection Updator(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection CreatedTime(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection UpdatedTime(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_DestinationId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DestinationId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_SourceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SourceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_ReferenceType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_SiteId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_Subset(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Items",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Subset]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_SiteTitle(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Sites",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Links_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Links",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static LinksOrderByCollection LinksCount(
            this LinksOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static LinksParamCollection DestinationId(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DestinationId]",
                    name: "DestinationId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_DestinationId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DestinationId]",
                    name: "DestinationId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksParamCollection SourceId(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SourceId]",
                    name: "SourceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_SourceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SourceId]",
                    name: "SourceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksParamCollection Ver(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksParamCollection Comments(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksParamCollection Creator(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksParamCollection Updator(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksParamCollection CreatedTime(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static LinksParamCollection UpdatedTime(
            this LinksParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Links_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesColumnCollection BinariesColumn()
        {
            return new BinariesColumnCollection();
        }

        public class BinariesColumnCollection : SqlColumnCollection
        {
            public new BinariesColumnCollection Add(
                string columnBracket = null,
                string tableName = "Binaries",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static BinariesJoinCollection BinariesJoin()
        {
            return new BinariesJoinCollection();
        }

        public class BinariesJoinCollection : SqlJoinCollection
        {
            public BinariesJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static BinariesWhereCollection BinariesWhere()
        {
            return new BinariesWhereCollection();
        }

        public class BinariesWhereCollection : SqlWhereCollection
        {
            public new BinariesWhereCollection Add(
                string tableName = "Binaries",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static BinariesGroupByCollection BinariesGroupBy()
        {
            return new BinariesGroupByCollection();
        }

        public class BinariesGroupByCollection : SqlGroupByCollection
        {
            public new BinariesGroupByCollection Add(
                string columnBracket, string tableName = "Binaries")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static BinariesHavingCollection BinariesHaving()
        {
            return new BinariesHavingCollection();
        }

        public class BinariesHavingCollection : SqlHavingCollection
        {
            public BinariesHavingCollection Add(
                string columnBracket,
                string tableName = "Binaries",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static BinariesOrderByCollection BinariesOrderBy()
        {
            return new BinariesOrderByCollection();
        }

        public class BinariesOrderByCollection : SqlOrderByCollection
        {
            public new BinariesOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Binaries",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static BinariesParamCollection BinariesParam()
        {
            return new BinariesParamCollection();
        }

        public class BinariesParamCollection : SqlParamCollection
        {
            public new BinariesParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Binaries_Body_WhereLike(
            string tableName = "Binaries",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static BinariesColumnCollection BinariesColumn(
            this BinariesColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "BinaryId":
                    return self.BinaryId(_as: _as, function: function);
                case "TenantId":
                    return self.TenantId(_as: _as, function: function);
                case "ReferenceId":
                    return self.ReferenceId(_as: _as, function: function);
                case "Guid":
                    return self.Guid(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "BinaryType":
                    return self.BinaryType(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "Bin":
                    return self.Bin(_as: _as, function: function);
                case "Thumbnail":
                    return self.Thumbnail(_as: _as, function: function);
                case "Icon":
                    return self.Icon(_as: _as, function: function);
                case "FileName":
                    return self.FileName(_as: _as, function: function);
                case "Extension":
                    return self.Extension(_as: _as, function: function);
                case "Size":
                    return self.Size(_as: _as, function: function);
                case "ContentType":
                    return self.ContentType(_as: _as, function: function);
                case "BinarySettings":
                    return self.BinarySettings(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static BinariesColumnCollection BinaryId(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "BinaryId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BinaryId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_BinaryId(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "BinaryId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BinaryId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection TenantId(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_TenantId(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "TenantId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[TenantId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection ReferenceId(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_ReferenceId(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Guid(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Guid",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Guid]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Guid(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Guid",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Guid]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Ver(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Ver(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection BinaryType(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "BinaryType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BinaryType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_BinaryType(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "BinaryType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BinaryType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Title(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Title(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Body(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Body(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Bin(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Bin",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Bin]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Bin(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Bin",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Bin]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Thumbnail(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Thumbnail",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Thumbnail]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Thumbnail(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Thumbnail",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Thumbnail]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Icon(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Icon",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Icon]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Icon(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Icon",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Icon]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection FileName(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "FileName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FileName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_FileName(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "FileName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[FileName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Extension(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Extension",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Extension]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Extension(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Extension",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Extension]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Size(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Size",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Size]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Size(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Size",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Size]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection ContentType(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "ContentType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ContentType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_ContentType(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "ContentType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ContentType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection BinarySettings(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "BinarySettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BinarySettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_BinarySettings(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "BinarySettings",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[BinarySettings]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Comments(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Comments(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Creator(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Creator(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection Updator(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_Updator(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection CreatedTime(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection UpdatedTime(
            this BinariesColumnCollection self,
            string tableName = "Binaries",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Binaries_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Binaries",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static BinariesColumnCollection BinariesCount(
            this BinariesColumnCollection self,
            string _as = "BinariesCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static BinariesWhereCollection BinaryId(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinaryId]" },
                    tableName: tableName,
                    name: "BinaryId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_BinaryId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinaryId]" },
                    tableName: tableName,
                    name: "BinaryId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection TenantId(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_TenantId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection ReferenceId(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_ReferenceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Guid(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Guid]" },
                    tableName: tableName,
                    name: "Guid",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Guid(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Guid]" },
                    tableName: tableName,
                    name: "Guid",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Ver(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection BinaryType(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinaryType]" },
                    tableName: tableName,
                    name: "BinaryType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_BinaryType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinaryType]" },
                    tableName: tableName,
                    name: "BinaryType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Title(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Body(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Bin(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Bin]" },
                    tableName: tableName,
                    name: "Bin",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Bin(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Bin]" },
                    tableName: tableName,
                    name: "Bin",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Thumbnail(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Thumbnail]" },
                    tableName: tableName,
                    name: "Thumbnail",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Thumbnail(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Thumbnail]" },
                    tableName: tableName,
                    name: "Thumbnail",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Icon(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Icon]" },
                    tableName: tableName,
                    name: "Icon",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Icon(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Icon]" },
                    tableName: tableName,
                    name: "Icon",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection FileName(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FileName]" },
                    tableName: tableName,
                    name: "FileName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_FileName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[FileName]" },
                    tableName: tableName,
                    name: "FileName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Extension(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Extension]" },
                    tableName: tableName,
                    name: "Extension",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Extension(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Extension]" },
                    tableName: tableName,
                    name: "Extension",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Size(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Size]" },
                    tableName: tableName,
                    name: "Size",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Size(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Size]" },
                    tableName: tableName,
                    name: "Size",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection ContentType(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContentType]" },
                    tableName: tableName,
                    name: "ContentType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_ContentType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ContentType]" },
                    tableName: tableName,
                    name: "ContentType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection BinarySettings(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinarySettings]" },
                    tableName: tableName,
                    name: "BinarySettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_BinarySettings(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinarySettings]" },
                    tableName: tableName,
                    name: "BinarySettings",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Comments(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Creator(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection Updator(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection CreatedTime(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection UpdatedTime(
            this BinariesWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Binaries_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static BinariesWhereCollection BinaryId_In(
            this BinariesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Binaries",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[BinaryId]" },
                    tableName: tableName,
                    name: "BinaryId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[BinaryId]" },
                    tableName: tableName,
                    name: "BinaryId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static BinariesWhereCollection TenantId_In(
            this BinariesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Binaries",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static BinariesWhereCollection ReferenceId_In(
            this BinariesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Binaries",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static BinariesWhereCollection Ver_In(
            this BinariesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Binaries",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static BinariesWhereCollection Size_In(
            this BinariesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Binaries",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Size]" },
                    tableName: tableName,
                    name: "Size",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Size]" },
                    tableName: tableName,
                    name: "Size",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static BinariesWhereCollection Creator_In(
            this BinariesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Binaries",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static BinariesWhereCollection Updator_In(
            this BinariesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Binaries",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static BinariesWhereCollection BinaryId_Between(
            this BinariesWhereCollection self,
            long begin,
            long end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinaryId]" },
                    tableName: tableName,
                    name: "BinaryId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_BinaryId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[BinaryId]" },
                    tableName: tableName,
                    name: "BinaryId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection TenantId_Between(
            this BinariesWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_TenantId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TenantId]" },
                    tableName: tableName,
                    name: "TenantId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection ReferenceId_Between(
            this BinariesWhereCollection self,
            long begin,
            long end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_ReferenceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection Ver_Between(
            this BinariesWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection Size_Between(
            this BinariesWhereCollection self,
            long begin,
            long end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Size]" },
                    tableName: tableName,
                    name: "Size",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_Size_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Size]" },
                    tableName: tableName,
                    name: "Size",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection Creator_Between(
            this BinariesWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection Updator_Between(
            this BinariesWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection CreatedTime_Between(
            this BinariesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection UpdatedTime_Between(
            this BinariesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Binaries_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Binaries",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static BinariesWhereCollection Sub(
            this BinariesWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static BinariesWhereCollection Or(
            this BinariesWhereCollection self,
            BinariesWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static BinariesGroupByCollection BinariesGroupBy(
            this BinariesGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "BinaryId": return self.BinaryId();
                    case "TenantId": return self.TenantId();
                    case "ReferenceId": return self.ReferenceId();
                    case "Guid": return self.Guid();
                    case "Ver": return self.Ver();
                    case "BinaryType": return self.BinaryType();
                    case "Title": return self.Title();
                    case "Body": return self.Body();
                    case "Bin": return self.Bin();
                    case "Thumbnail": return self.Thumbnail();
                    case "Icon": return self.Icon();
                    case "FileName": return self.FileName();
                    case "Extension": return self.Extension();
                    case "Size": return self.Size();
                    case "ContentType": return self.ContentType();
                    case "BinarySettings": return self.BinarySettings();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static BinariesGroupByCollection BinaryId(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[BinaryId]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_BinaryId(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[BinaryId]", tableName: tableName);
        }

        public static BinariesGroupByCollection TenantId(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_TenantId(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[TenantId]", tableName: tableName);
        }

        public static BinariesGroupByCollection ReferenceId(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_ReferenceId(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static BinariesGroupByCollection Guid(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Guid]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Guid(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Guid]", tableName: tableName);
        }

        public static BinariesGroupByCollection Ver(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Ver(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static BinariesGroupByCollection BinaryType(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[BinaryType]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_BinaryType(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[BinaryType]", tableName: tableName);
        }

        public static BinariesGroupByCollection Title(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Title(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static BinariesGroupByCollection Body(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Body(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static BinariesGroupByCollection Bin(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Bin]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Bin(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Bin]", tableName: tableName);
        }

        public static BinariesGroupByCollection Thumbnail(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Thumbnail]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Thumbnail(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Thumbnail]", tableName: tableName);
        }

        public static BinariesGroupByCollection Icon(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Icon]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Icon(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Icon]", tableName: tableName);
        }

        public static BinariesGroupByCollection FileName(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[FileName]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_FileName(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[FileName]", tableName: tableName);
        }

        public static BinariesGroupByCollection Extension(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Extension]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Extension(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Extension]", tableName: tableName);
        }

        public static BinariesGroupByCollection Size(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Size]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Size(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Size]", tableName: tableName);
        }

        public static BinariesGroupByCollection ContentType(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[ContentType]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_ContentType(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[ContentType]", tableName: tableName);
        }

        public static BinariesGroupByCollection BinarySettings(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[BinarySettings]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_BinarySettings(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[BinarySettings]", tableName: tableName);
        }

        public static BinariesGroupByCollection Comments(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Comments(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static BinariesGroupByCollection Creator(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Creator(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static BinariesGroupByCollection Updator(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_Updator(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static BinariesGroupByCollection CreatedTime(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static BinariesGroupByCollection UpdatedTime(
            this BinariesGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Binaries_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Binaries")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static BinariesHavingCollection BinariesCount(
            this BinariesHavingCollection self,
            object value = null,
            string tableName = "Binaries",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static BinariesHavingCollection CreatedTime(
            this BinariesHavingCollection self,
            string tableName = "Binaries",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static BinariesHavingCollection UpdatedTime(
            this BinariesHavingCollection self,
            string tableName = "Binaries",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static BinariesOrderByCollection BinaryId(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BinaryId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection TenantId(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection ReferenceId(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Guid(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Guid]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Ver(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection BinaryType(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BinaryType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Title(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Body(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Bin(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Bin]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Thumbnail(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Thumbnail]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Icon(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Icon]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection FileName(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FileName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Extension(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Extension]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Size(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Size]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection ContentType(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ContentType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection BinarySettings(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BinarySettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Comments(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Creator(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection Updator(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection CreatedTime(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection UpdatedTime(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_BinaryId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BinaryId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_TenantId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[TenantId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_ReferenceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Guid(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Guid]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_BinaryType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BinaryType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Bin(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Bin]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Thumbnail(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Thumbnail]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Icon(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Icon]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_FileName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[FileName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Extension(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Extension]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Size(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Size]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_ContentType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ContentType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_BinarySettings(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[BinarySettings]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Binaries_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Binaries",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static BinariesOrderByCollection BinariesCount(
            this BinariesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static BinariesParamCollection BinaryId(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BinaryId]",
                    name: "BinaryId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_BinaryId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BinaryId]",
                    name: "BinaryId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection TenantId(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_TenantId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[TenantId]",
                    name: "TenantId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection ReferenceId(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_ReferenceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Guid(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Guid]",
                    name: "Guid",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Guid(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Guid]",
                    name: "Guid",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Ver(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection BinaryType(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BinaryType]",
                    name: "BinaryType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_BinaryType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BinaryType]",
                    name: "BinaryType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Title(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Body(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Bin(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Bin]",
                    name: "Bin",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Bin(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Bin]",
                    name: "Bin",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Thumbnail(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Thumbnail]",
                    name: "Thumbnail",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Thumbnail(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Thumbnail]",
                    name: "Thumbnail",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Icon(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Icon]",
                    name: "Icon",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Icon(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Icon]",
                    name: "Icon",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection FileName(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FileName]",
                    name: "FileName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_FileName(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[FileName]",
                    name: "FileName",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Extension(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Extension]",
                    name: "Extension",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Extension(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Extension]",
                    name: "Extension",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Size(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Size]",
                    name: "Size",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Size(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Size]",
                    name: "Size",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection ContentType(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ContentType]",
                    name: "ContentType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_ContentType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ContentType]",
                    name: "ContentType",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection BinarySettings(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BinarySettings]",
                    name: "BinarySettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_BinarySettings(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[BinarySettings]",
                    name: "BinarySettings",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Comments(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Creator(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection Updator(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection CreatedTime(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static BinariesParamCollection UpdatedTime(
            this BinariesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Binaries_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsColumnCollection PermissionsColumn()
        {
            return new PermissionsColumnCollection();
        }

        public class PermissionsColumnCollection : SqlColumnCollection
        {
            public new PermissionsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Permissions",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static PermissionsJoinCollection PermissionsJoin()
        {
            return new PermissionsJoinCollection();
        }

        public class PermissionsJoinCollection : SqlJoinCollection
        {
            public PermissionsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static PermissionsWhereCollection PermissionsWhere()
        {
            return new PermissionsWhereCollection();
        }

        public class PermissionsWhereCollection : SqlWhereCollection
        {
            public new PermissionsWhereCollection Add(
                string tableName = "Permissions",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static PermissionsGroupByCollection PermissionsGroupBy()
        {
            return new PermissionsGroupByCollection();
        }

        public class PermissionsGroupByCollection : SqlGroupByCollection
        {
            public new PermissionsGroupByCollection Add(
                string columnBracket, string tableName = "Permissions")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static PermissionsHavingCollection PermissionsHaving()
        {
            return new PermissionsHavingCollection();
        }

        public class PermissionsHavingCollection : SqlHavingCollection
        {
            public PermissionsHavingCollection Add(
                string columnBracket,
                string tableName = "Permissions",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static PermissionsOrderByCollection PermissionsOrderBy()
        {
            return new PermissionsOrderByCollection();
        }

        public class PermissionsOrderByCollection : SqlOrderByCollection
        {
            public new PermissionsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Permissions",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static PermissionsParamCollection PermissionsParam()
        {
            return new PermissionsParamCollection();
        }

        public class PermissionsParamCollection : SqlParamCollection
        {
            public new PermissionsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static PermissionsColumnCollection PermissionsColumn(
            this PermissionsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "ReferenceId":
                    return self.ReferenceId(_as: _as, function: function);
                case "DeptId":
                    return self.DeptId(_as: _as, function: function);
                case "GroupId":
                    return self.GroupId(_as: _as, function: function);
                case "UserId":
                    return self.UserId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "DeptName":
                    return self.DeptName(_as: _as, function: function);
                case "GroupName":
                    return self.GroupName(_as: _as, function: function);
                case "Name":
                    return self.Name(_as: _as, function: function);
                case "PermissionType":
                    return self.PermissionType(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static PermissionsColumnCollection ReferenceId(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_ReferenceId(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "ReferenceId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ReferenceId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection DeptId(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_DeptId(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "DeptId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection GroupId(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_GroupId(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "GroupId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection UserId(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_UserId(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "UserId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UserId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection Ver(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_Ver(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection DeptName(
            this PermissionsColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_DeptName(
            this SqlColumnCollection self,
            string tableName = "Depts",
            string columnName = "DeptName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[DeptName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection GroupName(
            this PermissionsColumnCollection self,
            string tableName = "Groups",
            string columnName = "GroupName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_GroupName(
            this SqlColumnCollection self,
            string tableName = "Groups",
            string columnName = "GroupName",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[GroupName]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection Name(
            this PermissionsColumnCollection self,
            string tableName = "Users",
            string columnName = "Name",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Name]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_Name(
            this SqlColumnCollection self,
            string tableName = "Users",
            string columnName = "Name",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Name]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection PermissionType(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "PermissionType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[PermissionType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_PermissionType(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "PermissionType",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[PermissionType]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection Comments(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_Comments(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection Creator(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_Creator(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection Updator(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_Updator(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection CreatedTime(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection UpdatedTime(
            this PermissionsColumnCollection self,
            string tableName = "Permissions",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Permissions_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Permissions",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static PermissionsColumnCollection PermissionsCount(
            this PermissionsColumnCollection self,
            string _as = "PermissionsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static PermissionsWhereCollection ReferenceId(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_ReferenceId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection DeptId(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_DeptId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection GroupId(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_GroupId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection UserId(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_UserId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection Ver(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection DeptName(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptName]" },
                    tableName: tableName,
                    name: "DeptName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_DeptName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Depts",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptName]" },
                    tableName: tableName,
                    name: "DeptName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection GroupName(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupName]" },
                    tableName: tableName,
                    name: "GroupName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_GroupName(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Groups",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupName]" },
                    tableName: tableName,
                    name: "GroupName",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection Name(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Name]" },
                    tableName: tableName,
                    name: "Name",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_Name(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Users",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Name]" },
                    tableName: tableName,
                    name: "Name",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection PermissionType(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PermissionType]" },
                    tableName: tableName,
                    name: "PermissionType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_PermissionType(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PermissionType]" },
                    tableName: tableName,
                    name: "PermissionType",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection Comments(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection Creator(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection Updator(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection CreatedTime(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection UpdatedTime(
            this PermissionsWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Permissions_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static PermissionsWhereCollection ReferenceId_In(
            this PermissionsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection DeptId_In(
            this PermissionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection GroupId_In(
            this PermissionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection UserId_In(
            this PermissionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection Ver_In(
            this PermissionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection PermissionType_In(
            this PermissionsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[PermissionType]" },
                    tableName: tableName,
                    name: "PermissionType",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[PermissionType]" },
                    tableName: tableName,
                    name: "PermissionType",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection Creator_In(
            this PermissionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection Updator_In(
            this PermissionsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Permissions",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static PermissionsWhereCollection ReferenceId_Between(
            this PermissionsWhereCollection self,
            long begin,
            long end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_ReferenceId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ReferenceId]" },
                    tableName: tableName,
                    name: "ReferenceId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection DeptId_Between(
            this PermissionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_DeptId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[DeptId]" },
                    tableName: tableName,
                    name: "DeptId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection GroupId_Between(
            this PermissionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_GroupId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[GroupId]" },
                    tableName: tableName,
                    name: "GroupId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection UserId_Between(
            this PermissionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_UserId_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UserId]" },
                    tableName: tableName,
                    name: "UserId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection Ver_Between(
            this PermissionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection PermissionType_Between(
            this PermissionsWhereCollection self,
            long begin,
            long end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PermissionType]" },
                    tableName: tableName,
                    name: "PermissionType",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_PermissionType_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[PermissionType]" },
                    tableName: tableName,
                    name: "PermissionType",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection Creator_Between(
            this PermissionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection Updator_Between(
            this PermissionsWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection CreatedTime_Between(
            this PermissionsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection UpdatedTime_Between(
            this PermissionsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Permissions_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Permissions",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static PermissionsWhereCollection Sub(
            this PermissionsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static PermissionsWhereCollection Or(
            this PermissionsWhereCollection self,
            PermissionsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static PermissionsGroupByCollection PermissionsGroupBy(
            this PermissionsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "ReferenceId": return self.ReferenceId();
                    case "DeptId": return self.DeptId();
                    case "GroupId": return self.GroupId();
                    case "UserId": return self.UserId();
                    case "Ver": return self.Ver();
                    case "DeptName": return self.DeptName();
                    case "GroupName": return self.GroupName();
                    case "Name": return self.Name();
                    case "PermissionType": return self.PermissionType();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    case "UpdatedTime": return self.UpdatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static PermissionsGroupByCollection ReferenceId(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_ReferenceId(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[ReferenceId]", tableName: tableName);
        }

        public static PermissionsGroupByCollection DeptId(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_DeptId(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[DeptId]", tableName: tableName);
        }

        public static PermissionsGroupByCollection GroupId(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_GroupId(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[GroupId]", tableName: tableName);
        }

        public static PermissionsGroupByCollection UserId(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_UserId(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[UserId]", tableName: tableName);
        }

        public static PermissionsGroupByCollection Ver(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_Ver(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static PermissionsGroupByCollection DeptName(
            this PermissionsGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptName]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_DeptName(
            this SqlGroupByCollection self, string tableName = "Depts")
        {
            return self.Add(columnBracket: "[DeptName]", tableName: tableName);
        }

        public static PermissionsGroupByCollection GroupName(
            this PermissionsGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[GroupName]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_GroupName(
            this SqlGroupByCollection self, string tableName = "Groups")
        {
            return self.Add(columnBracket: "[GroupName]", tableName: tableName);
        }

        public static PermissionsGroupByCollection Name(
            this PermissionsGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Name]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_Name(
            this SqlGroupByCollection self, string tableName = "Users")
        {
            return self.Add(columnBracket: "[Name]", tableName: tableName);
        }

        public static PermissionsGroupByCollection PermissionType(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[PermissionType]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_PermissionType(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[PermissionType]", tableName: tableName);
        }

        public static PermissionsGroupByCollection Comments(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_Comments(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static PermissionsGroupByCollection Creator(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_Creator(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static PermissionsGroupByCollection Updator(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_Updator(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static PermissionsGroupByCollection CreatedTime(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static PermissionsGroupByCollection UpdatedTime(
            this PermissionsGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Permissions_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Permissions")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static PermissionsHavingCollection PermissionsCount(
            this PermissionsHavingCollection self,
            object value = null,
            string tableName = "Permissions",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static PermissionsHavingCollection PermissionType(
            this PermissionsHavingCollection self,
            string tableName = "Permissions",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "PermissionType",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static PermissionsHavingCollection CreatedTime(
            this PermissionsHavingCollection self,
            string tableName = "Permissions",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static PermissionsHavingCollection UpdatedTime(
            this PermissionsHavingCollection self,
            string tableName = "Permissions",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "UpdatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static PermissionsOrderByCollection ReferenceId(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection DeptId(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection GroupId(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection UserId(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection Ver(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection DeptName(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection GroupName(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection Name(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Name]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection PermissionType(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[PermissionType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection Comments(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection Creator(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection Updator(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection CreatedTime(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection UpdatedTime(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_ReferenceId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ReferenceId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_DeptId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_GroupId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_UserId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UserId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_DeptName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Depts",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[DeptName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_GroupName(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Groups",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[GroupName]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_Name(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Users",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Name]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_PermissionType(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[PermissionType]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Permissions_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Permissions",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static PermissionsOrderByCollection PermissionsCount(
            this PermissionsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static PermissionsParamCollection ReferenceId(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_ReferenceId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ReferenceId]",
                    name: "ReferenceId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection DeptId(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_DeptId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[DeptId]",
                    name: "DeptId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection GroupId(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_GroupId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[GroupId]",
                    name: "GroupId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection UserId(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_UserId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UserId]",
                    name: "UserId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection Ver(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection PermissionType(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[PermissionType]",
                    name: "PermissionType",
                    value: value.ToLong(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_PermissionType(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[PermissionType]",
                    name: "PermissionType",
                    value: value.ToLong(),
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection Comments(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection Creator(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection Updator(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection CreatedTime(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static PermissionsParamCollection UpdatedTime(
            this PermissionsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Permissions_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesColumnCollection IssuesColumn()
        {
            return new IssuesColumnCollection();
        }

        public class IssuesColumnCollection : SqlColumnCollection
        {
            public new IssuesColumnCollection Add(
                string columnBracket = null,
                string tableName = "Issues",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static IssuesJoinCollection IssuesJoin()
        {
            return new IssuesJoinCollection();
        }

        public class IssuesJoinCollection : SqlJoinCollection
        {
            public IssuesJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static IssuesWhereCollection IssuesWhere()
        {
            return new IssuesWhereCollection();
        }

        public class IssuesWhereCollection : SqlWhereCollection
        {
            public new IssuesWhereCollection Add(
                string tableName = "Issues",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static IssuesGroupByCollection IssuesGroupBy()
        {
            return new IssuesGroupByCollection();
        }

        public class IssuesGroupByCollection : SqlGroupByCollection
        {
            public new IssuesGroupByCollection Add(
                string columnBracket, string tableName = "Issues")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static IssuesHavingCollection IssuesHaving()
        {
            return new IssuesHavingCollection();
        }

        public class IssuesHavingCollection : SqlHavingCollection
        {
            public IssuesHavingCollection Add(
                string columnBracket,
                string tableName = "Issues",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static IssuesOrderByCollection IssuesOrderBy()
        {
            return new IssuesOrderByCollection();
        }

        public class IssuesOrderByCollection : SqlOrderByCollection
        {
            public new IssuesOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Issues",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static IssuesParamCollection IssuesParam()
        {
            return new IssuesParamCollection();
        }

        public class IssuesParamCollection : SqlParamCollection
        {
            public new IssuesParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Issues_Title_WhereLike(
            string tableName = "Issues",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Title] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Issues_Body_WhereLike(
            string tableName = "Issues",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static IssuesColumnCollection IssuesColumn(
            this IssuesColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "SiteId":
                    return self.SiteId(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                case "IssueId":
                    return self.IssueId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "TitleBody":
                    return self.TitleBody(_as: _as, function: function);
                case "StartTime":
                    return self.StartTime(_as: _as, function: function);
                case "CompletionTime":
                    return self.CompletionTime(_as: _as, function: function);
                case "WorkValue":
                    return self.WorkValue(_as: _as, function: function);
                case "ProgressRate":
                    return self.ProgressRate(_as: _as, function: function);
                case "RemainingWorkValue":
                    return self.RemainingWorkValue(_as: _as, function: function);
                case "Status":
                    return self.Status(_as: _as, function: function);
                case "Manager":
                    return self.Manager(_as: _as, function: function);
                case "Owner":
                    return self.Owner(_as: _as, function: function);
                case "SiteTitle":
                    return self.SiteTitle(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static IssuesColumnCollection SiteId(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_SiteId(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection UpdatedTime(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection IssueId(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "IssueId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[IssueId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_IssueId(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "IssueId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[IssueId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Ver(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Ver(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Title(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Title(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Body(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Body(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection StartTime(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "StartTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[StartTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_StartTime(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "StartTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[StartTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Status(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Status",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Status]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Status(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Status",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Status]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Manager(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Manager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Manager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Manager(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Manager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Manager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Owner(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Owner",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Owner]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Owner(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Owner",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Owner]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Comments(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Comments(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Creator(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Creator(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection Updator(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_Updator(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection CreatedTime(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection TitleBody(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SqlColumnCollection Issues_TitleBody(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static IssuesColumnCollection CompletionTime(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "CompletionTime" }
                : new List<string> { "CompletionTime", "Status", "UpdatedTime" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SqlColumnCollection Issues_CompletionTime(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "CompletionTime" }
                : new List<string> { "CompletionTime", "Status", "UpdatedTime" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static IssuesColumnCollection WorkValue(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "WorkValue" }
                : new List<string> { "ProgressRate", "WorkValue", "UpdatedTime" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SqlColumnCollection Issues_WorkValue(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "WorkValue" }
                : new List<string> { "ProgressRate", "WorkValue", "UpdatedTime" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static IssuesColumnCollection ProgressRate(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "ProgressRate" }
                : new List<string> { "CreatedTime", "StartTime", "CompletionTime", "ProgressRate", "Status" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SqlColumnCollection Issues_ProgressRate(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "ProgressRate" }
                : new List<string> { "CreatedTime", "StartTime", "CompletionTime", "ProgressRate", "Status" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static IssuesColumnCollection RemainingWorkValue(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "RemainingWorkValue",
            string _as = "RemainingWorkValue",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_RemainingWorkValue(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "RemainingWorkValue",
            string _as = "RemainingWorkValue",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection SiteTitle(
            this IssuesColumnCollection self,
            string tableName = "Issues",
            string columnName = "SiteTitle",
            string _as = "SiteTitle",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Issues_SiteTitle(
            this SqlColumnCollection self,
            string tableName = "Issues",
            string columnName = "SiteTitle",
            string _as = "SiteTitle",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static IssuesColumnCollection IssuesCount(
            this IssuesColumnCollection self,
            string _as = "IssuesCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static IssuesWhereCollection SiteId(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_SiteId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection UpdatedTime(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection IssueId(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[IssueId]" },
                    tableName: tableName,
                    name: "IssueId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_IssueId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[IssueId]" },
                    tableName: tableName,
                    name: "IssueId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Ver(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Title(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Body(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection StartTime(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StartTime]" },
                    tableName: tableName,
                    name: "StartTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_StartTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StartTime]" },
                    tableName: tableName,
                    name: "StartTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Status(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Status(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Manager(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Manager(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Owner(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Owner(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Comments(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Creator(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection Updator(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection CreatedTime(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection TitleBody(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_TitleBody(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection CompletionTime(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CompletionTime]" },
                    tableName: tableName,
                    name: "CompletionTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_CompletionTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CompletionTime]" },
                    tableName: tableName,
                    name: "CompletionTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection WorkValue(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkValue]" },
                    tableName: tableName,
                    name: "WorkValue",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_WorkValue(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkValue]" },
                    tableName: tableName,
                    name: "WorkValue",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection ProgressRate(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProgressRate]" },
                    tableName: tableName,
                    name: "ProgressRate",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_ProgressRate(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProgressRate]" },
                    tableName: tableName,
                    name: "ProgressRate",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection RemainingWorkValue(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" },
                    tableName: tableName,
                    name: "RemainingWorkValue",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_RemainingWorkValue(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" },
                    tableName: tableName,
                    name: "RemainingWorkValue",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection SiteTitle(
            this IssuesWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Issues_SiteTitle(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static IssuesWhereCollection SiteId_In(
            this IssuesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection IssueId_In(
            this IssuesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[IssueId]" },
                    tableName: tableName,
                    name: "IssueId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[IssueId]" },
                    tableName: tableName,
                    name: "IssueId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection Ver_In(
            this IssuesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection WorkValue_In(
            this IssuesWhereCollection self,
            IEnumerable<decimal> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[WorkValue]" },
                    tableName: tableName,
                    name: "WorkValue",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[WorkValue]" },
                    tableName: tableName,
                    name: "WorkValue",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection ProgressRate_In(
            this IssuesWhereCollection self,
            IEnumerable<decimal> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ProgressRate]" },
                    tableName: tableName,
                    name: "ProgressRate",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ProgressRate]" },
                    tableName: tableName,
                    name: "ProgressRate",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection RemainingWorkValue_In(
            this IssuesWhereCollection self,
            IEnumerable<decimal> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" },
                    tableName: tableName,
                    name: "RemainingWorkValue",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" },
                    tableName: tableName,
                    name: "RemainingWorkValue",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection Status_In(
            this IssuesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection Manager_In(
            this IssuesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection Owner_In(
            this IssuesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection SiteTitle_In(
            this IssuesWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection Creator_In(
            this IssuesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection Updator_In(
            this IssuesWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Issues",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static IssuesWhereCollection SiteId_Between(
            this IssuesWhereCollection self,
            long begin,
            long end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_SiteId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection IssueId_Between(
            this IssuesWhereCollection self,
            long begin,
            long end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[IssueId]" },
                    tableName: tableName,
                    name: "IssueId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_IssueId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[IssueId]" },
                    tableName: tableName,
                    name: "IssueId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection Ver_Between(
            this IssuesWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection WorkValue_Between(
            this IssuesWhereCollection self,
            decimal begin,
            decimal end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkValue]" },
                    tableName: tableName,
                    name: "WorkValue",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_WorkValue_Between(
            this SqlWhereCollection self,
            decimal begin,
            decimal end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WorkValue]" },
                    tableName: tableName,
                    name: "WorkValue",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection ProgressRate_Between(
            this IssuesWhereCollection self,
            decimal begin,
            decimal end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProgressRate]" },
                    tableName: tableName,
                    name: "ProgressRate",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_ProgressRate_Between(
            this SqlWhereCollection self,
            decimal begin,
            decimal end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ProgressRate]" },
                    tableName: tableName,
                    name: "ProgressRate",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection RemainingWorkValue_Between(
            this IssuesWhereCollection self,
            decimal begin,
            decimal end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" },
                    tableName: tableName,
                    name: "RemainingWorkValue",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_RemainingWorkValue_Between(
            this SqlWhereCollection self,
            decimal begin,
            decimal end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" },
                    tableName: tableName,
                    name: "RemainingWorkValue",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection Status_Between(
            this IssuesWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_Status_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection Manager_Between(
            this IssuesWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_Manager_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection Owner_Between(
            this IssuesWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_Owner_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection SiteTitle_Between(
            this IssuesWhereCollection self,
            long begin,
            long end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_SiteTitle_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection Creator_Between(
            this IssuesWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection Updator_Between(
            this IssuesWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection UpdatedTime_Between(
            this IssuesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection StartTime_Between(
            this IssuesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StartTime]" },
                    tableName: tableName,
                    name: "StartTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_StartTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[StartTime]" },
                    tableName: tableName,
                    name: "StartTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection CompletionTime_Between(
            this IssuesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CompletionTime]" },
                    tableName: tableName,
                    name: "CompletionTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_CompletionTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CompletionTime]" },
                    tableName: tableName,
                    name: "CompletionTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection CreatedTime_Between(
            this IssuesWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Issues_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Issues",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static IssuesWhereCollection Sub(
            this IssuesWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static IssuesWhereCollection Or(
            this IssuesWhereCollection self,
            IssuesWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static IssuesGroupByCollection IssuesGroupBy(
            this IssuesGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "SiteId": return self.SiteId();
                    case "UpdatedTime": return self.UpdatedTime();
                    case "IssueId": return self.IssueId();
                    case "Ver": return self.Ver();
                    case "Title": return self.Title();
                    case "Body": return self.Body();
                    case "TitleBody": return self.TitleBody();
                    case "StartTime": return self.StartTime();
                    case "CompletionTime": return self.CompletionTime();
                    case "WorkValue": return self.WorkValue();
                    case "ProgressRate": return self.ProgressRate();
                    case "RemainingWorkValue": return self.RemainingWorkValue();
                    case "Status": return self.Status();
                    case "Manager": return self.Manager();
                    case "Owner": return self.Owner();
                    case "SiteTitle": return self.SiteTitle();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static IssuesGroupByCollection SiteId(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_SiteId(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static IssuesGroupByCollection UpdatedTime(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static IssuesGroupByCollection IssueId(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[IssueId]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_IssueId(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[IssueId]", tableName: tableName);
        }

        public static IssuesGroupByCollection Ver(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Ver(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static IssuesGroupByCollection Title(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Title(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static IssuesGroupByCollection Body(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Body(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static IssuesGroupByCollection TitleBody(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_TitleBody(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static IssuesGroupByCollection StartTime(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[StartTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_StartTime(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[StartTime]", tableName: tableName);
        }

        public static IssuesGroupByCollection CompletionTime(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[CompletionTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_CompletionTime(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[CompletionTime]", tableName: tableName);
        }

        public static IssuesGroupByCollection WorkValue(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[WorkValue]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_WorkValue(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[WorkValue]", tableName: tableName);
        }

        public static IssuesGroupByCollection ProgressRate(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[ProgressRate]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_ProgressRate(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[ProgressRate]", tableName: tableName);
        }

        public static IssuesGroupByCollection RemainingWorkValue(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_RemainingWorkValue(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))", tableName: tableName);
        }

        public static IssuesGroupByCollection Status(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Status]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Status(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Status]", tableName: tableName);
        }

        public static IssuesGroupByCollection Manager(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Manager]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Manager(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Manager]", tableName: tableName);
        }

        public static IssuesGroupByCollection Owner(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Owner]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Owner(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Owner]", tableName: tableName);
        }

        public static IssuesGroupByCollection SiteTitle(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_SiteTitle(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static IssuesGroupByCollection Comments(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Comments(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static IssuesGroupByCollection Creator(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Creator(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static IssuesGroupByCollection Updator(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_Updator(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static IssuesGroupByCollection CreatedTime(
            this IssuesGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Issues_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Issues")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static IssuesHavingCollection IssuesCount(
            this IssuesHavingCollection self,
            object value = null,
            string tableName = "Issues",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static IssuesHavingCollection WorkValue(
            this IssuesHavingCollection self,
            string tableName = "Issues",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "WorkValue",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static IssuesHavingCollection RemainingWorkValue(
            this IssuesHavingCollection self,
            string tableName = "Issues",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "RemainingWorkValue",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static IssuesHavingCollection CreatedTime(
            this IssuesHavingCollection self,
            string tableName = "Issues",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static IssuesOrderByCollection SiteId(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection UpdatedTime(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection IssueId(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[IssueId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Ver(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Title(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Body(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection TitleBody(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection StartTime(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[StartTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection CompletionTime(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CompletionTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection WorkValue(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[WorkValue]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection ProgressRate(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ProgressRate]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection RemainingWorkValue(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Status(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Status]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Manager(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Manager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Owner(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Owner]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection SiteTitle(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Comments(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Creator(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection Updator(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection CreatedTime(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_SiteId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_IssueId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[IssueId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_TitleBody(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_StartTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[StartTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_CompletionTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CompletionTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_WorkValue(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[WorkValue]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_ProgressRate(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ProgressRate]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_RemainingWorkValue(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "(#TableBracket#.[WorkValue] - (#TableBracket#.[WorkValue] * #TableBracket#.[ProgressRate] * 0.01))" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Status(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Status]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Manager(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Manager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Owner(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Owner]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_SiteTitle(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Issues_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Issues",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static IssuesOrderByCollection IssuesCount(
            this IssuesOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static IssuesParamCollection ItemId(this IssuesParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.IssueId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.IssueId(value: itemId);
            }
        }

        public static IssuesParamCollection SiteId(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_SiteId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection UpdatedTime(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection IssueId(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[IssueId]",
                    name: "IssueId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_IssueId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[IssueId]",
                    name: "IssueId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Ver(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Title(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Body(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection StartTime(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[StartTime]",
                    name: "StartTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_StartTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[StartTime]",
                    name: "StartTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection CompletionTime(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CompletionTime]",
                    name: "CompletionTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_CompletionTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CompletionTime]",
                    name: "CompletionTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection WorkValue(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[WorkValue]",
                    name: "WorkValue",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_WorkValue(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[WorkValue]",
                    name: "WorkValue",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection ProgressRate(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ProgressRate]",
                    name: "ProgressRate",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_ProgressRate(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ProgressRate]",
                    name: "ProgressRate",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Status(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Status]",
                    name: "Status",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Status(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Status]",
                    name: "Status",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Manager(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Manager]",
                    name: "Manager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Manager(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Manager]",
                    name: "Manager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Owner(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Owner]",
                    name: "Owner",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Owner(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Owner]",
                    name: "Owner",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Comments(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Creator(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection Updator(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static IssuesParamCollection CreatedTime(
            this IssuesParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Issues_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsColumnCollection ResultsColumn()
        {
            return new ResultsColumnCollection();
        }

        public class ResultsColumnCollection : SqlColumnCollection
        {
            public new ResultsColumnCollection Add(
                string columnBracket = null,
                string tableName = "Results",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static ResultsJoinCollection ResultsJoin()
        {
            return new ResultsJoinCollection();
        }

        public class ResultsJoinCollection : SqlJoinCollection
        {
            public ResultsJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static ResultsWhereCollection ResultsWhere()
        {
            return new ResultsWhereCollection();
        }

        public class ResultsWhereCollection : SqlWhereCollection
        {
            public new ResultsWhereCollection Add(
                string tableName = "Results",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static ResultsGroupByCollection ResultsGroupBy()
        {
            return new ResultsGroupByCollection();
        }

        public class ResultsGroupByCollection : SqlGroupByCollection
        {
            public new ResultsGroupByCollection Add(
                string columnBracket, string tableName = "Results")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static ResultsHavingCollection ResultsHaving()
        {
            return new ResultsHavingCollection();
        }

        public class ResultsHavingCollection : SqlHavingCollection
        {
            public ResultsHavingCollection Add(
                string columnBracket,
                string tableName = "Results",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static ResultsOrderByCollection ResultsOrderBy()
        {
            return new ResultsOrderByCollection();
        }

        public class ResultsOrderByCollection : SqlOrderByCollection
        {
            public new ResultsOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Results",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static ResultsParamCollection ResultsParam()
        {
            return new ResultsParamCollection();
        }

        public class ResultsParamCollection : SqlParamCollection
        {
            public new ResultsParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Results_Title_WhereLike(
            string tableName = "Results",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Title] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Results_Body_WhereLike(
            string tableName = "Results",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static ResultsColumnCollection ResultsColumn(
            this ResultsColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "SiteId":
                    return self.SiteId(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                case "ResultId":
                    return self.ResultId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "TitleBody":
                    return self.TitleBody(_as: _as, function: function);
                case "Status":
                    return self.Status(_as: _as, function: function);
                case "Manager":
                    return self.Manager(_as: _as, function: function);
                case "Owner":
                    return self.Owner(_as: _as, function: function);
                case "SiteTitle":
                    return self.SiteTitle(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static ResultsColumnCollection SiteId(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_SiteId(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection UpdatedTime(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection ResultId(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "ResultId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ResultId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_ResultId(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "ResultId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[ResultId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Ver(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Ver(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Title(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Title(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Body(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Body(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Status(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Status",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Status]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Status(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Status",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Status]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Manager(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Manager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Manager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Manager(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Manager",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Manager]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Owner(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Owner",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Owner]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Owner(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Owner",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Owner]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Comments(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Comments(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Creator(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Creator(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection Updator(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_Updator(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection CreatedTime(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection TitleBody(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SqlColumnCollection Results_TitleBody(
            this SqlColumnCollection self,
            string tableName = "Results",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static ResultsColumnCollection SiteTitle(
            this ResultsColumnCollection self,
            string tableName = "Results",
            string columnName = "SiteTitle",
            string _as = "SiteTitle",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Results_SiteTitle(
            this SqlColumnCollection self,
            string tableName = "Results",
            string columnName = "SiteTitle",
            string _as = "SiteTitle",
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static ResultsColumnCollection ResultsCount(
            this ResultsColumnCollection self,
            string _as = "ResultsCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static ResultsWhereCollection SiteId(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_SiteId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection UpdatedTime(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection ResultId(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResultId]" },
                    tableName: tableName,
                    name: "ResultId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_ResultId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResultId]" },
                    tableName: tableName,
                    name: "ResultId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Ver(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Title(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Body(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Status(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Status(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Manager(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Manager(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Owner(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Owner(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Comments(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Creator(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection Updator(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection CreatedTime(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection TitleBody(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_TitleBody(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection SiteTitle(
            this ResultsWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Results_SiteTitle(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static ResultsWhereCollection SiteId_In(
            this ResultsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection ResultId_In(
            this ResultsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[ResultId]" },
                    tableName: tableName,
                    name: "ResultId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[ResultId]" },
                    tableName: tableName,
                    name: "ResultId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection Ver_In(
            this ResultsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection Status_In(
            this ResultsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection Manager_In(
            this ResultsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection Owner_In(
            this ResultsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection SiteTitle_In(
            this ResultsWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection Creator_In(
            this ResultsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection Updator_In(
            this ResultsWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Results",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static ResultsWhereCollection SiteId_Between(
            this ResultsWhereCollection self,
            long begin,
            long end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_SiteId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection ResultId_Between(
            this ResultsWhereCollection self,
            long begin,
            long end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResultId]" },
                    tableName: tableName,
                    name: "ResultId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_ResultId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[ResultId]" },
                    tableName: tableName,
                    name: "ResultId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection Ver_Between(
            this ResultsWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection Status_Between(
            this ResultsWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_Status_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Status]" },
                    tableName: tableName,
                    name: "Status",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection Manager_Between(
            this ResultsWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_Manager_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Manager]" },
                    tableName: tableName,
                    name: "Manager",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection Owner_Between(
            this ResultsWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_Owner_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Owner]" },
                    tableName: tableName,
                    name: "Owner",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection SiteTitle_Between(
            this ResultsWhereCollection self,
            long begin,
            long end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_SiteTitle_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteTitle",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection Creator_Between(
            this ResultsWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection Updator_Between(
            this ResultsWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection UpdatedTime_Between(
            this ResultsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection CreatedTime_Between(
            this ResultsWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Results_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Results",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static ResultsWhereCollection Sub(
            this ResultsWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static ResultsWhereCollection Or(
            this ResultsWhereCollection self,
            ResultsWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static ResultsGroupByCollection ResultsGroupBy(
            this ResultsGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "SiteId": return self.SiteId();
                    case "UpdatedTime": return self.UpdatedTime();
                    case "ResultId": return self.ResultId();
                    case "Ver": return self.Ver();
                    case "Title": return self.Title();
                    case "Body": return self.Body();
                    case "TitleBody": return self.TitleBody();
                    case "Status": return self.Status();
                    case "Manager": return self.Manager();
                    case "Owner": return self.Owner();
                    case "SiteTitle": return self.SiteTitle();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static ResultsGroupByCollection SiteId(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_SiteId(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static ResultsGroupByCollection UpdatedTime(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static ResultsGroupByCollection ResultId(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[ResultId]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_ResultId(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[ResultId]", tableName: tableName);
        }

        public static ResultsGroupByCollection Ver(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Ver(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static ResultsGroupByCollection Title(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Title(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static ResultsGroupByCollection Body(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Body(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static ResultsGroupByCollection TitleBody(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_TitleBody(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static ResultsGroupByCollection Status(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Status]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Status(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Status]", tableName: tableName);
        }

        public static ResultsGroupByCollection Manager(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Manager]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Manager(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Manager]", tableName: tableName);
        }

        public static ResultsGroupByCollection Owner(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Owner]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Owner(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Owner]", tableName: tableName);
        }

        public static ResultsGroupByCollection SiteTitle(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_SiteTitle(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static ResultsGroupByCollection Comments(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Comments(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static ResultsGroupByCollection Creator(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Creator(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static ResultsGroupByCollection Updator(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_Updator(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static ResultsGroupByCollection CreatedTime(
            this ResultsGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Results_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Results")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static ResultsHavingCollection ResultsCount(
            this ResultsHavingCollection self,
            object value = null,
            string tableName = "Results",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static ResultsHavingCollection CreatedTime(
            this ResultsHavingCollection self,
            string tableName = "Results",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static ResultsOrderByCollection SiteId(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection UpdatedTime(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection ResultId(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ResultId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Ver(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Title(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Body(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection TitleBody(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Status(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Status]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Manager(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Manager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Owner(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Owner]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection SiteTitle(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Comments(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Creator(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection Updator(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection CreatedTime(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_SiteId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_ResultId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[ResultId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_TitleBody(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Status(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Status]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Manager(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Manager]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Owner(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Owner]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_SiteTitle(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Results_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Results",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static ResultsOrderByCollection ResultsCount(
            this ResultsOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static ResultsParamCollection ItemId(this ResultsParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.ResultId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.ResultId(value: itemId);
            }
        }

        public static ResultsParamCollection SiteId(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_SiteId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection UpdatedTime(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection ResultId(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ResultId]",
                    name: "ResultId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_ResultId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[ResultId]",
                    name: "ResultId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Ver(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Title(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Body(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Status(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Status]",
                    name: "Status",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Status(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Status]",
                    name: "Status",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Manager(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Manager]",
                    name: "Manager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Manager(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Manager]",
                    name: "Manager",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Owner(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Owner]",
                    name: "Owner",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Owner(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Owner]",
                    name: "Owner",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Comments(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Creator(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection Updator(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static ResultsParamCollection CreatedTime(
            this ResultsParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Results_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisColumnCollection WikisColumn()
        {
            return new WikisColumnCollection();
        }

        public class WikisColumnCollection : SqlColumnCollection
        {
            public new WikisColumnCollection Add(
                string columnBracket = null,
                string tableName = "Wikis",
                string columnName = null,
                string _as = null,
                Sqls.Functions function = Sqls.Functions.None,
                SqlStatement sub = null,
                bool subPrefix = true)
            {
                base.Add(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    columnName: columnName,
                    _as: _as,
                    function: function,
                    sub: sub,
                    subPrefix: subPrefix);
                return this;
            }
        }

        public static WikisJoinCollection WikisJoin()
        {
            return new WikisJoinCollection();
        }

        public class WikisJoinCollection : SqlJoinCollection
        {
            public WikisJoinCollection Add(params SqlJoin[] sqlJoinCollection)
            {
                sqlJoinCollection.ForEach(sqlJoin => base.Add(sqlJoin));
                return this;
            }
        }

        public static WikisWhereCollection WikisWhere()
        {
            return new WikisWhereCollection();
        }

        public class WikisWhereCollection : SqlWhereCollection
        {
            public new WikisWhereCollection Add(
                string tableName = "Wikis",
                string[] columnBrackets = null,
                string name = null,
                object value = null,
                string _operator = "=",
                string multiColumnOperator = " or ",
                string multiParamOperator = " and ",
                SqlStatement subLeft = null,
                SqlStatement sub = null,
                bool subPrefix = true,
                string raw = null,
                bool _using = true)
            {
                if (_using)
                {
                    Add(new SqlWhere(
                        columnBrackets: columnBrackets,
                        tableName: tableName,
                        name: name,
                        value: value,
                        _operator: _operator,
                        multiColumnOperator: multiColumnOperator,
                        multiParamOperator: multiParamOperator,
                        subLeft: subLeft,
                        sub: sub,
                        subPrefix: subPrefix,
                        raw: raw));
                }
                return this;
            }
        }

        public static WikisGroupByCollection WikisGroupBy()
        {
            return new WikisGroupByCollection();
        }

        public class WikisGroupByCollection : SqlGroupByCollection
        {
            public new WikisGroupByCollection Add(
                string columnBracket, string tableName = "Wikis")
            {
                Add(new SqlGroupBy(
                    columnBracket: columnBracket,
                    tableName: tableName));
                return this;
            }
        }

        public static WikisHavingCollection WikisHaving()
        {
            return new WikisHavingCollection();
        }

        public class WikisHavingCollection : SqlHavingCollection
        {
            public WikisHavingCollection Add(
                string columnBracket,
                string tableName = "Wikis",
                object value = null,
                string _operator = "=",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlHaving(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    value: value,
                    _operator: _operator,
                    function: function));
                return this;
            }
        }

        public static WikisOrderByCollection WikisOrderBy()
        {
            return new WikisOrderByCollection();
        }

        public class WikisOrderByCollection : SqlOrderByCollection
        {
            public new WikisOrderByCollection Add(
                string columnBracket,
                SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
                string tableName = "Wikis",
                Sqls.Functions function = Sqls.Functions.None)
            {
                Add(new SqlOrderBy(
                    columnBracket: columnBracket,
                    tableName: tableName,
                    orderType: orderType,
                    function: function));
                return this;
            }
        }

        public static WikisParamCollection WikisParam()
        {
            return new WikisParamCollection();
        }

        public class WikisParamCollection : SqlParamCollection
        {
            public new WikisParamCollection Add(
                string columnBracket = null,
                string name = null,
                object value = null,
                SqlStatement sub = null,
                string raw = null,
                bool _using = true)
            {
                Add(new SqlParam(
                    columnBracket: columnBracket,
                    name: name,
                    value: value,
                    sub: sub,
                    raw: raw,
                    _using: _using));
                return this;
            }
        }

        public static string Wikis_Title_WhereLike(
            string tableName = "Wikis",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Title] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static string Wikis_Body_WhereLike(
            string tableName = "Wikis",
            string name = "SearchText",
            bool forward = false)
        {
            return "([" + tableName + "].[Body] like " + 
                (forward
                    ? string.Empty
                    : "'%' + ") +
                $"@{name}#ParamCount#_#CommandCount# + '%')";
        }

        public static WikisColumnCollection WikisColumn(
            this WikisColumnCollection self,
            string columnName,
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            switch (columnName)
            {
                case "SiteId":
                    return self.SiteId(_as: _as, function: function);
                case "UpdatedTime":
                    return self.UpdatedTime(_as: _as, function: function);
                case "WikiId":
                    return self.WikiId(_as: _as, function: function);
                case "Ver":
                    return self.Ver(_as: _as, function: function);
                case "Title":
                    return self.Title(_as: _as, function: function);
                case "Body":
                    return self.Body(_as: _as, function: function);
                case "TitleBody":
                    return self.TitleBody(_as: _as, function: function);
                case "Comments":
                    return self.Comments(_as: _as, function: function);
                case "Creator":
                    return self.Creator(_as: _as, function: function);
                case "Updator":
                    return self.Updator(_as: _as, function: function);
                case "CreatedTime":
                    return self.CreatedTime(_as: _as, function: function);
                default:
                    return columnName != null && Def.ExtendedColumnTypes.ContainsKey(columnName)
                        ? self.Add(
                            columnBracket: $"[{columnName}]",
                            columnName: columnName,
                            _as: _as,
                            function: function)
                        : self;
            }
        }

        public static WikisColumnCollection SiteId(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_SiteId(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "SiteId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[SiteId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection UpdatedTime(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_UpdatedTime(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "UpdatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[UpdatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection WikiId(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "WikiId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[WikiId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_WikiId(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "WikiId",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[WikiId]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection Ver(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_Ver(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Ver",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Ver]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection Title(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_Title(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Title",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Title]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection Body(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_Body(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Body",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Body]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection Comments(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_Comments(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Comments",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Comments]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection Creator(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_Creator(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Creator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Creator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection Updator(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_Updator(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "Updator",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[Updator]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection CreatedTime(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static SqlColumnCollection Wikis_CreatedTime(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string columnName = "CreatedTime",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None,
            SqlStatement sub = null)
        {
            return self.Add(
                columnBracket: "[CreatedTime]",
                tableName: tableName,
                columnName: columnName,
                _as: _as,
                function: function,
                sub: sub);
        }

        public static WikisColumnCollection TitleBody(
            this WikisColumnCollection self,
            string tableName = "Wikis",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static SqlColumnCollection Wikis_TitleBody(
            this SqlColumnCollection self,
            string tableName = "Wikis",
            string _as = null,
            Sqls.Functions function = Sqls.Functions.None)
        {
            (function != Sqls.Functions.None || function == Sqls.Functions.SingleColumn
                ? new List<string> { "TitleBody" }
                : new List<string> { "Title", "Body" })
                    .Select((o, i) => new { ColumnName = o, Index = i })
                    .ForEach(data =>
                        self.Add(
                            columnBracket: "[" + data.ColumnName + "]",
                            tableName: tableName,
                            _as: _as?.Contains(",") == true
                                ? _as.Split_1st() + "," + data.ColumnName
                                : _as,
                            function: function));
            return self;
        }

        public static WikisColumnCollection WikisCount(
            this WikisColumnCollection self,
            string _as = "WikisCount")
        {
            return self.Add(
                columnBracket: "*",
                tableName: null,
                _as: _as,
                function: Sqls.Functions.Count);
        }

        public static WikisWhereCollection SiteId(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_SiteId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection UpdatedTime(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_UpdatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection WikiId(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WikiId]" },
                    tableName: tableName,
                    name: "WikiId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_WikiId(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WikiId]" },
                    tableName: tableName,
                    name: "WikiId",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection Ver(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_Ver(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection Title(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_Title(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Title]" },
                    tableName: tableName,
                    name: "Title",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection Body(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_Body(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Body]" },
                    tableName: tableName,
                    name: "Body",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection Comments(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_Comments(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Comments]" },
                    tableName: tableName,
                    name: "Comments",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection Creator(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_Creator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection Updator(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_Updator(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection CreatedTime(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_CreatedTime(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement subLeft = null,
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    subLeft: subLeft,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection TitleBody(
            this WikisWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static SqlWhereCollection Wikis_TitleBody(
            this SqlWhereCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = "=",
            string multiColumnOperator = " or ",
            string multiParamOperator = " and ",
            SqlStatement sub = null,
            bool subPrefix = true,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[TitleBody]" },
                    tableName: tableName,
                    name: "TitleBody",
                    value: value,
                    _operator: _operator,
                    multiColumnOperator: multiColumnOperator,
                    multiParamOperator: multiParamOperator,
                    sub: sub,
                    subPrefix: subPrefix,
                    raw: raw)
                : self;
        }

        public static WikisWhereCollection SiteId_In(
            this WikisWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Wikis",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static WikisWhereCollection WikiId_In(
            this WikisWhereCollection self,
            IEnumerable<long> value = null,
            string tableName = "Wikis",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[WikiId]" },
                    tableName: tableName,
                    name: "WikiId",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[WikiId]" },
                    tableName: tableName,
                    name: "WikiId",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static WikisWhereCollection Ver_In(
            this WikisWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Wikis",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static WikisWhereCollection Creator_In(
            this WikisWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Wikis",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static WikisWhereCollection Updator_In(
            this WikisWhereCollection self,
            IEnumerable<int> value = null,
            string tableName = "Wikis",
            SqlStatement sub = null,
            bool negative = false,
            bool _using = true)
        {
            if (!_using)
            {
                return self;
            }
            if (sub != null)
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    sub: sub);
            }
            else if (value != null && value.Any())
            {
                return self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: !negative ? " in " : " not in ",
                    raw: "({0})".Params(value.Join()));
            }
            else
            {
                return !negative
                    ? self.Add(raw: "1=0")
                    : self;
            }
        }

        public static WikisWhereCollection SiteId_Between(
            this WikisWhereCollection self,
            long begin,
            long end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Wikis_SiteId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[SiteId]" },
                    tableName: tableName,
                    name: "SiteId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static WikisWhereCollection WikiId_Between(
            this WikisWhereCollection self,
            long begin,
            long end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WikiId]" },
                    tableName: tableName,
                    name: "WikiId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Wikis_WikiId_Between(
            this SqlWhereCollection self,
            long begin,
            long end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[WikiId]" },
                    tableName: tableName,
                    name: "WikiId",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static WikisWhereCollection Ver_Between(
            this WikisWhereCollection self,
            int begin,
            int end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Wikis_Ver_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Ver]" },
                    tableName: tableName,
                    name: "Ver",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static WikisWhereCollection Creator_Between(
            this WikisWhereCollection self,
            int begin,
            int end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Wikis_Creator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Creator]" },
                    tableName: tableName,
                    name: "Creator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static WikisWhereCollection Updator_Between(
            this WikisWhereCollection self,
            int begin,
            int end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Wikis_Updator_Between(
            this SqlWhereCollection self,
            int begin,
            int end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[Updator]" },
                    tableName: tableName,
                    name: "Updator",
                    _operator: " between ",
                    raw: "{0} and {1} ".Params(begin, end))
                : self;
        }

        public static WikisWhereCollection UpdatedTime_Between(
            this WikisWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Wikis_UpdatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[UpdatedTime]" },
                    tableName: tableName,
                    name: "UpdatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static WikisWhereCollection CreatedTime_Between(
            this WikisWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static SqlWhereCollection Wikis_CreatedTime_Between(
            this SqlWhereCollection self,
            DateTime begin,
            DateTime end,
            string tableName = "Wikis",
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBrackets: new string[] { "[CreatedTime]" },
                    tableName: tableName,
                    name: "CreatedTime",
                    _operator: " between ",
                    raw: "'{0}' and '{1}' ".Params(begin, end))
                : self;
        }

        public static WikisWhereCollection Sub(
            this WikisWhereCollection self,
            SqlStatement sub,
            object value = null,
            string _operator = "=",
            bool _using = true)
        {
            return _using 
                ? self.Add(
                    null, null, null, value, _operator, sub: sub)
                : self;
        }

        public static WikisWhereCollection Or(
            this WikisWhereCollection self,
            WikisWhereCollection or,
            bool _using = true)
        {
            self.Add(or: or, _using: _using);
            return self;
        }

        public static WikisGroupByCollection WikisGroupBy(
            this WikisGroupByCollection self, string columnName, bool _using = true)
        {
            if (_using)
            {
                switch (columnName)
                {
                    case "SiteId": return self.SiteId();
                    case "UpdatedTime": return self.UpdatedTime();
                    case "WikiId": return self.WikiId();
                    case "Ver": return self.Ver();
                    case "Title": return self.Title();
                    case "Body": return self.Body();
                    case "TitleBody": return self.TitleBody();
                    case "Comments": return self.Comments();
                    case "Creator": return self.Creator();
                    case "Updator": return self.Updator();
                    case "CreatedTime": return self.CreatedTime();
                    default:
                        return Def.ExtendedColumnTypes.ContainsKey(columnName)
                            ? self.Add(columnBracket: $"[{columnName}]")
                            : self;
                }
            }
            else
            {
                return self;
            }
        }

        public static WikisGroupByCollection SiteId(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_SiteId(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[SiteId]", tableName: tableName);
        }

        public static WikisGroupByCollection UpdatedTime(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_UpdatedTime(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[UpdatedTime]", tableName: tableName);
        }

        public static WikisGroupByCollection WikiId(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[WikiId]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_WikiId(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[WikiId]", tableName: tableName);
        }

        public static WikisGroupByCollection Ver(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_Ver(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Ver]", tableName: tableName);
        }

        public static WikisGroupByCollection Title(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_Title(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Title]", tableName: tableName);
        }

        public static WikisGroupByCollection Body(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_Body(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Body]", tableName: tableName);
        }

        public static WikisGroupByCollection TitleBody(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_TitleBody(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[TitleBody]", tableName: tableName);
        }

        public static WikisGroupByCollection Comments(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_Comments(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Comments]", tableName: tableName);
        }

        public static WikisGroupByCollection Creator(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_Creator(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Creator]", tableName: tableName);
        }

        public static WikisGroupByCollection Updator(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_Updator(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[Updator]", tableName: tableName);
        }

        public static WikisGroupByCollection CreatedTime(
            this WikisGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static SqlGroupByCollection Wikis_CreatedTime(
            this SqlGroupByCollection self, string tableName = "Wikis")
        {
            return self.Add(columnBracket: "[CreatedTime]", tableName: tableName);
        }

        public static WikisHavingCollection WikisCount(
            this WikisHavingCollection self,
            object value = null,
            string tableName = "Wikis",
            string _operator = null)
        {
            return self.Add(
                columnBracket: "*",
                value: value,
                tableName: tableName,
                _operator: _operator,
                function: Sqls.Functions.Count);
        }

        public static WikisHavingCollection CreatedTime(
            this WikisHavingCollection self,
            string tableName = "Wikis",
            object value = null,
            string _operator = "=",
            Sqls.Functions function = Sqls.Functions.None)
        {
            return self.Add(
                columnBracket: "CreatedTime",
                tableName: tableName,
                value: value,
                _operator: _operator,
                function: function);
        }

        public static WikisOrderByCollection SiteId(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection UpdatedTime(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection WikiId(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[WikiId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection Ver(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection Title(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection Body(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection TitleBody(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection Comments(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection Creator(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection Updator(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection CreatedTime(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_SiteId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[SiteId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_UpdatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[UpdatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_WikiId(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[WikiId]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_Ver(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Ver]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_Title(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_Body(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_TitleBody(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Title]", "[Body]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_Comments(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Comments]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_Creator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Creator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_Updator(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[Updator]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static SqlOrderByCollection Wikis_CreatedTime(
            this SqlOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc,
            string tableName = "Wikis",
            Sqls.Functions function = Sqls.Functions.None)
        {
            new List<string> { "[CreatedTime]" }.ForEach(columnBracket =>
                self.Add(
                    columnBracket: columnBracket,
                    orderType: orderType,
                    tableName: tableName,
                    function: function));
            return self;
        }

        public static WikisOrderByCollection WikisCount(
            this WikisOrderByCollection self,
            SqlOrderBy.Types orderType = SqlOrderBy.Types.asc)
        {
            return self.Add(
                columnBracket: "*",
                orderType: orderType,
                function: Sqls.Functions.Count);
        }

        public static WikisParamCollection ItemId(this WikisParamCollection self, long itemId)
        {
            if (itemId == 0)
            {
                return self.WikiId(raw: Def.Sql.Identity);
            }
            else
            {
                return self.WikiId(value: itemId);
            }
        }

        public static WikisParamCollection SiteId(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_SiteId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[SiteId]",
                    name: "SiteId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection UpdatedTime(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_UpdatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[UpdatedTime]",
                    name: "UpdatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection WikiId(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[WikiId]",
                    name: "WikiId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_WikiId(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[WikiId]",
                    name: "WikiId",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection Ver(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_Ver(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Ver]",
                    name: "Ver",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection Title(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_Title(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Title]",
                    name: "Title",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection Body(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_Body(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Body]",
                    name: "Body",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection Comments(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_Comments(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Comments]",
                    name: "Comments",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection Creator(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_Creator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Creator]",
                    name: "Creator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection Updator(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_Updator(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[Updator]",
                    name: "Updator",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static WikisParamCollection CreatedTime(
            this WikisParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static SqlParamCollection Wikis_CreatedTime(
            this SqlParamCollection self,
            object value = null,
            SqlStatement sub = null,
            string raw = null,
            bool _using = true)
        {
            return _using
                ? self.Add(
                    columnBracket: "[CreatedTime]",
                    name: "CreatedTime",
                    value: value,
                    sub: sub,
                    raw: raw)
                : self;
        }

        public static TenantsColumnCollection TenantsDefaultColumns()
        {
            var column = TenantsColumn()
                .TenantId()
                .Ver()
                .TenantName()
                .Title()
                .Body()
                .ContractSettings()
                .ContractDeadline()
                .DisableAllUsersPermission()
                .LogoType()
                .HtmlTitleTop()
                .HtmlTitleSite()
                .HtmlTitleRecord()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Tenants")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.TenantsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static TenantsJoinCollection TenantsJoinDefault()
        {
            var join = TenantsJoin();
            return join;
        }

        public static TenantsWhereCollection TenantsWhereDefault(TenantModel tenantModel)
        {
            return TenantsWhere()
                .TenantId(tenantModel.TenantId);
        }

        public static TenantsParamCollection TenantsParamDefault(
            Context context,
            TenantModel tenantModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = TenantsParam()
                .Ver(tenantModel.Ver, _using: tenantModel.Ver_Updated(context) || setDefault || (otherInitValue && !tenantModel.Ver.InitialValue(context)))
                .TenantName(tenantModel.TenantName.MaxLength(1024), _using: tenantModel.TenantName_Updated(context) || setDefault || (otherInitValue && !tenantModel.TenantName.InitialValue(context)))
                .Title(tenantModel.Title.Value.MaxLength(1024), _using: tenantModel.Title_Updated(context) || (otherInitValue && !tenantModel.Title.InitialValue(context)))
                .Body(tenantModel.Body, _using: tenantModel.Body_Updated(context) || (otherInitValue && !tenantModel.Body.InitialValue(context)))
                .ContractSettings(tenantModel.ContractSettings?.RecordingJson(), _using: tenantModel.ContractSettings_Updated(context) || (otherInitValue && !tenantModel.ContractSettings.InitialValue(context)))
                .ContractDeadline(tenantModel.ContractDeadline, _using: tenantModel.ContractDeadline_Updated(context) || (otherInitValue && !tenantModel.ContractDeadline.InitialValue(context)))
                .DisableAllUsersPermission(tenantModel.DisableAllUsersPermission, _using: tenantModel.DisableAllUsersPermission_Updated(context) || (otherInitValue && !tenantModel.DisableAllUsersPermission.InitialValue(context)))
                .LogoType(tenantModel.LogoType.ToInt(), _using: tenantModel.LogoType_Updated(context) || setDefault || (otherInitValue && !tenantModel.LogoType.InitialValue(context)))
                .HtmlTitleTop(tenantModel.HtmlTitleTop.MaxLength(1024), _using: tenantModel.HtmlTitleTop_Updated(context) || setDefault || (otherInitValue && !tenantModel.HtmlTitleTop.InitialValue(context)))
                .HtmlTitleSite(tenantModel.HtmlTitleSite.MaxLength(1024), _using: tenantModel.HtmlTitleSite_Updated(context) || setDefault || (otherInitValue && !tenantModel.HtmlTitleSite.InitialValue(context)))
                .HtmlTitleRecord(tenantModel.HtmlTitleRecord.MaxLength(1024), _using: tenantModel.HtmlTitleRecord_Updated(context) || setDefault || (otherInitValue && !tenantModel.HtmlTitleRecord.InitialValue(context)))
                .Comments(tenantModel.Comments.ToJson(), _using: tenantModel.Comments_Updated(context) || (otherInitValue && !tenantModel.Comments.InitialValue(context)));
            tenantModel.ClassHash
                .Where(o => tenantModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !tenantModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            tenantModel.NumHash
                .Where(o => tenantModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !tenantModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            tenantModel.DateHash
                .Where(o => tenantModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !tenantModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            tenantModel.DescriptionHash
                .Where(o => tenantModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !tenantModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            tenantModel.CheckHash
                .Where(o => tenantModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !tenantModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            tenantModel.AttachmentsHash
                .Where(o => tenantModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !tenantModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static DemosColumnCollection DemosDefaultColumns()
        {
            var column = DemosColumn()
                .DemoId()
                .Ver()
                .TenantId()
                .Title()
                .LoginId()
                .Passphrase()
                .MailAddress()
                .Initialized()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Demos")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.DemosColumn(columnDefinition.ColumnName));
            return column;
        }

        public static DemosJoinCollection DemosJoinDefault()
        {
            var join = DemosJoin();
            return join;
        }

        public static DemosWhereCollection DemosWhereDefault(DemoModel demoModel)
        {
            return DemosWhere()
                .DemoId(demoModel.DemoId);
        }

        public static DemosParamCollection DemosParamDefault(
            Context context,
            DemoModel demoModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = DemosParam()
                .TenantId(demoModel.TenantId)
                .Ver(demoModel.Ver, _using: demoModel.Ver_Updated(context) || setDefault || (otherInitValue && !demoModel.Ver.InitialValue(context)))
                .Title(demoModel.Title.Value.MaxLength(1024), _using: demoModel.Title_Updated(context) || (otherInitValue && !demoModel.Title.InitialValue(context)))
                .LoginId(demoModel.LoginId.MaxLength(256), _using: demoModel.LoginId_Updated(context) || (otherInitValue && !demoModel.LoginId.InitialValue(context)))
                .Passphrase(demoModel.Passphrase.MaxLength(34), _using: demoModel.Passphrase_Updated(context) || setDefault || (otherInitValue && !demoModel.Passphrase.InitialValue(context)))
                .MailAddress(demoModel.MailAddress.MaxLength(2048), _using: demoModel.MailAddress_Updated(context) || setDefault || (otherInitValue && !demoModel.MailAddress.InitialValue(context)))
                .Initialized(demoModel.Initialized, _using: demoModel.Initialized_Updated(context) || setDefault || (otherInitValue && !demoModel.Initialized.InitialValue(context)))
                .Comments(demoModel.Comments.ToJson(), _using: demoModel.Comments_Updated(context) || (otherInitValue && !demoModel.Comments.InitialValue(context)));
            demoModel.ClassHash
                .Where(o => demoModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !demoModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            demoModel.NumHash
                .Where(o => demoModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !demoModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            demoModel.DateHash
                .Where(o => demoModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !demoModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            demoModel.DescriptionHash
                .Where(o => demoModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !demoModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            demoModel.CheckHash
                .Where(o => demoModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !demoModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            demoModel.AttachmentsHash
                .Where(o => demoModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !demoModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static SessionsColumnCollection SessionsDefaultColumns()
        {
            var column = SessionsColumn()
                .SessionGuid()
                .Key()
                .Page()
                .Value()
                .ReadOnce()
                .UserArea()
                .Ver()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Sessions")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.SessionsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static SessionsJoinCollection SessionsJoinDefault()
        {
            var join = SessionsJoin();
            return join;
        }

        public static SessionsWhereCollection SessionsWhereDefault(SessionModel sessionModel)
        {
            return SessionsWhere()
                .SessionGuid(sessionModel.SessionGuid.MaxLength(32))
                .Key(sessionModel.Key.MaxLength(256))
                .Page(sessionModel.Page.MaxLength(32));
        }

        public static SessionsParamCollection SessionsParamDefault(
            Context context,
            SessionModel sessionModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = SessionsParam()
                .SessionGuid(sessionModel.SessionGuid.MaxLength(32), _using: sessionModel.SessionGuid_Updated(context) || setDefault || (otherInitValue && !sessionModel.SessionGuid.InitialValue(context)))
                .Key(sessionModel.Key.MaxLength(256), _using: sessionModel.Key_Updated(context) || setDefault || (otherInitValue && !sessionModel.Key.InitialValue(context)))
                .Page(sessionModel.Page.MaxLength(32), _using: sessionModel.Page_Updated(context) || setDefault || (otherInitValue && !sessionModel.Page.InitialValue(context)))
                .Value(sessionModel.Value, _using: sessionModel.Value_Updated(context) || setDefault || (otherInitValue && !sessionModel.Value.InitialValue(context)))
                .ReadOnce(sessionModel.ReadOnce, _using: sessionModel.ReadOnce_Updated(context) || (otherInitValue && !sessionModel.ReadOnce.InitialValue(context)))
                .UserArea(sessionModel.UserArea, _using: sessionModel.UserArea_Updated(context) || (otherInitValue && !sessionModel.UserArea.InitialValue(context)))
                .Ver(sessionModel.Ver, _using: sessionModel.Ver_Updated(context) || setDefault || (otherInitValue && !sessionModel.Ver.InitialValue(context)))
                .Comments(sessionModel.Comments.ToJson(), _using: sessionModel.Comments_Updated(context) || (otherInitValue && !sessionModel.Comments.InitialValue(context)));
            sessionModel.ClassHash
                .Where(o => sessionModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !sessionModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            sessionModel.NumHash
                .Where(o => sessionModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !sessionModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sessionModel.DateHash
                .Where(o => sessionModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !sessionModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sessionModel.DescriptionHash
                .Where(o => sessionModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !sessionModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sessionModel.CheckHash
                .Where(o => sessionModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !sessionModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sessionModel.AttachmentsHash
                .Where(o => sessionModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !sessionModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static SysLogsColumnCollection SysLogsDefaultColumns()
        {
            var column = SysLogsColumn()
                .CreatedTime()
                .SysLogId()
                .Ver()
                .SysLogType()
                .OnAzure()
                .MachineName()
                .ServiceName()
                .TenantName()
                .Application()
                .Class()
                .Method()
                .RequestData()
                .HttpMethod()
                .RequestSize()
                .ResponseSize()
                .Elapsed()
                .ApplicationAge()
                .ApplicationRequestInterval()
                .SessionAge()
                .SessionRequestInterval()
                .WorkingSet64()
                .VirtualMemorySize64()
                .ProcessId()
                .ProcessName()
                .BasePriority()
                .Url()
                .UrlReferer()
                .UserHostName()
                .UserHostAddress()
                .UserLanguage()
                .UserAgent()
                .SessionGuid()
                .ErrMessage()
                .ErrStackTrace()
                .InDebug()
                .AssemblyVersion()
                .Comments()
                .Creator()
                .Updator()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "SysLogs")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.SysLogsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static SysLogsJoinCollection SysLogsJoinDefault()
        {
            var join = SysLogsJoin();
            return join;
        }

        public static SysLogsWhereCollection SysLogsWhereDefault(SysLogModel sysLogModel)
        {
            return SysLogsWhere()
                .SysLogId(sysLogModel.SysLogId);
        }

        public static SysLogsParamCollection SysLogsParamDefault(
            Context context,
            SysLogModel sysLogModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = SysLogsParam()
                .Ver(sysLogModel.Ver, _using: sysLogModel.Ver_Updated(context) || setDefault || (otherInitValue && !sysLogModel.Ver.InitialValue(context)))
                .SysLogType(sysLogModel.SysLogType.ToInt(), _using: sysLogModel.SysLogType_Updated(context) || setDefault || (otherInitValue && !sysLogModel.SysLogType.InitialValue(context)))
                .OnAzure(sysLogModel.OnAzure, _using: sysLogModel.OnAzure_Updated(context) || (otherInitValue && !sysLogModel.OnAzure.InitialValue(context)))
                .MachineName(sysLogModel.MachineName.MaxLength(64), _using: sysLogModel.MachineName_Updated(context) || (otherInitValue && !sysLogModel.MachineName.InitialValue(context)))
                .ServiceName(sysLogModel.ServiceName.MaxLength(64), _using: sysLogModel.ServiceName_Updated(context) || (otherInitValue && !sysLogModel.ServiceName.InitialValue(context)))
                .TenantName(sysLogModel.TenantName.MaxLength(64), _using: sysLogModel.TenantName_Updated(context) || (otherInitValue && !sysLogModel.TenantName.InitialValue(context)))
                .Application(sysLogModel.Application.MaxLength(64), _using: sysLogModel.Application_Updated(context) || (otherInitValue && !sysLogModel.Application.InitialValue(context)))
                .Class(sysLogModel.Class.MaxLength(256), _using: sysLogModel.Class_Updated(context) || (otherInitValue && !sysLogModel.Class.InitialValue(context)))
                .Method(sysLogModel.Method.MaxLength(256), _using: sysLogModel.Method_Updated(context) || (otherInitValue && !sysLogModel.Method.InitialValue(context)))
                .RequestData(sysLogModel.RequestData, _using: sysLogModel.RequestData_Updated(context) || (otherInitValue && !sysLogModel.RequestData.InitialValue(context)))
                .HttpMethod(sysLogModel.HttpMethod.MaxLength(8), _using: sysLogModel.HttpMethod_Updated(context) || (otherInitValue && !sysLogModel.HttpMethod.InitialValue(context)))
                .RequestSize(sysLogModel.RequestSize, _using: sysLogModel.RequestSize_Updated(context) || (otherInitValue && !sysLogModel.RequestSize.InitialValue(context)))
                .ResponseSize(sysLogModel.ResponseSize, _using: sysLogModel.ResponseSize_Updated(context) || (otherInitValue && !sysLogModel.ResponseSize.InitialValue(context)))
                .Elapsed(sysLogModel.Elapsed, _using: sysLogModel.Elapsed_Updated(context) || (otherInitValue && !sysLogModel.Elapsed.InitialValue(context)))
                .ApplicationAge(sysLogModel.ApplicationAge, _using: sysLogModel.ApplicationAge_Updated(context) || (otherInitValue && !sysLogModel.ApplicationAge.InitialValue(context)))
                .ApplicationRequestInterval(sysLogModel.ApplicationRequestInterval, _using: sysLogModel.ApplicationRequestInterval_Updated(context) || (otherInitValue && !sysLogModel.ApplicationRequestInterval.InitialValue(context)))
                .SessionAge(sysLogModel.SessionAge, _using: sysLogModel.SessionAge_Updated(context) || (otherInitValue && !sysLogModel.SessionAge.InitialValue(context)))
                .SessionRequestInterval(sysLogModel.SessionRequestInterval, _using: sysLogModel.SessionRequestInterval_Updated(context) || (otherInitValue && !sysLogModel.SessionRequestInterval.InitialValue(context)))
                .WorkingSet64(sysLogModel.WorkingSet64, _using: sysLogModel.WorkingSet64_Updated(context) || (otherInitValue && !sysLogModel.WorkingSet64.InitialValue(context)))
                .VirtualMemorySize64(sysLogModel.VirtualMemorySize64, _using: sysLogModel.VirtualMemorySize64_Updated(context) || (otherInitValue && !sysLogModel.VirtualMemorySize64.InitialValue(context)))
                .ProcessId(sysLogModel.ProcessId, _using: sysLogModel.ProcessId_Updated(context) || (otherInitValue && !sysLogModel.ProcessId.InitialValue(context)))
                .ProcessName(sysLogModel.ProcessName.MaxLength(256), _using: sysLogModel.ProcessName_Updated(context) || (otherInitValue && !sysLogModel.ProcessName.InitialValue(context)))
                .BasePriority(sysLogModel.BasePriority, _using: sysLogModel.BasePriority_Updated(context) || (otherInitValue && !sysLogModel.BasePriority.InitialValue(context)))
                .Url(sysLogModel.Url, _using: sysLogModel.Url_Updated(context) || (otherInitValue && !sysLogModel.Url.InitialValue(context)))
                .UrlReferer(sysLogModel.UrlReferer, _using: sysLogModel.UrlReferer_Updated(context) || (otherInitValue && !sysLogModel.UrlReferer.InitialValue(context)))
                .UserHostName(sysLogModel.UserHostName.MaxLength(32), _using: sysLogModel.UserHostName_Updated(context) || (otherInitValue && !sysLogModel.UserHostName.InitialValue(context)))
                .UserHostAddress(sysLogModel.UserHostAddress.MaxLength(16), _using: sysLogModel.UserHostAddress_Updated(context) || (otherInitValue && !sysLogModel.UserHostAddress.InitialValue(context)))
                .UserLanguage(sysLogModel.UserLanguage.MaxLength(32), _using: sysLogModel.UserLanguage_Updated(context) || (otherInitValue && !sysLogModel.UserLanguage.InitialValue(context)))
                .UserAgent(sysLogModel.UserAgent, _using: sysLogModel.UserAgent_Updated(context) || (otherInitValue && !sysLogModel.UserAgent.InitialValue(context)))
                .SessionGuid(sysLogModel.SessionGuid.MaxLength(34), _using: sysLogModel.SessionGuid_Updated(context) || (otherInitValue && !sysLogModel.SessionGuid.InitialValue(context)))
                .ErrMessage(sysLogModel.ErrMessage.MaxLength(256), _using: sysLogModel.ErrMessage_Updated(context) || (otherInitValue && !sysLogModel.ErrMessage.InitialValue(context)))
                .ErrStackTrace(sysLogModel.ErrStackTrace, _using: sysLogModel.ErrStackTrace_Updated(context) || (otherInitValue && !sysLogModel.ErrStackTrace.InitialValue(context)))
                .InDebug(sysLogModel.InDebug, _using: sysLogModel.InDebug_Updated(context) || (otherInitValue && !sysLogModel.InDebug.InitialValue(context)))
                .AssemblyVersion(sysLogModel.AssemblyVersion.MaxLength(32), _using: sysLogModel.AssemblyVersion_Updated(context) || (otherInitValue && !sysLogModel.AssemblyVersion.InitialValue(context)))
                .Comments(sysLogModel.Comments.ToJson(), _using: sysLogModel.Comments_Updated(context) || (otherInitValue && !sysLogModel.Comments.InitialValue(context)));
            sysLogModel.ClassHash
                .Where(o => sysLogModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !sysLogModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            sysLogModel.NumHash
                .Where(o => sysLogModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !sysLogModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sysLogModel.DateHash
                .Where(o => sysLogModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !sysLogModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sysLogModel.DescriptionHash
                .Where(o => sysLogModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !sysLogModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sysLogModel.CheckHash
                .Where(o => sysLogModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !sysLogModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            sysLogModel.AttachmentsHash
                .Where(o => sysLogModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !sysLogModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static StatusesColumnCollection StatusesDefaultColumns()
        {
            var column = StatusesColumn()
                .TenantId()
                .StatusId()
                .Ver()
                .Value()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Statuses")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.StatusesColumn(columnDefinition.ColumnName));
            return column;
        }

        public static StatusesJoinCollection StatusesJoinDefault()
        {
            var join = StatusesJoin();
            return join;
        }

        public static StatusesWhereCollection StatusesWhereDefault(StatusModel statusModel)
        {
            return StatusesWhere()
                .TenantId(statusModel.TenantId)
                .StatusId(statusModel.StatusId);
        }

        public static StatusesParamCollection StatusesParamDefault(
            Context context,
            StatusModel statusModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = StatusesParam()
                .TenantId(statusModel.TenantId)
                .StatusId(statusModel.StatusId, _using: statusModel.StatusId_Updated(context) || setDefault || (otherInitValue && !statusModel.StatusId.InitialValue(context)))
                .Ver(statusModel.Ver, _using: statusModel.Ver_Updated(context) || setDefault || (otherInitValue && !statusModel.Ver.InitialValue(context)))
                .Value(statusModel.Value.MaxLength(2048), _using: statusModel.Value_Updated(context) || (otherInitValue && !statusModel.Value.InitialValue(context)))
                .Comments(statusModel.Comments.ToJson(), _using: statusModel.Comments_Updated(context) || (otherInitValue && !statusModel.Comments.InitialValue(context)));
            statusModel.ClassHash
                .Where(o => statusModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !statusModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            statusModel.NumHash
                .Where(o => statusModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !statusModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            statusModel.DateHash
                .Where(o => statusModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !statusModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            statusModel.DescriptionHash
                .Where(o => statusModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !statusModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            statusModel.CheckHash
                .Where(o => statusModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !statusModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            statusModel.AttachmentsHash
                .Where(o => statusModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !statusModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static ReminderSchedulesColumnCollection ReminderSchedulesDefaultColumns()
        {
            var column = ReminderSchedulesColumn()
                .SiteId()
                .Id()
                .Ver()
                .ScheduledTime()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "ReminderSchedules")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.ReminderSchedulesColumn(columnDefinition.ColumnName));
            return column;
        }

        public static ReminderSchedulesJoinCollection ReminderSchedulesJoinDefault()
        {
            var join = ReminderSchedulesJoin();
            return join;
        }

        public static ReminderSchedulesWhereCollection ReminderSchedulesWhereDefault(ReminderScheduleModel reminderScheduleModel)
        {
            return ReminderSchedulesWhere()
                .SiteId(reminderScheduleModel.SiteId)
                .Id(reminderScheduleModel.Id);
        }

        public static ReminderSchedulesParamCollection ReminderSchedulesParamDefault(
            Context context,
            ReminderScheduleModel reminderScheduleModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = ReminderSchedulesParam()
                .SiteId(reminderScheduleModel.SiteId, _using: reminderScheduleModel.SiteId_Updated(context) || setDefault || (otherInitValue && !reminderScheduleModel.SiteId.InitialValue(context)))
                .Id(reminderScheduleModel.Id, _using: reminderScheduleModel.Id_Updated(context) || setDefault || (otherInitValue && !reminderScheduleModel.Id.InitialValue(context)))
                .Ver(reminderScheduleModel.Ver, _using: reminderScheduleModel.Ver_Updated(context) || setDefault || (otherInitValue && !reminderScheduleModel.Ver.InitialValue(context)))
                .ScheduledTime(reminderScheduleModel.ScheduledTime, _using: reminderScheduleModel.ScheduledTime_Updated(context) || setDefault || (otherInitValue && !reminderScheduleModel.ScheduledTime.InitialValue(context)))
                .Comments(reminderScheduleModel.Comments.ToJson(), _using: reminderScheduleModel.Comments_Updated(context) || (otherInitValue && !reminderScheduleModel.Comments.InitialValue(context)));
            reminderScheduleModel.ClassHash
                .Where(o => reminderScheduleModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !reminderScheduleModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            reminderScheduleModel.NumHash
                .Where(o => reminderScheduleModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !reminderScheduleModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            reminderScheduleModel.DateHash
                .Where(o => reminderScheduleModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !reminderScheduleModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            reminderScheduleModel.DescriptionHash
                .Where(o => reminderScheduleModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !reminderScheduleModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            reminderScheduleModel.CheckHash
                .Where(o => reminderScheduleModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !reminderScheduleModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            reminderScheduleModel.AttachmentsHash
                .Where(o => reminderScheduleModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !reminderScheduleModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static DeptsColumnCollection DeptsDefaultColumns()
        {
            var column = DeptsColumn()
                .TenantId()
                .DeptId()
                .Ver()
                .DeptCode()
                .Dept()
                .DeptName()
                .Body()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Depts")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.DeptsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static DeptsJoinCollection DeptsJoinDefault()
        {
            var join = DeptsJoin();
            return join;
        }

        public static DeptsWhereCollection DeptsWhereDefault(DeptModel deptModel)
        {
            return DeptsWhere()
                .TenantId(deptModel.TenantId)
                .DeptId(deptModel.DeptId);
        }

        public static DeptsParamCollection DeptsParamDefault(
            Context context,
            DeptModel deptModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = DeptsParam()
                .TenantId(deptModel.TenantId)
                .Ver(deptModel.Ver, _using: deptModel.Ver_Updated(context) || setDefault || (otherInitValue && !deptModel.Ver.InitialValue(context)))
                .DeptCode(deptModel.DeptCode.MaxLength(32), _using: deptModel.DeptCode_Updated(context) || setDefault || (otherInitValue && !deptModel.DeptCode.InitialValue(context)))
                .DeptName(deptModel.DeptName.MaxLength(256), _using: deptModel.DeptName_Updated(context) || setDefault || (otherInitValue && !deptModel.DeptName.InitialValue(context)))
                .Body(deptModel.Body, _using: deptModel.Body_Updated(context) || (otherInitValue && !deptModel.Body.InitialValue(context)))
                .Comments(deptModel.Comments.ToJson(), _using: deptModel.Comments_Updated(context) || (otherInitValue && !deptModel.Comments.InitialValue(context)));
            deptModel.ClassHash
                .Where(o => deptModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !deptModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            deptModel.NumHash
                .Where(o => deptModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !deptModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            deptModel.DateHash
                .Where(o => deptModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !deptModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            deptModel.DescriptionHash
                .Where(o => deptModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !deptModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            deptModel.CheckHash
                .Where(o => deptModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !deptModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            deptModel.AttachmentsHash
                .Where(o => deptModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !deptModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static GroupsColumnCollection GroupsDefaultColumns()
        {
            var column = GroupsColumn()
                .TenantId()
                .GroupId()
                .Ver()
                .GroupName()
                .Body()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Groups")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.GroupsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static GroupsJoinCollection GroupsJoinDefault()
        {
            var join = GroupsJoin();
            return join;
        }

        public static GroupsWhereCollection GroupsWhereDefault(GroupModel groupModel)
        {
            return GroupsWhere()
                .TenantId(groupModel.TenantId)
                .GroupId(groupModel.GroupId);
        }

        public static GroupsParamCollection GroupsParamDefault(
            Context context,
            GroupModel groupModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = GroupsParam()
                .TenantId(groupModel.TenantId)
                .Ver(groupModel.Ver, _using: groupModel.Ver_Updated(context) || setDefault || (otherInitValue && !groupModel.Ver.InitialValue(context)))
                .GroupName(groupModel.GroupName.MaxLength(256), _using: groupModel.GroupName_Updated(context) || setDefault || (otherInitValue && !groupModel.GroupName.InitialValue(context)))
                .Body(groupModel.Body, _using: groupModel.Body_Updated(context) || (otherInitValue && !groupModel.Body.InitialValue(context)))
                .Comments(groupModel.Comments.ToJson(), _using: groupModel.Comments_Updated(context) || (otherInitValue && !groupModel.Comments.InitialValue(context)));
            groupModel.ClassHash
                .Where(o => groupModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !groupModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            groupModel.NumHash
                .Where(o => groupModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !groupModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupModel.DateHash
                .Where(o => groupModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !groupModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupModel.DescriptionHash
                .Where(o => groupModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !groupModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupModel.CheckHash
                .Where(o => groupModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !groupModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupModel.AttachmentsHash
                .Where(o => groupModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !groupModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static GroupMembersColumnCollection GroupMembersDefaultColumns()
        {
            var column = GroupMembersColumn()
                .GroupId()
                .DeptId()
                .UserId()
                .Ver()
                .Admin()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "GroupMembers")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.GroupMembersColumn(columnDefinition.ColumnName));
            return column;
        }

        public static GroupMembersJoinCollection GroupMembersJoinDefault()
        {
            var join = GroupMembersJoin();
            return join;
        }

        public static GroupMembersWhereCollection GroupMembersWhereDefault(GroupMemberModel groupMemberModel)
        {
            return GroupMembersWhere()
                .GroupId(groupMemberModel.GroupId);
        }

        public static GroupMembersParamCollection GroupMembersParamDefault(
            Context context,
            GroupMemberModel groupMemberModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = GroupMembersParam()
                .GroupId(groupMemberModel.GroupId, _using: groupMemberModel.GroupId_Updated(context) || setDefault || (otherInitValue && !groupMemberModel.GroupId.InitialValue(context)))
                .DeptId(groupMemberModel.DeptId, _using: groupMemberModel.DeptId_Updated(context) || setDefault || (otherInitValue && !groupMemberModel.DeptId.InitialValue(context)))
                .UserId(groupMemberModel.UserId, _using: groupMemberModel.UserId_Updated(context) || setDefault || (otherInitValue && !groupMemberModel.UserId.InitialValue(context)))
                .Ver(groupMemberModel.Ver, _using: groupMemberModel.Ver_Updated(context) || setDefault || (otherInitValue && !groupMemberModel.Ver.InitialValue(context)))
                .Admin(groupMemberModel.Admin, _using: groupMemberModel.Admin_Updated(context) || setDefault || (otherInitValue && !groupMemberModel.Admin.InitialValue(context)))
                .Comments(groupMemberModel.Comments.ToJson(), _using: groupMemberModel.Comments_Updated(context) || (otherInitValue && !groupMemberModel.Comments.InitialValue(context)));
            groupMemberModel.ClassHash
                .Where(o => groupMemberModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !groupMemberModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            groupMemberModel.NumHash
                .Where(o => groupMemberModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !groupMemberModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupMemberModel.DateHash
                .Where(o => groupMemberModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !groupMemberModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupMemberModel.DescriptionHash
                .Where(o => groupMemberModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !groupMemberModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupMemberModel.CheckHash
                .Where(o => groupMemberModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !groupMemberModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            groupMemberModel.AttachmentsHash
                .Where(o => groupMemberModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !groupMemberModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static RegistrationsColumnCollection RegistrationsDefaultColumns()
        {
            var column = RegistrationsColumn()
                .TenantId()
                .RegistrationId()
                .Ver()
                .MailAddress()
                .Invitee()
                .InviteeName()
                .LoginId()
                .Name()
                .Password()
                .Language()
                .Passphrase()
                .Invitingflg()
                .UserId()
                .DeptId()
                .GroupId()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Registrations")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.RegistrationsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static RegistrationsJoinCollection RegistrationsJoinDefault()
        {
            var join = RegistrationsJoin();
            return join;
        }

        public static RegistrationsWhereCollection RegistrationsWhereDefault(RegistrationModel registrationModel)
        {
            return RegistrationsWhere()
                .TenantId(registrationModel.TenantId)
                .RegistrationId(registrationModel.RegistrationId);
        }

        public static RegistrationsParamCollection RegistrationsParamDefault(
            Context context,
            RegistrationModel registrationModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = RegistrationsParam()
                .TenantId(registrationModel.TenantId)
                .Ver(registrationModel.Ver, _using: registrationModel.Ver_Updated(context) || setDefault || (otherInitValue && !registrationModel.Ver.InitialValue(context)))
                .MailAddress(registrationModel.MailAddress.MaxLength(2048), _using: registrationModel.MailAddress_Updated(context) || setDefault || (otherInitValue && !registrationModel.MailAddress.InitialValue(context)))
                .Invitee(registrationModel.Invitee, _using: registrationModel.Invitee_Updated(context) || setDefault || (otherInitValue && !registrationModel.Invitee.InitialValue(context)))
                .InviteeName(registrationModel.InviteeName.MaxLength(128), _using: registrationModel.InviteeName_Updated(context) || setDefault || (otherInitValue && !registrationModel.InviteeName.InitialValue(context)))
                .LoginId(registrationModel.LoginId.MaxLength(256), _using: registrationModel.LoginId_Updated(context) || (otherInitValue && !registrationModel.LoginId.InitialValue(context)))
                .Name(registrationModel.Name.MaxLength(128), _using: registrationModel.Name_Updated(context) || (otherInitValue && !registrationModel.Name.InitialValue(context)))
                .Password(registrationModel.Password.MaxLength(128), _using: registrationModel.Password_Updated(context) || (otherInitValue && !registrationModel.Password.InitialValue(context)))
                .Language(registrationModel.Language.MaxLength(32), _using: registrationModel.Language_Updated(context) || setDefault || (otherInitValue && !registrationModel.Language.InitialValue(context)))
                .Passphrase(registrationModel.Passphrase.MaxLength(34), _using: registrationModel.Passphrase_Updated(context) || setDefault || (otherInitValue && !registrationModel.Passphrase.InitialValue(context)))
                .Invitingflg(registrationModel.Invitingflg.MaxLength(32), _using: registrationModel.Invitingflg_Updated(context) || setDefault || (otherInitValue && !registrationModel.Invitingflg.InitialValue(context)))
                .UserId(registrationModel.UserId, _using: registrationModel.UserId_Updated(context) || (otherInitValue && !registrationModel.UserId.InitialValue(context)))
                .DeptId(registrationModel.DeptId, _using: registrationModel.DeptId_Updated(context) || setDefault || (otherInitValue && !registrationModel.DeptId.InitialValue(context)))
                .GroupId(registrationModel.GroupId, _using: registrationModel.GroupId_Updated(context) || setDefault || (otherInitValue && !registrationModel.GroupId.InitialValue(context)))
                .Comments(registrationModel.Comments.ToJson(), _using: registrationModel.Comments_Updated(context) || (otherInitValue && !registrationModel.Comments.InitialValue(context)));
            registrationModel.ClassHash
                .Where(o => registrationModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !registrationModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            registrationModel.NumHash
                .Where(o => registrationModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !registrationModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            registrationModel.DateHash
                .Where(o => registrationModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !registrationModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            registrationModel.DescriptionHash
                .Where(o => registrationModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !registrationModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            registrationModel.CheckHash
                .Where(o => registrationModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !registrationModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            registrationModel.AttachmentsHash
                .Where(o => registrationModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !registrationModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static UsersColumnCollection UsersDefaultColumns()
        {
            var column = UsersColumn()
                .TenantId()
                .UserId()
                .Ver()
                .LoginId()
                .GlobalId()
                .Name()
                .UserCode()
                .Password()
                .LastName()
                .FirstName()
                .Birthday()
                .Gender()
                .Language()
                .TimeZone()
                .DeptCode()
                .DeptId()
                .Dept()
                .FirstAndLastNameOrder()
                .Body()
                .LastLoginTime()
                .PasswordExpirationTime()
                .PasswordChangeTime()
                .NumberOfLogins()
                .NumberOfDenial()
                .TenantManager()
                .ServiceManager()
                .Disabled()
                .Lockout()
                .LockoutCounter()
                .Developer()
                .UserSettings()
                .ApiKey()
                .LdapSearchRoot()
                .SynchronizedTime()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Users")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.UsersColumn(columnDefinition.ColumnName));
            return column;
        }

        public static UsersJoinCollection UsersJoinDefault()
        {
            var join = UsersJoin();
            join.Add(new SqlJoin(
                tableBracket: "[Depts]",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "[Users].[DeptId]=[Depts].[DeptId]"));
            return join;
        }

        public static UsersWhereCollection UsersWhereDefault(UserModel userModel)
        {
            return UsersWhere()
                .TenantId(userModel.TenantId)
                .UserId(userModel.UserId);
        }

        public static UsersParamCollection UsersParamDefault(
            Context context,
            UserModel userModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = UsersParam()
                .TenantId(userModel.TenantId)
                .Ver(userModel.Ver, _using: userModel.Ver_Updated(context) || setDefault || (otherInitValue && !userModel.Ver.InitialValue(context)))
                .LoginId(userModel.LoginId.MaxLength(256), _using: userModel.LoginId_Updated(context) || setDefault || (otherInitValue && !userModel.LoginId.InitialValue(context)))
                .GlobalId(userModel.GlobalId.MaxLength(36), _using: userModel.GlobalId_Updated(context) || (otherInitValue && !userModel.GlobalId.InitialValue(context)))
                .Name(userModel.Name.MaxLength(128), _using: userModel.Name_Updated(context) || (otherInitValue && !userModel.Name.InitialValue(context)))
                .UserCode(userModel.UserCode.MaxLength(32), _using: userModel.UserCode_Updated(context) || (otherInitValue && !userModel.UserCode.InitialValue(context)))
                .Password(userModel.Password.MaxLength(128), _using: userModel.Password_Updated(context) || (otherInitValue && !userModel.Password.InitialValue(context)))
                .LastName(userModel.LastName.MaxLength(32), _using: userModel.LastName_Updated(context) || (otherInitValue && !userModel.LastName.InitialValue(context)))
                .FirstName(userModel.FirstName.MaxLength(32), _using: userModel.FirstName_Updated(context) || (otherInitValue && !userModel.FirstName.InitialValue(context)))
                .Birthday(userModel.Birthday.Value, _using: userModel.Birthday_Updated(context) || (otherInitValue && !userModel.Birthday.InitialValue(context)))
                .Gender(userModel.Gender.MaxLength(2), _using: userModel.Gender_Updated(context) || (otherInitValue && !userModel.Gender.InitialValue(context)))
                .Language(userModel.Language.MaxLength(32), _using: userModel.Language_Updated(context) || setDefault || (otherInitValue && !userModel.Language.InitialValue(context)))
                .TimeZone(userModel.TimeZone.MaxLength(32), _using: userModel.TimeZone_Updated(context) || (otherInitValue && !userModel.TimeZone.InitialValue(context)))
                .DeptId(userModel.DeptId, _using: userModel.DeptId_Updated(context) || setDefault || (otherInitValue && !userModel.DeptId.InitialValue(context)))
                .FirstAndLastNameOrder(userModel.FirstAndLastNameOrder.ToInt(), _using: userModel.FirstAndLastNameOrder_Updated(context) || setDefault || (otherInitValue && !userModel.FirstAndLastNameOrder.InitialValue(context)))
                .Body(userModel.Body, _using: userModel.Body_Updated(context) || (otherInitValue && !userModel.Body.InitialValue(context)))
                .LastLoginTime(userModel.LastLoginTime.Value, _using: userModel.LastLoginTime_Updated(context) || (otherInitValue && !userModel.LastLoginTime.InitialValue(context)))
                .PasswordExpirationTime(userModel.PasswordExpirationTime.Value, _using: userModel.PasswordExpirationTime_Updated(context) || (otherInitValue && !userModel.PasswordExpirationTime.InitialValue(context)))
                .PasswordChangeTime(userModel.PasswordChangeTime.Value, _using: userModel.PasswordChangeTime_Updated(context) || (otherInitValue && !userModel.PasswordChangeTime.InitialValue(context)))
                .NumberOfLogins(userModel.NumberOfLogins, _using: userModel.NumberOfLogins_Updated(context) || (otherInitValue && !userModel.NumberOfLogins.InitialValue(context)))
                .NumberOfDenial(userModel.NumberOfDenial, _using: userModel.NumberOfDenial_Updated(context) || (otherInitValue && !userModel.NumberOfDenial.InitialValue(context)))
                .TenantManager(userModel.TenantManager, _using: userModel.TenantManager_Updated(context) || setDefault || (otherInitValue && !userModel.TenantManager.InitialValue(context)))
                .ServiceManager(userModel.ServiceManager, _using: userModel.ServiceManager_Updated(context) || setDefault || (otherInitValue && !userModel.ServiceManager.InitialValue(context)))
                .Disabled(userModel.Disabled, _using: userModel.Disabled_Updated(context) || setDefault || (otherInitValue && !userModel.Disabled.InitialValue(context)))
                .Lockout(userModel.Lockout, _using: userModel.Lockout_Updated(context) || setDefault || (otherInitValue && !userModel.Lockout.InitialValue(context)))
                .LockoutCounter(userModel.LockoutCounter, _using: userModel.LockoutCounter_Updated(context) || setDefault || (otherInitValue && !userModel.LockoutCounter.InitialValue(context)))
                .Developer(userModel.Developer, _using: userModel.Developer_Updated(context) || setDefault || (otherInitValue && !userModel.Developer.InitialValue(context)))
                .UserSettings(userModel.UserSettings.RecordingJson(), _using: userModel.UserSettings_Updated(context) || (otherInitValue && !userModel.UserSettings.InitialValue(context)))
                .ApiKey(userModel.ApiKey.MaxLength(128), _using: userModel.ApiKey_Updated(context) || (otherInitValue && !userModel.ApiKey.InitialValue(context)))
                .LdapSearchRoot(userModel.LdapSearchRoot.MaxLength(2048), _using: userModel.LdapSearchRoot_Updated(context) || (otherInitValue && !userModel.LdapSearchRoot.InitialValue(context)))
                .SynchronizedTime(userModel.SynchronizedTime, _using: userModel.SynchronizedTime_Updated(context) || (otherInitValue && !userModel.SynchronizedTime.InitialValue(context)))
                .Comments(userModel.Comments.ToJson(), _using: userModel.Comments_Updated(context) || (otherInitValue && !userModel.Comments.InitialValue(context)));
            userModel.ClassHash
                .Where(o => userModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !userModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            userModel.NumHash
                .Where(o => userModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !userModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            userModel.DateHash
                .Where(o => userModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !userModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            userModel.DescriptionHash
                .Where(o => userModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !userModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            userModel.CheckHash
                .Where(o => userModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !userModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            userModel.AttachmentsHash
                .Where(o => userModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !userModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static LoginKeysColumnCollection LoginKeysDefaultColumns()
        {
            var column = LoginKeysColumn()
                .LoginId()
                .Key()
                .Ver()
                .TenantNames()
                .TenantId()
                .UserId()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "LoginKeys")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.LoginKeysColumn(columnDefinition.ColumnName));
            return column;
        }

        public static LoginKeysJoinCollection LoginKeysJoinDefault()
        {
            var join = LoginKeysJoin();
            return join;
        }

        public static LoginKeysWhereCollection LoginKeysWhereDefault(LoginKeyModel loginKeyModel)
        {
            return LoginKeysWhere()
                .LoginId(loginKeyModel.LoginId.MaxLength(256))
                .Key(loginKeyModel.Key.MaxLength(36));
        }

        public static LoginKeysParamCollection LoginKeysParamDefault(
            Context context,
            LoginKeyModel loginKeyModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = LoginKeysParam()
                .TenantId(loginKeyModel.TenantId)
                .LoginId(loginKeyModel.LoginId.MaxLength(256), _using: loginKeyModel.LoginId_Updated(context) || setDefault || (otherInitValue && !loginKeyModel.LoginId.InitialValue(context)))
                .Key(loginKeyModel.Key.MaxLength(36), _using: loginKeyModel.Key_Updated(context) || setDefault || (otherInitValue && !loginKeyModel.Key.InitialValue(context)))
                .Ver(loginKeyModel.Ver, _using: loginKeyModel.Ver_Updated(context) || setDefault || (otherInitValue && !loginKeyModel.Ver.InitialValue(context)))
                .TenantNames(loginKeyModel.TenantNames, _using: loginKeyModel.TenantNames_Updated(context) || (otherInitValue && !loginKeyModel.TenantNames.InitialValue(context)))
                .UserId(loginKeyModel.UserId, _using: loginKeyModel.UserId_Updated(context) || (otherInitValue && !loginKeyModel.UserId.InitialValue(context)))
                .Comments(loginKeyModel.Comments.ToJson(), _using: loginKeyModel.Comments_Updated(context) || (otherInitValue && !loginKeyModel.Comments.InitialValue(context)));
            loginKeyModel.ClassHash
                .Where(o => loginKeyModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !loginKeyModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            loginKeyModel.NumHash
                .Where(o => loginKeyModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !loginKeyModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            loginKeyModel.DateHash
                .Where(o => loginKeyModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !loginKeyModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            loginKeyModel.DescriptionHash
                .Where(o => loginKeyModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !loginKeyModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            loginKeyModel.CheckHash
                .Where(o => loginKeyModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !loginKeyModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            loginKeyModel.AttachmentsHash
                .Where(o => loginKeyModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !loginKeyModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static MailAddressesColumnCollection MailAddressesDefaultColumns()
        {
            var column = MailAddressesColumn()
                .OwnerId()
                .OwnerType()
                .MailAddressId()
                .Ver()
                .MailAddress()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "MailAddresses")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.MailAddressesColumn(columnDefinition.ColumnName));
            return column;
        }

        public static MailAddressesJoinCollection MailAddressesJoinDefault()
        {
            var join = MailAddressesJoin();
            return join;
        }

        public static MailAddressesWhereCollection MailAddressesWhereDefault(MailAddressModel mailAddressModel)
        {
            return MailAddressesWhere()
                .OwnerId(mailAddressModel.OwnerId)
                .OwnerType(mailAddressModel.OwnerType.MaxLength(32))
                .MailAddressId(mailAddressModel.MailAddressId);
        }

        public static MailAddressesParamCollection MailAddressesParamDefault(
            Context context,
            MailAddressModel mailAddressModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = MailAddressesParam()
                .OwnerId(mailAddressModel.OwnerId, _using: mailAddressModel.OwnerId_Updated(context) || setDefault || (otherInitValue && !mailAddressModel.OwnerId.InitialValue(context)))
                .OwnerType(mailAddressModel.OwnerType.MaxLength(32), _using: mailAddressModel.OwnerType_Updated(context) || setDefault || (otherInitValue && !mailAddressModel.OwnerType.InitialValue(context)))
                .Ver(mailAddressModel.Ver, _using: mailAddressModel.Ver_Updated(context) || setDefault || (otherInitValue && !mailAddressModel.Ver.InitialValue(context)))
                .MailAddress(mailAddressModel.MailAddress.MaxLength(2048), _using: mailAddressModel.MailAddress_Updated(context) || setDefault || (otherInitValue && !mailAddressModel.MailAddress.InitialValue(context)))
                .Comments(mailAddressModel.Comments.ToJson(), _using: mailAddressModel.Comments_Updated(context) || (otherInitValue && !mailAddressModel.Comments.InitialValue(context)));
            mailAddressModel.ClassHash
                .Where(o => mailAddressModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !mailAddressModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            mailAddressModel.NumHash
                .Where(o => mailAddressModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !mailAddressModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            mailAddressModel.DateHash
                .Where(o => mailAddressModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !mailAddressModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            mailAddressModel.DescriptionHash
                .Where(o => mailAddressModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !mailAddressModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            mailAddressModel.CheckHash
                .Where(o => mailAddressModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !mailAddressModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            mailAddressModel.AttachmentsHash
                .Where(o => mailAddressModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !mailAddressModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static OutgoingMailsColumnCollection OutgoingMailsDefaultColumns()
        {
            var column = OutgoingMailsColumn()
                .ReferenceType()
                .ReferenceId()
                .ReferenceVer()
                .OutgoingMailId()
                .Ver()
                .Host()
                .Port()
                .From()
                .To()
                .Cc()
                .Bcc()
                .Title()
                .Body()
                .SentTime()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "OutgoingMails")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.OutgoingMailsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static OutgoingMailsJoinCollection OutgoingMailsJoinDefault()
        {
            var join = OutgoingMailsJoin();
            return join;
        }

        public static OutgoingMailsWhereCollection OutgoingMailsWhereDefault(OutgoingMailModel outgoingMailModel)
        {
            return OutgoingMailsWhere()
                .ReferenceType(outgoingMailModel.ReferenceType.MaxLength(32))
                .ReferenceId(outgoingMailModel.ReferenceId)
                .ReferenceVer(outgoingMailModel.ReferenceVer)
                .OutgoingMailId(outgoingMailModel.OutgoingMailId);
        }

        public static OutgoingMailsParamCollection OutgoingMailsParamDefault(
            Context context,
            OutgoingMailModel outgoingMailModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = OutgoingMailsParam()
                .ReferenceType(outgoingMailModel.ReferenceType.MaxLength(32), _using: outgoingMailModel.ReferenceType_Updated(context) || setDefault || (otherInitValue && !outgoingMailModel.ReferenceType.InitialValue(context)))
                .ReferenceId(outgoingMailModel.ReferenceId, _using: outgoingMailModel.ReferenceId_Updated(context) || setDefault || (otherInitValue && !outgoingMailModel.ReferenceId.InitialValue(context)))
                .ReferenceVer(outgoingMailModel.ReferenceVer, _using: outgoingMailModel.ReferenceVer_Updated(context) || setDefault || (otherInitValue && !outgoingMailModel.ReferenceVer.InitialValue(context)))
                .Ver(outgoingMailModel.Ver, _using: outgoingMailModel.Ver_Updated(context) || setDefault || (otherInitValue && !outgoingMailModel.Ver.InitialValue(context)))
                .Host(outgoingMailModel.Host.MaxLength(1024), _using: outgoingMailModel.Host_Updated(context) || (otherInitValue && !outgoingMailModel.Host.InitialValue(context)))
                .Port(outgoingMailModel.Port, _using: outgoingMailModel.Port_Updated(context) || (otherInitValue && !outgoingMailModel.Port.InitialValue(context)))
                .From(outgoingMailModel.From.ToString(), _using: outgoingMailModel.From_Updated(context) || (otherInitValue && !outgoingMailModel.From.InitialValue(context)))
                .To(outgoingMailModel.To, _using: outgoingMailModel.To_Updated(context) || (otherInitValue && !outgoingMailModel.To.InitialValue(context)))
                .Cc(outgoingMailModel.Cc, _using: outgoingMailModel.Cc_Updated(context) || (otherInitValue && !outgoingMailModel.Cc.InitialValue(context)))
                .Bcc(outgoingMailModel.Bcc, _using: outgoingMailModel.Bcc_Updated(context) || (otherInitValue && !outgoingMailModel.Bcc.InitialValue(context)))
                .Title(outgoingMailModel.Title.Value.MaxLength(1024), _using: outgoingMailModel.Title_Updated(context) || (otherInitValue && !outgoingMailModel.Title.InitialValue(context)))
                .Body(outgoingMailModel.Body, _using: outgoingMailModel.Body_Updated(context) || (otherInitValue && !outgoingMailModel.Body.InitialValue(context)))
                .SentTime(outgoingMailModel.SentTime.Value, _using: outgoingMailModel.SentTime_Updated(context) || (otherInitValue && !outgoingMailModel.SentTime.InitialValue(context)))
                .Comments(outgoingMailModel.Comments.ToJson(), _using: outgoingMailModel.Comments_Updated(context) || (otherInitValue && !outgoingMailModel.Comments.InitialValue(context)));
            outgoingMailModel.ClassHash
                .Where(o => outgoingMailModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !outgoingMailModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            outgoingMailModel.NumHash
                .Where(o => outgoingMailModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !outgoingMailModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            outgoingMailModel.DateHash
                .Where(o => outgoingMailModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !outgoingMailModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            outgoingMailModel.DescriptionHash
                .Where(o => outgoingMailModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !outgoingMailModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            outgoingMailModel.CheckHash
                .Where(o => outgoingMailModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !outgoingMailModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            outgoingMailModel.AttachmentsHash
                .Where(o => outgoingMailModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !outgoingMailModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static SearchIndexesColumnCollection SearchIndexesDefaultColumns()
        {
            var column = SearchIndexesColumn()
                .Word()
                .ReferenceId()
                .Ver()
                .Priority()
                .ReferenceType()
                .Title()
                .Subset()
                .InheritPermission()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "SearchIndexes")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.SearchIndexesColumn(columnDefinition.ColumnName));
            return column;
        }

        public static SearchIndexesJoinCollection SearchIndexesJoinDefault()
        {
            var join = SearchIndexesJoin();
            join.Add(new SqlJoin(
                tableBracket: "[Items]",
                joinType: SqlJoin.JoinTypes.Inner,
                joinExpression: "[SearchIndexes].[ReferenceId]=[Items].[ReferenceId]"));
            join.Add(new SqlJoin(
                tableBracket: "[Sites]",
                joinType: SqlJoin.JoinTypes.Inner,
                joinExpression: "[Items].[SiteId]=[Sites].[SiteId]"));
            return join;
        }

        public static SearchIndexesWhereCollection SearchIndexesWhereDefault(SearchIndexModel searchIndexModel)
        {
            return SearchIndexesWhere()
                .Word(searchIndexModel.Word.MaxLength(256))
                .ReferenceId(searchIndexModel.ReferenceId);
        }

        public static SearchIndexesParamCollection SearchIndexesParamDefault(
            Context context,
            SearchIndexModel searchIndexModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = SearchIndexesParam()
                .Word(searchIndexModel.Word.MaxLength(256), _using: searchIndexModel.Word_Updated(context) || setDefault || (otherInitValue && !searchIndexModel.Word.InitialValue(context)))
                .ReferenceId(searchIndexModel.ReferenceId, _using: searchIndexModel.ReferenceId_Updated(context) || setDefault || (otherInitValue && !searchIndexModel.ReferenceId.InitialValue(context)))
                .Ver(searchIndexModel.Ver, _using: searchIndexModel.Ver_Updated(context) || setDefault || (otherInitValue && !searchIndexModel.Ver.InitialValue(context)))
                .Priority(searchIndexModel.Priority, _using: searchIndexModel.Priority_Updated(context) || setDefault || (otherInitValue && !searchIndexModel.Priority.InitialValue(context)))
                .Comments(searchIndexModel.Comments.ToJson(), _using: searchIndexModel.Comments_Updated(context) || (otherInitValue && !searchIndexModel.Comments.InitialValue(context)));
            searchIndexModel.ClassHash
                .Where(o => searchIndexModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !searchIndexModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            searchIndexModel.NumHash
                .Where(o => searchIndexModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !searchIndexModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            searchIndexModel.DateHash
                .Where(o => searchIndexModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !searchIndexModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            searchIndexModel.DescriptionHash
                .Where(o => searchIndexModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !searchIndexModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            searchIndexModel.CheckHash
                .Where(o => searchIndexModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !searchIndexModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            searchIndexModel.AttachmentsHash
                .Where(o => searchIndexModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !searchIndexModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static ItemsColumnCollection ItemsDefaultColumns()
        {
            var column = ItemsColumn()
                .ReferenceId()
                .Ver()
                .ReferenceType()
                .SiteId()
                .Title()
                .FullText()
                .SearchIndexCreatedTime()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Items")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.ItemsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static ItemsJoinCollection ItemsJoinDefault()
        {
            var join = ItemsJoin();
            return join;
        }

        public static ItemsWhereCollection ItemsWhereDefault(ItemModel itemModel)
        {
            return ItemsWhere()
                .ReferenceId(itemModel.ReferenceId);
        }

        public static ItemsParamCollection ItemsParamDefault(
            Context context,
            ItemModel itemModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = ItemsParam()
                .Ver(itemModel.Ver, _using: itemModel.Ver_Updated(context) || setDefault || (otherInitValue && !itemModel.Ver.InitialValue(context)))
                .ReferenceType(itemModel.ReferenceType.MaxLength(32), _using: itemModel.ReferenceType_Updated(context) || setDefault || (otherInitValue && !itemModel.ReferenceType.InitialValue(context)))
                .SiteId(itemModel.SiteId, _using: itemModel.SiteId_Updated(context) || setDefault || (otherInitValue && !itemModel.SiteId.InitialValue(context)))
                .Title(itemModel.Title.MaxLength(1024), _using: itemModel.Title_Updated(context) || (otherInitValue && !itemModel.Title.InitialValue(context)))
                .FullText(itemModel.FullText, _using: itemModel.FullText_Updated(context) || (otherInitValue && !itemModel.FullText.InitialValue(context)))
                .SearchIndexCreatedTime(itemModel.SearchIndexCreatedTime, _using: itemModel.SearchIndexCreatedTime_Updated(context) || (otherInitValue && !itemModel.SearchIndexCreatedTime.InitialValue(context)))
                .Comments(itemModel.Comments.ToJson(), _using: itemModel.Comments_Updated(context) || (otherInitValue && !itemModel.Comments.InitialValue(context)));
            itemModel.ClassHash
                .Where(o => itemModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !itemModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            itemModel.NumHash
                .Where(o => itemModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !itemModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            itemModel.DateHash
                .Where(o => itemModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !itemModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            itemModel.DescriptionHash
                .Where(o => itemModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !itemModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            itemModel.CheckHash
                .Where(o => itemModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !itemModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            itemModel.AttachmentsHash
                .Where(o => itemModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !itemModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static SitesColumnCollection SitesDefaultColumns()
        {
            var column = SitesColumn()
                .TenantId()
                .SiteId()
                .UpdatedTime()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .GridGuide()
                .EditorGuide()
                .ReferenceType()
                .ParentId()
                .InheritPermission()
                .SiteSettings()
                .Publish()
                .LockedTime()
                .LockedUser()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Sites")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.SitesColumn(columnDefinition.ColumnName));
            return column;
        }

        public static SitesJoinCollection SitesJoinDefault()
        {
            var join = SitesJoin();
            return join;
        }

        public static SitesWhereCollection SitesWhereDefault(SiteModel siteModel)
        {
            return SitesWhere()
                .TenantId(siteModel.TenantId)
                .SiteId(siteModel.SiteId);
        }

        public static SitesParamCollection SitesParamDefault(
            Context context,
            SiteModel siteModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = SitesParam()
                .TenantId(siteModel.TenantId)
                .ItemId(siteModel.SiteId)
                .Ver(siteModel.Ver, _using: siteModel.Ver_Updated(context) || setDefault || (otherInitValue && !siteModel.Ver.InitialValue(context)))
                .Title(siteModel.Title.Value.MaxLength(1024), _using: siteModel.Title_Updated(context) || setDefault || (otherInitValue && !siteModel.Title.InitialValue(context)))
                .Body(siteModel.Body, _using: siteModel.Body_Updated(context) || (otherInitValue && !siteModel.Body.InitialValue(context)))
                .GridGuide(siteModel.GridGuide, _using: siteModel.GridGuide_Updated(context) || (otherInitValue && !siteModel.GridGuide.InitialValue(context)))
                .EditorGuide(siteModel.EditorGuide, _using: siteModel.EditorGuide_Updated(context) || (otherInitValue && !siteModel.EditorGuide.InitialValue(context)))
                .ReferenceType(siteModel.ReferenceType.MaxLength(32), _using: siteModel.ReferenceType_Updated(context) || setDefault || (otherInitValue && !siteModel.ReferenceType.InitialValue(context)))
                .ParentId(siteModel.ParentId, _using: siteModel.ParentId_Updated(context) || setDefault || (otherInitValue && !siteModel.ParentId.InitialValue(context)))
                .InheritPermission(siteModel.InheritPermission, _using: siteModel.InheritPermission_Updated(context) || setDefault || (otherInitValue && !siteModel.InheritPermission.InitialValue(context)))
                .SiteSettings(siteModel.SiteSettings.RecordingJson(context: context), _using: siteModel.SiteSettings_Updated(context) || (otherInitValue && !siteModel.SiteSettings.InitialValue(context)))
                .Publish(siteModel.Publish, _using: siteModel.Publish_Updated(context) || (otherInitValue && !siteModel.Publish.InitialValue(context)))
                .LockedTime(siteModel.LockedTime.Value, _using: siteModel.LockedTime_Updated(context) || (otherInitValue && !siteModel.LockedTime.InitialValue(context)))
                .LockedUser(siteModel.LockedUser.Id, _using: siteModel.LockedUser_Updated(context) || (otherInitValue && !siteModel.LockedUser.InitialValue(context)))
                .Comments(siteModel.Comments.ToJson(), _using: siteModel.Comments_Updated(context) || (otherInitValue && !siteModel.Comments.InitialValue(context)));
            siteModel.ClassHash
                .Where(o => siteModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !siteModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            siteModel.NumHash
                .Where(o => siteModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !siteModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            siteModel.DateHash
                .Where(o => siteModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !siteModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            siteModel.DescriptionHash
                .Where(o => siteModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !siteModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            siteModel.CheckHash
                .Where(o => siteModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !siteModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            siteModel.AttachmentsHash
                .Where(o => siteModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !siteModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static OrdersColumnCollection OrdersDefaultColumns()
        {
            var column = OrdersColumn()
                .ReferenceId()
                .ReferenceType()
                .OwnerId()
                .Ver()
                .Data()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Orders")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.OrdersColumn(columnDefinition.ColumnName));
            return column;
        }

        public static OrdersJoinCollection OrdersJoinDefault()
        {
            var join = OrdersJoin();
            return join;
        }

        public static OrdersWhereCollection OrdersWhereDefault(OrderModel orderModel)
        {
            return OrdersWhere()
                .ReferenceId(orderModel.ReferenceId)
                .ReferenceType(orderModel.ReferenceType.MaxLength(32))
                .OwnerId(orderModel.OwnerId);
        }

        public static OrdersParamCollection OrdersParamDefault(
            Context context,
            OrderModel orderModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = OrdersParam()
                .ReferenceId(orderModel.ReferenceId, _using: orderModel.ReferenceId_Updated(context) || setDefault || (otherInitValue && !orderModel.ReferenceId.InitialValue(context)))
                .ReferenceType(orderModel.ReferenceType.MaxLength(32), _using: orderModel.ReferenceType_Updated(context) || setDefault || (otherInitValue && !orderModel.ReferenceType.InitialValue(context)))
                .OwnerId(orderModel.OwnerId, _using: orderModel.OwnerId_Updated(context) || setDefault || (otherInitValue && !orderModel.OwnerId.InitialValue(context)))
                .Ver(orderModel.Ver, _using: orderModel.Ver_Updated(context) || setDefault || (otherInitValue && !orderModel.Ver.InitialValue(context)))
                .Data(orderModel.Data.ToJson(), _using: orderModel.Data_Updated(context) || setDefault || (otherInitValue && !orderModel.Data.InitialValue(context)))
                .Comments(orderModel.Comments.ToJson(), _using: orderModel.Comments_Updated(context) || (otherInitValue && !orderModel.Comments.InitialValue(context)));
            orderModel.ClassHash
                .Where(o => orderModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !orderModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            orderModel.NumHash
                .Where(o => orderModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !orderModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            orderModel.DateHash
                .Where(o => orderModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !orderModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            orderModel.DescriptionHash
                .Where(o => orderModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !orderModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            orderModel.CheckHash
                .Where(o => orderModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !orderModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            orderModel.AttachmentsHash
                .Where(o => orderModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !orderModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static ExportSettingsColumnCollection ExportSettingsDefaultColumns()
        {
            var column = ExportSettingsColumn()
                .ReferenceType()
                .ReferenceId()
                .Title()
                .ExportSettingId()
                .Ver()
                .AddHeader()
                .ExportColumns()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "ExportSettings")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.ExportSettingsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static ExportSettingsJoinCollection ExportSettingsJoinDefault()
        {
            var join = ExportSettingsJoin();
            return join;
        }

        public static ExportSettingsWhereCollection ExportSettingsWhereDefault(ExportSettingModel exportSettingModel)
        {
            return ExportSettingsWhere()
                .ReferenceId(exportSettingModel.ReferenceId)
                .Title(exportSettingModel.Title.Value.MaxLength(1024))
                .ExportSettingId(exportSettingModel.ExportSettingId);
        }

        public static ExportSettingsParamCollection ExportSettingsParamDefault(
            Context context,
            ExportSettingModel exportSettingModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = ExportSettingsParam()
                .ReferenceType(exportSettingModel.ReferenceType.MaxLength(32), _using: exportSettingModel.ReferenceType_Updated(context) || setDefault || (otherInitValue && !exportSettingModel.ReferenceType.InitialValue(context)))
                .ReferenceId(exportSettingModel.ReferenceId, _using: exportSettingModel.ReferenceId_Updated(context) || setDefault || (otherInitValue && !exportSettingModel.ReferenceId.InitialValue(context)))
                .Title(exportSettingModel.Title.Value.MaxLength(1024), _using: exportSettingModel.Title_Updated(context) || setDefault || (otherInitValue && !exportSettingModel.Title.InitialValue(context)))
                .Ver(exportSettingModel.Ver, _using: exportSettingModel.Ver_Updated(context) || setDefault || (otherInitValue && !exportSettingModel.Ver.InitialValue(context)))
                .AddHeader(exportSettingModel.AddHeader, _using: exportSettingModel.AddHeader_Updated(context) || setDefault || (otherInitValue && !exportSettingModel.AddHeader.InitialValue(context)))
                .ExportColumns(exportSettingModel.ExportColumns.ToJson(), _using: exportSettingModel.ExportColumns_Updated(context) || setDefault || (otherInitValue && !exportSettingModel.ExportColumns.InitialValue(context)))
                .Comments(exportSettingModel.Comments.ToJson(), _using: exportSettingModel.Comments_Updated(context) || (otherInitValue && !exportSettingModel.Comments.InitialValue(context)));
            exportSettingModel.ClassHash
                .Where(o => exportSettingModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !exportSettingModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            exportSettingModel.NumHash
                .Where(o => exportSettingModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !exportSettingModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            exportSettingModel.DateHash
                .Where(o => exportSettingModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !exportSettingModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            exportSettingModel.DescriptionHash
                .Where(o => exportSettingModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !exportSettingModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            exportSettingModel.CheckHash
                .Where(o => exportSettingModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !exportSettingModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            exportSettingModel.AttachmentsHash
                .Where(o => exportSettingModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !exportSettingModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static LinksColumnCollection LinksDefaultColumns()
        {
            var column = LinksColumn()
                .DestinationId()
                .SourceId()
                .Ver()
                .ReferenceType()
                .SiteId()
                .Title()
                .Subset()
                .SiteTitle()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Links")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.LinksColumn(columnDefinition.ColumnName));
            return column;
        }

        public static LinksJoinCollection LinksJoinDefault()
        {
            var join = LinksJoin();
            join.Add(new SqlJoin(
                tableBracket: "[Items]",
                joinType: SqlJoin.JoinTypes.Inner,
                joinExpression: "[Links].[SourceId]=[Items].[ReferenceId]"));
            join.Add(new SqlJoin(
                tableBracket: "[Sites]",
                joinType: SqlJoin.JoinTypes.Inner,
                joinExpression: "[Items].[SiteId]=[Sites].[SiteId]"));
            return join;
        }

        public static LinksWhereCollection LinksWhereDefault(LinkModel linkModel)
        {
            return LinksWhere()
                .DestinationId(linkModel.DestinationId)
                .SourceId(linkModel.SourceId);
        }

        public static LinksParamCollection LinksParamDefault(
            Context context,
            LinkModel linkModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = LinksParam()
                .DestinationId(linkModel.DestinationId, _using: linkModel.DestinationId_Updated(context) || setDefault || (otherInitValue && !linkModel.DestinationId.InitialValue(context)))
                .SourceId(linkModel.SourceId, _using: linkModel.SourceId_Updated(context) || setDefault || (otherInitValue && !linkModel.SourceId.InitialValue(context)))
                .Ver(linkModel.Ver, _using: linkModel.Ver_Updated(context) || setDefault || (otherInitValue && !linkModel.Ver.InitialValue(context)))
                .Comments(linkModel.Comments.ToJson(), _using: linkModel.Comments_Updated(context) || (otherInitValue && !linkModel.Comments.InitialValue(context)));
            linkModel.ClassHash
                .Where(o => linkModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !linkModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            linkModel.NumHash
                .Where(o => linkModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !linkModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            linkModel.DateHash
                .Where(o => linkModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !linkModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            linkModel.DescriptionHash
                .Where(o => linkModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !linkModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            linkModel.CheckHash
                .Where(o => linkModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !linkModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            linkModel.AttachmentsHash
                .Where(o => linkModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !linkModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static BinariesColumnCollection BinariesDefaultColumns()
        {
            var column = BinariesColumn()
                .BinaryId()
                .TenantId()
                .ReferenceId()
                .Guid()
                .Ver()
                .BinaryType()
                .Title()
                .Body()
                .Bin()
                .Thumbnail()
                .Icon()
                .FileName()
                .Extension()
                .Size()
                .ContentType()
                .BinarySettings()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Binaries")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.BinariesColumn(columnDefinition.ColumnName));
            return column;
        }

        public static BinariesJoinCollection BinariesJoinDefault()
        {
            var join = BinariesJoin();
            return join;
        }

        public static BinariesWhereCollection BinariesWhereDefault(BinaryModel binaryModel)
        {
            return BinariesWhere()
                .BinaryId(binaryModel.BinaryId);
        }

        public static BinariesParamCollection BinariesParamDefault(
            Context context,
            BinaryModel binaryModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = BinariesParam()
                .TenantId(binaryModel.TenantId)
                .ReferenceId(binaryModel.ReferenceId, _using: binaryModel.ReferenceId_Updated(context) || setDefault || (otherInitValue && !binaryModel.ReferenceId.InitialValue(context)))
                .Guid(binaryModel.Guid.MaxLength(32), _using: binaryModel.Guid_Updated(context) || (otherInitValue && !binaryModel.Guid.InitialValue(context)))
                .Ver(binaryModel.Ver, _using: binaryModel.Ver_Updated(context) || setDefault || (otherInitValue && !binaryModel.Ver.InitialValue(context)))
                .BinaryType(binaryModel.BinaryType.MaxLength(32), _using: binaryModel.BinaryType_Updated(context) || (otherInitValue && !binaryModel.BinaryType.InitialValue(context)))
                .Title(binaryModel.Title.Value.MaxLength(1024), _using: binaryModel.Title_Updated(context) || (otherInitValue && !binaryModel.Title.InitialValue(context)))
                .Body(binaryModel.Body, _using: binaryModel.Body_Updated(context) || (otherInitValue && !binaryModel.Body.InitialValue(context)))
                .Bin(binaryModel.Bin, _using: binaryModel.Bin_Updated(context) || (otherInitValue && !binaryModel.Bin.InitialValue(context)))
                .Thumbnail(binaryModel.Thumbnail, _using: binaryModel.Thumbnail_Updated(context) || (otherInitValue && !binaryModel.Thumbnail.InitialValue(context)))
                .Icon(binaryModel.Icon, _using: binaryModel.Icon_Updated(context) || (otherInitValue && !binaryModel.Icon.InitialValue(context)))
                .FileName(binaryModel.FileName.MaxLength(1024), _using: binaryModel.FileName_Updated(context) || (otherInitValue && !binaryModel.FileName.InitialValue(context)))
                .Extension(binaryModel.Extension.MaxLength(32), _using: binaryModel.Extension_Updated(context) || (otherInitValue && !binaryModel.Extension.InitialValue(context)))
                .Size(binaryModel.Size, _using: binaryModel.Size_Updated(context) || (otherInitValue && !binaryModel.Size.InitialValue(context)))
                .ContentType(binaryModel.ContentType.MaxLength(1024), _using: binaryModel.ContentType_Updated(context) || (otherInitValue && !binaryModel.ContentType.InitialValue(context)))
                .BinarySettings(binaryModel.BinarySettings.ToJson(), _using: binaryModel.BinarySettings_Updated(context) || (otherInitValue && !binaryModel.BinarySettings.InitialValue(context)))
                .Comments(binaryModel.Comments.ToJson(), _using: binaryModel.Comments_Updated(context) || (otherInitValue && !binaryModel.Comments.InitialValue(context)));
            binaryModel.ClassHash
                .Where(o => binaryModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !binaryModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            binaryModel.NumHash
                .Where(o => binaryModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !binaryModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            binaryModel.DateHash
                .Where(o => binaryModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !binaryModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            binaryModel.DescriptionHash
                .Where(o => binaryModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !binaryModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            binaryModel.CheckHash
                .Where(o => binaryModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !binaryModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            binaryModel.AttachmentsHash
                .Where(o => binaryModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !binaryModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static PermissionsColumnCollection PermissionsDefaultColumns()
        {
            var column = PermissionsColumn()
                .ReferenceId()
                .DeptId()
                .GroupId()
                .UserId()
                .Ver()
                .DeptName()
                .GroupName()
                .Name()
                .PermissionType()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime()
                .UpdatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Permissions")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.PermissionsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static PermissionsJoinCollection PermissionsJoinDefault()
        {
            var join = PermissionsJoin();
            join.Add(new SqlJoin(
                tableBracket: "[Depts]",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "[Permissions].[DeptId]=[Depts].[DeptId]"));
            join.Add(new SqlJoin(
                tableBracket: "[Groups]",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "[Permissions].[GroupId]=[Groups].[GroupId]"));
            join.Add(new SqlJoin(
                tableBracket: "[Users]",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "[Permissions].[UserId]=[Users].[UserId]"));
            return join;
        }

        public static PermissionsWhereCollection PermissionsWhereDefault(PermissionModel permissionModel)
        {
            return PermissionsWhere()
                .ReferenceId(permissionModel.ReferenceId);
        }

        public static PermissionsParamCollection PermissionsParamDefault(
            Context context,
            PermissionModel permissionModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = PermissionsParam()
                .ReferenceId(permissionModel.ReferenceId, _using: permissionModel.ReferenceId_Updated(context) || setDefault || (otherInitValue && !permissionModel.ReferenceId.InitialValue(context)))
                .DeptId(permissionModel.DeptId, _using: permissionModel.DeptId_Updated(context) || setDefault || (otherInitValue && !permissionModel.DeptId.InitialValue(context)))
                .GroupId(permissionModel.GroupId, _using: permissionModel.GroupId_Updated(context) || setDefault || (otherInitValue && !permissionModel.GroupId.InitialValue(context)))
                .UserId(permissionModel.UserId, _using: permissionModel.UserId_Updated(context) || setDefault || (otherInitValue && !permissionModel.UserId.InitialValue(context)))
                .Ver(permissionModel.Ver, _using: permissionModel.Ver_Updated(context) || setDefault || (otherInitValue && !permissionModel.Ver.InitialValue(context)))
                .PermissionType(permissionModel.PermissionType.ToLong(), _using: permissionModel.PermissionType_Updated(context) || setDefault || (otherInitValue && !permissionModel.PermissionType.InitialValue(context)))
                .Comments(permissionModel.Comments.ToJson(), _using: permissionModel.Comments_Updated(context) || (otherInitValue && !permissionModel.Comments.InitialValue(context)));
            permissionModel.ClassHash
                .Where(o => permissionModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !permissionModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            permissionModel.NumHash
                .Where(o => permissionModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !permissionModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            permissionModel.DateHash
                .Where(o => permissionModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !permissionModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            permissionModel.DescriptionHash
                .Where(o => permissionModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !permissionModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            permissionModel.CheckHash
                .Where(o => permissionModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !permissionModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            permissionModel.AttachmentsHash
                .Where(o => permissionModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !permissionModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static IssuesColumnCollection IssuesDefaultColumns()
        {
            var column = IssuesColumn()
                .SiteId()
                .UpdatedTime()
                .IssueId()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .StartTime()
                .CompletionTime()
                .WorkValue()
                .ProgressRate()
                .RemainingWorkValue()
                .Status()
                .Manager()
                .Owner()
                .SiteTitle()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Issues")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.IssuesColumn(columnDefinition.ColumnName));
            return column;
        }

        public static IssuesColumnCollection IssuesEditorColumns(SiteSettings ss)
        {
            if (ss != null)
            {
                var ret = IssuesColumn()
                    .SiteId()
                    .IssueId()
                    .Comments();
                ss.SelectColumns()?
                    .ForEach(column => ret.IssuesColumn(column.ColumnName));
                return ret;
            }
            else
            {
                return IssuesDefaultColumns();
            }
        }

        public static IssuesJoinCollection IssuesJoinDefault()
        {
            var join = IssuesJoin();
            return join;
        }

        public static IssuesWhereCollection IssuesWhereDefault(IssueModel issueModel)
        {
            return IssuesWhere()
                .SiteId(issueModel.SiteId)
                .IssueId(issueModel.IssueId)
                .OnSelectingIssuesWhereExtendedSqls(issueModel);
        }

        public static IssuesParamCollection IssuesParamDefault(
            Context context,
            IssueModel issueModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = IssuesParam()
                .ItemId(issueModel.IssueId)
                .SiteId(issueModel.SiteId, _using: issueModel.SiteId_Updated(context) || setDefault || (otherInitValue && !issueModel.SiteId.InitialValue(context)))
                .Ver(issueModel.Ver, _using: issueModel.Ver_Updated(context) || setDefault || (otherInitValue && !issueModel.Ver.InitialValue(context)))
                .Title(issueModel.Title.Value.MaxLength(1024), _using: issueModel.Title_Updated(context) || setDefault || (otherInitValue && !issueModel.Title.InitialValue(context)))
                .Body(issueModel.Body, _using: issueModel.Body_Updated(context) || (otherInitValue && !issueModel.Body.InitialValue(context)))
                .StartTime(issueModel.StartTime, _using: issueModel.StartTime_Updated(context) || (otherInitValue && !issueModel.StartTime.InitialValue(context)))
                .CompletionTime(issueModel.CompletionTime.Value, _using: issueModel.CompletionTime_Updated(context) || setDefault || (otherInitValue && !issueModel.CompletionTime.InitialValue(context)))
                .WorkValue(issueModel.WorkValue.Value, _using: issueModel.WorkValue_Updated(context) || (otherInitValue && !issueModel.WorkValue.InitialValue(context)))
                .ProgressRate(issueModel.ProgressRate.Value, _using: issueModel.ProgressRate_Updated(context) || (otherInitValue && !issueModel.ProgressRate.InitialValue(context)))
                .Status(issueModel.Status.Value, _using: issueModel.Status_Updated(context) || setDefault || (otherInitValue && !issueModel.Status.InitialValue(context)))
                .Manager(issueModel.Manager.Id, _using: issueModel.Manager_Updated(context) || (otherInitValue && !issueModel.Manager.InitialValue(context)))
                .Owner(issueModel.Owner.Id, _using: issueModel.Owner_Updated(context) || (otherInitValue && !issueModel.Owner.InitialValue(context)))
                .Comments(issueModel.Comments.ToJson(), _using: issueModel.Comments_Updated(context) || (otherInitValue && !issueModel.Comments.InitialValue(context)));
            issueModel.ClassHash
                .Where(o => issueModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !issueModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            issueModel.NumHash
                .Where(o => issueModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !issueModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            issueModel.DateHash
                .Where(o => issueModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !issueModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            issueModel.DescriptionHash
                .Where(o => issueModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !issueModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            issueModel.CheckHash
                .Where(o => issueModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !issueModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            issueModel.AttachmentsHash
                .Where(o => issueModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !issueModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static ResultsColumnCollection ResultsDefaultColumns()
        {
            var column = ResultsColumn()
                .SiteId()
                .UpdatedTime()
                .ResultId()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .Status()
                .Manager()
                .Owner()
                .SiteTitle()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Results")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.ResultsColumn(columnDefinition.ColumnName));
            return column;
        }

        public static ResultsColumnCollection ResultsEditorColumns(SiteSettings ss)
        {
            if (ss != null)
            {
                var ret = ResultsColumn()
                    .SiteId()
                    .ResultId()
                    .Comments();
                ss.SelectColumns()?
                    .ForEach(column => ret.ResultsColumn(column.ColumnName));
                return ret;
            }
            else
            {
                return ResultsDefaultColumns();
            }
        }

        public static ResultsJoinCollection ResultsJoinDefault()
        {
            var join = ResultsJoin();
            return join;
        }

        public static ResultsWhereCollection ResultsWhereDefault(ResultModel resultModel)
        {
            return ResultsWhere()
                .SiteId(resultModel.SiteId)
                .ResultId(resultModel.ResultId)
                .OnSelectingResultsWhereExtendedSqls(resultModel);
        }

        public static ResultsParamCollection ResultsParamDefault(
            Context context,
            ResultModel resultModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = ResultsParam()
                .ItemId(resultModel.ResultId)
                .SiteId(resultModel.SiteId, _using: resultModel.SiteId_Updated(context) || setDefault || (otherInitValue && !resultModel.SiteId.InitialValue(context)))
                .Ver(resultModel.Ver, _using: resultModel.Ver_Updated(context) || setDefault || (otherInitValue && !resultModel.Ver.InitialValue(context)))
                .Title(resultModel.Title.Value.MaxLength(1024), _using: resultModel.Title_Updated(context) || (otherInitValue && !resultModel.Title.InitialValue(context)))
                .Body(resultModel.Body, _using: resultModel.Body_Updated(context) || (otherInitValue && !resultModel.Body.InitialValue(context)))
                .Status(resultModel.Status.Value, _using: resultModel.Status_Updated(context) || (otherInitValue && !resultModel.Status.InitialValue(context)))
                .Manager(resultModel.Manager.Id, _using: resultModel.Manager_Updated(context) || (otherInitValue && !resultModel.Manager.InitialValue(context)))
                .Owner(resultModel.Owner.Id, _using: resultModel.Owner_Updated(context) || (otherInitValue && !resultModel.Owner.InitialValue(context)))
                .Comments(resultModel.Comments.ToJson(), _using: resultModel.Comments_Updated(context) || (otherInitValue && !resultModel.Comments.InitialValue(context)));
            resultModel.ClassHash
                .Where(o => resultModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !resultModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            resultModel.NumHash
                .Where(o => resultModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !resultModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            resultModel.DateHash
                .Where(o => resultModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !resultModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            resultModel.DescriptionHash
                .Where(o => resultModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !resultModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            resultModel.CheckHash
                .Where(o => resultModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !resultModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            resultModel.AttachmentsHash
                .Where(o => resultModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !resultModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static WikisColumnCollection WikisDefaultColumns()
        {
            var column = WikisColumn()
                .SiteId()
                .UpdatedTime()
                .WikiId()
                .Ver()
                .Title()
                .Body()
                .TitleBody()
                .Comments()
                .Creator()
                .Updator()
                .CreatedTime();
            Def.ColumnDefinitionCollection
                .Where(columnDefinition => columnDefinition.TableName == "Wikis")
                .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                    column.WikisColumn(columnDefinition.ColumnName));
            return column;
        }

        public static WikisColumnCollection WikisEditorColumns(SiteSettings ss)
        {
            if (ss != null)
            {
                var ret = WikisColumn()
                    .SiteId()
                    .WikiId()
                    .Comments();
                ss.SelectColumns()?
                    .ForEach(column => ret.WikisColumn(column.ColumnName));
                return ret;
            }
            else
            {
                return WikisDefaultColumns();
            }
        }

        public static WikisJoinCollection WikisJoinDefault()
        {
            var join = WikisJoin();
            return join;
        }

        public static WikisWhereCollection WikisWhereDefault(WikiModel wikiModel)
        {
            return WikisWhere()
                .SiteId(wikiModel.SiteId)
                .WikiId(wikiModel.WikiId);
        }

        public static WikisParamCollection WikisParamDefault(
            Context context,
            WikiModel wikiModel,
            bool setDefault = false,
            bool otherInitValue = false)
        {
            var param = WikisParam()
                .ItemId(wikiModel.WikiId)
                .SiteId(wikiModel.SiteId, _using: wikiModel.SiteId_Updated(context) || setDefault || (otherInitValue && !wikiModel.SiteId.InitialValue(context)))
                .Ver(wikiModel.Ver, _using: wikiModel.Ver_Updated(context) || setDefault || (otherInitValue && !wikiModel.Ver.InitialValue(context)))
                .Title(wikiModel.Title.Value.MaxLength(1024), _using: wikiModel.Title_Updated(context) || setDefault || (otherInitValue && !wikiModel.Title.InitialValue(context)))
                .Body(wikiModel.Body, _using: wikiModel.Body_Updated(context) || (otherInitValue && !wikiModel.Body.InitialValue(context)))
                .Comments(wikiModel.Comments.ToJson(), _using: wikiModel.Comments_Updated(context) || (otherInitValue && !wikiModel.Comments.InitialValue(context)));
            wikiModel.ClassHash
                .Where(o => wikiModel.Class_Updated(columnName: o.Key)
                    || (otherInitValue && !wikiModel.Class(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value.MaxLength(1024)));
            wikiModel.NumHash
                .Where(o => wikiModel.Num_Updated(columnName: o.Key)
                    || (otherInitValue && !wikiModel.Num(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            wikiModel.DateHash
                .Where(o => wikiModel.Date_Updated(columnName: o.Key)
                    || (otherInitValue && !wikiModel.Date(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            wikiModel.DescriptionHash
                .Where(o => wikiModel.Description_Updated(columnName: o.Key)
                    || (otherInitValue && !wikiModel.Description(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            wikiModel.CheckHash
                .Where(o => wikiModel.Check_Updated(columnName: o.Key)
                    || (otherInitValue && !wikiModel.Check(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value));
            wikiModel.AttachmentsHash
                .Where(o => wikiModel.Attachments_Updated(columnName: o.Key)
                    || (otherInitValue && !wikiModel.Attachments(columnName: o.Key)
                        .InitialValue(context: context)))
                .ForEach(o =>
                    param.Add(
                        columnBracket: o.Key,
                        name: o.Key,
                        value: o.Value?.RecordingJson() ?? string.Empty));
            return param;
        }

        public static IssuesColumnCollection IssuesTitleColumn(Context context, SiteSettings ss)
        {
            var column = IssuesColumn();
            ss.GetTitleColumns(context: context)
                .Select(o => o.ColumnName)
                .ForEach(columnName =>
                    column.IssuesColumn(columnName: columnName));
            return column;
        }

        public static ResultsColumnCollection ResultsTitleColumn(Context context, SiteSettings ss)
        {
            var column = ResultsColumn();
            ss.GetTitleColumns(context: context)
                .Select(o => o.ColumnName)
                .ForEach(columnName =>
                    column.ResultsColumn(columnName: columnName));
            return column;
        }

        public static WikisColumnCollection WikisTitleColumn(Context context, SiteSettings ss)
        {
            var column = WikisColumn();
            ss.GetTitleColumns(context: context)
                .Select(o => o.ColumnName)
                .ForEach(columnName =>
                    column.WikisColumn(columnName: columnName));
            return column;
        }
    }
}
