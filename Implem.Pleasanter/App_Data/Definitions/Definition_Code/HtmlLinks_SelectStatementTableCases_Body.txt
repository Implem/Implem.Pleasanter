private static SqlStatement Select#TableName#(
    Context context,
    SiteSettings ss,
    View view,
    long id,
    string direction,
    Dictionary<long, DataSet> cache = null)
{
    var column = #TableName#LinkColumns(
        context: context,
        ss: ss,
        view: view,
        direction: direction,
        cache: cache);
    var where = view.Where(
        context: context,
        ss: ss,
        where: Rds.#TableName#Where()
            .#ModelName#Id_In(sub: Targets(
                context: context,
                id: id,
                direction: direction))
            .CanRead(
                context: context,
                idColumnBracket: "\"#TableName#\".\"#ModelName#Id\"")
            .Sites_TenantId(context.TenantId));
    var orderBy = view.OrderBy(
        context: context,
        ss: ss);
    return Rds.Select#TableName#(
        dataTableName: DataTableName(
            ss: ss,
            direction: direction),
        column: column,
        join: ss.Join(
            context: context,
            join: new IJoin[]
            {
                column,
                where,
                orderBy
            })
                .Add(
                    tableName: "\"Sites\"",
                    joinType: SqlJoin.JoinTypes.Inner,
                    joinExpression: "\"Sites\".\"SiteId\"=\"#TableName#\".\"SiteId\""),
        where: where,
        orderBy: orderBy);
}

public static SqlColumnCollection #TableName#LinkColumns(
    Context context,
    SiteSettings ss,
    View view,
    string direction,
    Dictionary<long, DataSet> cache = null)
{
    if (ss?.Links
        ?.Where(o => o.SiteId > 0)
        .Any() == true)
    {
        ss.SetLinkedSiteSettings(
            context: context,
            cache: cache);
    }
    var column = ColumnUtilities.SqlColumnCollection(
        context: context,
        ss: ss,
        view: view,
        columns: ss.GetLinkTableColumns(
            context: context,
            view: view));
    column.Add("'" + direction + "' as Direction");
    return new SqlColumnCollection(column
        .GroupBy(o => o.ColumnBracket + o.As)
        .Select(o => o.First())
        .ToArray());
}