public static ContentResultInheritance BulkUpsertByApi(
    Context context,
    SiteSettings ss)
{
    if (!Mime.ValidateOnApi(contentType: context.ContentType))
    {
        return ApiResults.BadRequest(context: context);
    }
    var api = context.RequestDataString.Deserialize<Api>();
    var bulkUpsertModel = context.RequestDataString.Deserialize<#ModelName#s.#ModelName#BulkUpsertApiModel>();
    if (bulkUpsertModel?.Data == null ||
        (bulkUpsertModel.KeyNotFoundCreate == false && bulkUpsertModel.Keys == null))
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.InvalidJsonData));
    }
    if (Parameters.General.BulkUpsertMax > 0 && Parameters.General.BulkUpsertMax < bulkUpsertModel.Data.Count)
    {
        return ApiResults.Get(new ApiResponse(
            id: context.Id,
            statusCode: 500,
            message: Error.Types.ImportMax.Message(
                context: context,
                data: Parameters.General.BulkUpsertMax.ToString()).Text));
    }
    var (isValid, missingKeys) = ValidateJsonKeys(jsonString: context.RequestDataString, ss: ss);
    if (!isValid)
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(
                type: Error.Types.invalidUpsertKey,
                data: $"({string.Join(", ", missingKeys)})"));
    }
    using var exclusiveObj = new Sessions.TableExclusive(context: context);
    if (!exclusiveObj.TryLock())
    {
        return ApiResults.Get(new ApiResponse(
            id: context.Id,
            statusCode: 429,
            message: Messages.ImportLock(context: context).Text));
    }
    var recodeCount = 0;
    var insertCount = 0;
    var updateCount = 0;
    var error = DoBulkUpsert();
    ErrorData DoBulkUpsert()
    {
        foreach (var #modelName#ApiModel in bulkUpsertModel.Data)
        {
            recodeCount++;
            exclusiveObj.Refresh();
            var view = api.View ?? new View();
            foreach(var columnName in api.Keys??new List<string>())
            {
                var objectValue = #modelName#ApiModel.ObjectValue(columnName: columnName);
                if (objectValue != null)
                {
                    var column = ss.GetColumn(
                        context: context,
                        columnName: columnName);
                    if (column?.TypeName == "datetime"
                        && objectValue.ToDateTime().InRange() == false)
                    {
                        return new ErrorData(
                            type: Error.Types.invalidUpsertKey,
                            data: $"('{columnName}'='{objectValue.ToStr()}')");
                    }
                    view.AddColumnFilterHash(
                        context: context,
                        ss: ss,
                        column: column,
                        objectValue: objectValue);
                    view.AddColumnFilterSearchTypes(
                        columnName: columnName,
                        searchType: Column.SearchTypes.ExactMatch);
                }
            }
            var #modelName#Model = new #ModelName#Model(
                context: context,
                ss: ss,
                #modelName#Id: 0,
                view: api.Keys?.Count > 0 ? view : null,
                #modelName#ApiModel: #modelName#ApiModel);
            switch (#modelName#Model.AccessStatus)
            {
                case Databases.AccessStatuses.Selected:
                case Databases.AccessStatuses.NotFound:
                    break;
                case Databases.AccessStatuses.Overlap:
                    return new ErrorData(type: Error.Types.Overlap);
                default:
                    return new ErrorData(type: Error.Types.NotFound);
            }
            
            var processes = ss.Processes?.FirstOrDefault(process => process.Id == #modelName#ApiModel.ProcessId)?.ToSingleList();
            if (#modelName#Model.AccessStatus == Databases.AccessStatuses.Selected)
            {
                // Keysの指定があり、該当レコードがある場合に更新
                // サイトの書き込み権限で可否判定を行い、レコード単位のアクセス権はチェックは行わない。
                error = ApplyUpdateByApi(
                    context: context,
                    ss: ss,
                    #modelName#Model: #modelName#Model,
                    processes: processes,
                    previousTitle: null);
                if (error.Type != Error.Types.None) return error;
                updateCount++;
            }
            else if (#modelName#Model.AccessStatus == Databases.AccessStatuses.NotFound
                && (api.Keys?.Count == 0 || bulkUpsertModel.KeyNotFoundCreate == true))
            {
                // Keysの指定が無い場合は全て新規作成。
                // Keysの指定があり、該当レコードがなく KeyNotFoundCreate =true の場合に新規作成
                error = ApplyCreateByApi(
                    context: context,
                    ss: ss,
                    #modelName#Model: #modelName#Model,
                    processes: processes);
                if (error.Type != Error.Types.None) return error;
                insertCount++;
            }
        }
        return new ErrorData(Error.Types.None);
    }
    exclusiveObj.Refresh();

    if (error.Type != Error.Types.None)
    {
        // エラー時の戻り
        var errMessage = error.Data?.Any() == true
                ? Displays.Get(
                    context: context,
                    id: error.Type.ToString()).Params(error.Data)
                : Displays.Get(
                    context: context,
                    id: error.Type.ToString());
        if (error.Type == Error.Types.Duplicated)
        {
            var duplicatedColumn = ss.GetColumn(
                context: context,
                columnName: error.ColumnName);
            errMessage = duplicatedColumn?.MessageWhenDuplicated.IsNullOrEmpty() != false
                ? Displays.Duplicated(
                    context: context,
                    data: duplicatedColumn?.LabelText)
                : duplicatedColumn?.MessageWhenDuplicated;
        }
        var recodeIndex = recodeCount.ToString();
        if (api.Keys?.Count > 0)
        {
            var #modelName#ApiModel = bulkUpsertModel.Data[recodeCount - 1];
            recodeIndex += "("
                + api.Keys.Select(
                        columnName => $"{columnName}={#modelName#ApiModel.ObjectValue(columnName: columnName) ?? string.Empty}"
                    ).Join()
                + ")";
        }
        return ApiResults.Get(new ApiResponse(
            id: context.Id,
            statusCode: 500,
            message: Displays.FailedBulkUpsert(
                context: context,
                data: new string[]
                {
                    ss.Title,
                    insertCount.ToString(),
                    updateCount.ToString(),
                    recodeIndex,
                    errMessage
                })));
    }
    ss.Notifications.ForEach(notification =>
    {
        var body = new System.Text.StringBuilder();
        body.Append(Locations.ItemIndexAbsoluteUri(
            context: context,
            ss.SiteId) + "\n");
        body.Append(
            $"{Displays.#ModelName#s_Updator(context: context)}: ",
            $"{context.User.Name}\n");
        if (notification.AfterImport != false)
        {
            notification.Send(
                context: context,
                ss: ss,
                title: Displays.Imported(
                    context: context,
                    data: new string[]
                    {
                        ss.Title,
                        insertCount.ToString(),
                        updateCount.ToString()
                    }),
                body: body.ToString());
        }
    });
    return ApiResults.Success(
        id: context.Id,
        limitPerDate: context.ContractSettings.ApiLimit(),
        limitRemaining: context.ContractSettings.ApiLimit() - ss.ApiCount,
        message: Messages.Imported(
            context: context,
            data: new string[]
            {
                ss.Title,
                insertCount.ToString(),
                updateCount.ToString()
            }).Text);
}
