public void SetByCsvRow(
    Context context,
    SiteSettings ss,
    Dictionary<int, ImportColumn> columnHash,
    List<string> row,
    bool migrationMode = false)
{
    columnHash
        .Where(column =>
            (column.Value.Column.CanCreate(
                context: context,
                ss: ss,
                mine: Mine(context: context))
                    && #ModelName#Id == 0)
            || (column.Value.Column.CanUpdate(
                context: context,
                ss: ss,
                mine: Mine(context: context))
                    && #ModelName#Id > 0))
        .ForEach(column =>
        {
            var recordingData = ImportRecordingData(
                context: context,
                column: column.Value.Column,
                value: ImportUtilities.RecordingData(
                    columnHash: columnHash,
                    row: row,
                    column: column),
                inheritPermission: ss.InheritPermission);
            switch (column.Value.Column.ColumnName)
            {

<!--Model_SetByCsvRowColumnCases-->
<!--Model_SetByCsvRowUserColumnCases-->

                case "Comments":
                    if (!row[column.Key].IsNullOrEmpty())
                    {
                        Comments.ClearAndSplitPrepend(
                            context: context,
                            ss: ss,
                            body: row[column.Key],
                            update: AccessStatus == Databases.AccessStatuses.Selected);
                    }
                    break;
                default:
                    SetValue(
                        context: context,
                        column: column.Value.Column,
                        value: recordingData);
                    break;
            }
            if (migrationMode)
            {
                switch (column.Value.Column.ColumnName)
                {
                    case "Creator":
                        Creator = SiteInfo.User(
                            context: context,
                            userId: recordingData.ToInt());
                        break;
                    case "Updator":
                        Updator = SiteInfo.User(
                            context: context,
                            userId: recordingData.ToInt());
                        break;
                    case "CreatedTime":
                        CreatedTime = new Time(
                            context: context,
                            value: recordingData.ToDateTime());
                        break;
                    case "UpdatedTime":
                        UpdatedTime = new Time(
                            context: context,
                            value: recordingData.ToDateTime());
                        break;
                }
            }
        });
    SetBySettings(
        context: context,
        ss: ss);
    SetByFormula(
        context: context,
        ss: ss);
    SetTitle(
        context: context,
        ss: ss);
}

private static string ImportRecordingData(
    Context context, Column column, string value, long inheritPermission)
{
    var recordingData = column.RecordingData(
        context: context,
        value: value,
        siteId: inheritPermission);
    return recordingData;
}