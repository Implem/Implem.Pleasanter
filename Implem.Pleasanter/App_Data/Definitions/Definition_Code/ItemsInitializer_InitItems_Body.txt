Repository.ExecuteNonQuery(
    context: context,
    statements: Rds.PhysicalDelete#TableName#(
        where: Rds.ItemsWhere().Add(raw: sqlExists.Params(
            "\"#TableName#_deleted\"",
            "\"#TableName#_deleted\".\"#ModelName#Id\"",
            "\"#TableName#\".\"#ModelName#Id\""))));
Repository.ExecuteNonQuery(
    context: context,
    statements: Rds.Delete#TableName#(
        factory: context,
        where: Rds.ItemsWhere().Add(raw: sqlExists.Params(
            "\"Items_deleted\"",
            "\"Items_deleted\".\"ReferenceId\"",
            "\"#TableName#\".\"#ModelName#Id\""))));
Repository.ExecuteTable(
    context: context,
    statements: Rds.Select#TableName#(
        tableType: Sqls.TableTypes.Normal,
        column: Rds.#TableName#Column()
            .SiteId()
            .#ModelName#Id()
            .Ver()
            .Sites_TenantId(),
        join: Rds.#TableName#JoinDefault()
            .Add(
                tableName: "\"Items\"",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "\"Items\".\"ReferenceId\"=\"#TableName#\".\"#ModelName#Id\"")
            .Add(
                tableName: "\"Sites\"",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "\"Sites\".\"SiteId\"=\"#TableName#\".\"SiteId\""),
        where: Rds.ItemsWhere()
            .ReferenceId(
                tableName: "Items",
                _operator: " is null")))
                    .AsEnumerable()
                    .ForEach(dataRow =>
                    {
                        var siteId = dataRow.Long("SiteId");
                        var ss = new SiteModel().Get(
                            context: new Context(tenantId: dataRow.Int("TenantId")),
                            where: Rds.SitesWhere().SiteId(siteId))?
                                .#TableName#SiteSettings(
                                    context: new Context(tenantId: dataRow.Int("TenantId")),
                                    referenceId: dataRow.Long("#ModelName#Id"));
                        var #modelName#Model = new #ModelName#Model(
                            context: new Context(tenantId: dataRow.Int("TenantId")),
                            ss: ss)
                                .Get(
                                    context: new Context(tenantId: dataRow.Int("TenantId")),
                                    ss: ss,
                                    tableType: Sqls.TableTypes.Normal,
                                    where: Rds.#TableName#Where()
                                        .SiteId(dataRow.Long("SiteId"))
                                        .#ModelName#Id(dataRow.Long("#ModelName#Id"))
                                        .Ver(dataRow.Int("Ver")));
                        if (ss != null &&
                            #modelName#Model.AccessStatus == Databases.AccessStatuses.Selected)
                        {
                            var fullText = #modelName#Model.FullText(
                                context: new Context(tenantId: dataRow.Int("TenantId")),
                                ss: ss);
                            Repository.ExecuteNonQuery(
                                context: new Context(tenantId: dataRow.Int("TenantId")),
                                connectionString: Parameters.Rds.OwnerConnectionString,
                                statements: new SqlStatement[]
                                {
                                    Rds.IdentityInsertItems(
                                        factory: context,
                                        on: true),
                                    Rds.InsertItems(
                                        param: Rds.ItemsParam()
                                            .ReferenceId(#modelName#Model.#ModelName#Id)
                                            .ReferenceType("#TableName#")
                                            .SiteId(#modelName#Model.SiteId)
                                            .Title(#modelName#Model.Title.MessageDisplay(context: context))
                                            .FullText(fullText, _using: fullText != null)
                                            .SearchIndexCreatedTime(DateTime.Now)),
                                    Rds.IdentityInsertItems(
                                        factory: context,
                                        on: false)
                                });
                        }
                    });
Repository.ExecuteTable(
    context: context,
    statements: Rds.Select#TableName#(
        tableType: Sqls.TableTypes.Deleted,
        column: Rds.#TableName#Column()
            .SiteId()
            .#ModelName#Id()
            .Ver(),
        join: Rds.#TableName#JoinDefault()
            .Add(
                tableName: "\"Items_deleted\"",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "\"Items_deleted\".\"ReferenceId\"=\"#TableName#\".\"#ModelName#Id\"")
            .Add(
                tableName: "\"Sites\"",
                joinType: SqlJoin.JoinTypes.LeftOuter,
                joinExpression: "\"Sites\".\"SiteId\"=\"#TableName#\".\"SiteId\""),
        where: Rds.ItemsWhere()
            .ReferenceId(
                tableName: "Items_deleted",
                _operator: " is null")))
                    .AsEnumerable()
                    .ForEach(dataRow =>
                    {
                        var siteId = dataRow.Long("SiteId");
                        var ss = new SiteModel().Get(
                            context: new Context(tenantId: dataRow.Int("TenantId")),
                            where: Rds.SitesWhere().SiteId(siteId))?
                                .#TableName#SiteSettings(
                                    context: new Context(tenantId: dataRow.Int("TenantId")),
                                    referenceId: dataRow.Long("#ModelName#Id"));
                        var #modelName#Model = new #ModelName#Model(
                            context: new Context(tenantId: dataRow.Int("TenantId")),
                            ss: ss)
                                .Get(
                                    context: new Context(tenantId: dataRow.Int("TenantId")),
                                    ss: ss,
                                    tableType: Sqls.TableTypes.Deleted,
                                    where: Rds.#TableName#Where()
                                        .SiteId(dataRow.Long("SiteId"))
                                        .#ModelName#Id(dataRow.Long("#ModelName#Id"))
                                        .Ver(dataRow.Int("Ver")));
                        if (ss != null &&
                            #modelName#Model.AccessStatus == Databases.AccessStatuses.Selected)
                        {
                            Repository.ExecuteNonQuery(
                                context: new Context(tenantId: dataRow.Int("TenantId")),
                                statements: new SqlStatement[]
                                {
                                    Rds.InsertItems(
                                        tableType: Sqls.TableTypes.Deleted,
                                        param: Rds.ItemsParam()
                                            .ReferenceId(#modelName#Model.#ModelName#Id)
                                            .Ver(#modelName#Model.Ver)
                                            .ReferenceType("#TableName#")
                                            .SiteId(#modelName#Model.SiteId)
                                            .Title(#modelName#Model.Title.MessageDisplay(context: context)))
                                });
                        }
                    });