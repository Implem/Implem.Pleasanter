public static bool UpsertByServerScript(
    Context context,
    SiteSettings ss,
    string previousTitle,
    object model)
{
    var api = context.RequestDataString.Deserialize<Api>();
    var #modelName#ApiModel = context.RequestDataString.Deserialize<#ModelName#ApiModel>();
    if (api?.Keys?.Any() != true || #modelName#ApiModel == null)
    {
        context.InvalidJsonData = !context.RequestDataString.IsNullOrEmpty();
        return false;
    }
    var (isValid, missingKeys) = ValidateJsonKeys(jsonString: context.RequestDataString, ss: ss);
    if (!isValid)
    {
        return false;
    }
    var error = Error.Types.None;
    api.View = api.View ?? new View();
    api.Keys.ForEach(columnName =>
    {
        if (error != Error.Types.None) return;
        var objectValue = #modelName#ApiModel.ObjectValue(columnName: columnName);
        if (objectValue != null)
        {
            var column = ss.GetColumn(
                context: context,
                columnName: columnName);
            if (column?.TypeName == "datetime"
                && objectValue.ToDateTime().InRange() == false)
            {
                error = Error.Types.InvalidUpsertKey;
                return;
            }
            api.View.AddColumnFilterHash(
                context: context,
                ss: ss,
                column: ss.GetColumn(
                    context: context,
                    columnName: columnName),
                objectValue: objectValue);
            api.View.AddColumnFilterSearchTypes(
                columnName: columnName,
                searchType: Column.SearchTypes.ExactMatch);
        }
    });
    if (error != Error.Types.None)
    {
        return false;
    }
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: 0,
        view: api.View,
        #modelName#ApiModel: #modelName#ApiModel);
    switch (#modelName#Model.AccessStatus)
    {
        case Databases.AccessStatuses.Selected:
            return UpdateByServerScript(
                context: context,
                ss: ss,
                #modelName#Id: #modelName#Model.#ModelName#Id, 
                previousTitle: #modelName#Model.Title.DisplayValue,
                model: model);
        case Databases.AccessStatuses.NotFound:
            return CreateByServerScript(
                context: context,
                ss: ss,
                model: model);
        default:
            return false;
    }
}