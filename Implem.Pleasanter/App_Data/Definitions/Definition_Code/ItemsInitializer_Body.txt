using Implem.DefinitionAccessor;
using Implem.Libraries.DataSources.SqlServer;
using Implem.Libraries.Utilities;
using Implem.Pleasanter.Libraries.DataSources;
using Implem.Pleasanter.Libraries.Requests;
using Implem.Pleasanter.Libraries.Responses;
using Implem.Pleasanter.Libraries.Settings;
using Implem.Pleasanter.Models;
using System;
using System.Data;
using System.Linq;
namespace Implem.Pleasanter.Libraries.Initializers
{
    public static class ItemsInitializer
    {
        public static void Initialize(Context context)
        {
            if (!context.HasPrivilege) return;
            var sqlExists = "exists (select * from {0} where {1}={2})";
            Repository.ExecuteNonQuery(
                context: context,
                statements: Rds.PhysicalDeleteItems(
                    where: Rds.ItemsWhere().Add(raw: sqlExists.Params(
                        "\"Items_deleted\"",
                        "\"Items_deleted\".\"ReferenceId\"",
                        "\"Items\".\"ReferenceId\""))));
            Repository.ExecuteNonQuery(
                context: context,
                statements: Rds.PhysicalDeleteSites(
                    where: Rds.ItemsWhere().Add(raw: sqlExists.Params(
                        "\"Sites_deleted\"",
                        "\"Sites_deleted\".\"SiteId\"",
                        "\"Sites\".\"SiteId\""))));
            Repository.ExecuteNonQuery(
                context: context,
                statements: Rds.DeleteSites(
                    factory: context,
                    where: Rds.ItemsWhere().Add(raw: sqlExists.Params(
                        "\"Items_deleted\"",
                        "\"Items_deleted\".\"ReferenceId\"",
                        "\"Sites\".\"SiteId\""))));
            new SiteCollection(
                context: context,
                where: Rds.SitesWhere().Add(raw: "not " + sqlExists.Params(
                    "\"Items\"",
                    "\"Items\".\"ReferenceId\"",
                    "\"Sites\".\"SiteId\"")),
                tableType: Sqls.TableTypes.Normal)
                    .ForEach(siteModel =>
                    {
                        if (siteModel.SiteSettings != null)
                        {
                            var fullText = siteModel.FullText(
                                context: new Context(tenantId: siteModel.TenantId),
                                ss: siteModel.SiteSettings);
                            Repository.ExecuteNonQuery(
                                context: new Context(tenantId: siteModel.TenantId),
                                connectionString: Parameters.Rds.OwnerConnectionString,
                                statements: new SqlStatement[]
                                {
                                    Rds.IdentityInsertItems(
                                        factory: context,
                                        on: true),
                                    Rds.InsertItems(
                                        param: Rds.ItemsParam()
                                            .ReferenceId(siteModel.SiteId)
                                            .ReferenceType("Sites")
                                            .SiteId(siteModel.SiteId)
                                            .Title(siteModel.Title.Value)
                                            .FullText(fullText, _using: fullText != null)
                                            .SearchIndexCreatedTime(DateTime.Now)),
                                    Rds.IdentityInsertItems(
                                        factory: context,
                                        on: false)
                                });
                        }
                    });
            new SiteCollection(
                context: context,
                where: Rds.SitesWhere().Add(raw: "not " + sqlExists.Params(
                    "\"Items_deleted\"",
                    "\"Items_deleted\".\"ReferenceId\"",
                    "\"Sites\".\"SiteId\"")),
                tableType: Sqls.TableTypes.Deleted)
                    .ForEach(siteModel =>
                    {
                        if (siteModel.SiteSettings != null)
                        {
                            Repository.ExecuteNonQuery(
                                context: new Context(tenantId: siteModel.TenantId),
                                statements: new SqlStatement[]
                                {
                                    Rds.InsertItems(
                                        tableType: Sqls.TableTypes.Deleted,
                                        param: Rds.ItemsParam()
                                            .ReferenceId(siteModel.SiteId)
                                            .Ver(siteModel.Ver)
                                            .ReferenceType("Sites")
                                            .SiteId(siteModel.SiteId)
                                            .Title(siteModel.Title.Value))
                                });
                }
            });

<!--ItemsInitializer_InitItems-->

        }
    }
}