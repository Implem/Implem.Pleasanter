public static string DeleteHistory(Context context, SiteSettings ss, long #modelName#Id)
{
    if (!Parameters.History.PhysicalDelete)
    {
        return Error.Types.InvalidRequest.MessageJson(context: context);
    }
    if (context.CanManageSite(ss: ss))
    {
        var selector = new RecordSelector(context: context);
        var selected = selector
            .Selected
            .Select(o => o.ToInt())
            .ToList();
        var count = 0;
        if (selector.All)
        {
            count = DeleteHistory(
                context: context,
                ss: ss,
                #modelName#Id: #modelName#Id,
                selected: selected,
                negative: true);
        }
        else
        {
            if (selector.Selected.Any())
            {
                count = DeleteHistory(
                    context: context,
                    ss: ss,
                    #modelName#Id: #modelName#Id,
                    selected: selected);
            }
            else
            {
                return Messages.ResponseSelectTargets(context: context).ToJson();
            }
        }
        var siteModel = new SiteModel(context: context, siteId: siteId);
        siteModel.SiteSettings = SiteSettingsUtilities.Get(
            context: context,
            siteModel: siteModel,
            referenceId: #modelName#Id,
            tableType: ss.TableType);
        return Histories(
            context: context,
            siteModel: siteModel,
            message: Messages.HistoryDeleted(
                context: context,
                data: count.ToString()));
    }
    else
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
}

private static int DeleteHistory(
    Context context,
    SiteSettings ss,
    long #modelName#Id,
    List<int> selected,
    bool negative = false)
{
    return Repository.ExecuteScalar_response(
        context: context,
        transactional: true,
        statements: new SqlStatement[]
        {
            Rds.PhysicalDelete#TableName#(
                tableType: Sqls.TableTypes.History,
                where: Rds.#TableName#Where()
                    .TenantId(
                        value: context.TenantId,
                        tableName: "#TableName#_History")
                    .SiteId(
                        value: ss.SiteId,
                        tableName: "#TableName#_History")
                    .Ver_In(
                        value: selected,
                        tableName: "#TableName#_History",
                        negative: negative,
                        _using: selected.Any())),
            Rds.RowCount()
        }).Count.ToInt();
}