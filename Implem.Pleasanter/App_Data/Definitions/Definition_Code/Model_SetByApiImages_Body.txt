public void SetPostedFile(
    Microsoft.AspNetCore.Http.IFormFile file,
    string columnName,
    Shared._ImageApiModel image)
{
    PostedImageHash.Add(
        columnName,
        new PostedFile()
        {
            Guid = new HttpPostedFile(file).WriteToTemp(),
            FileName = file.FileName.Split(System.IO.Path.DirectorySeparatorChar).Last(),
            Extension = image.Extension,
            Size = file.Length,
            ContentType = MimeKit.MimeTypes.GetMimeType(image.Extension),
            ContentRange = file.Length > 0
                ? new System.Net.Http.Headers.ContentRangeHeaderValue(
                    0,
                    file.Length - 1,
                    file.Length)
                : new System.Net.Http.Headers.ContentRangeHeaderValue(0, 0, 0),
            InputStream = file.OpenReadStream()
        });
}

public void SetImageValue(
    Context context,
    SiteSettings ss,
    string columnName,
    Shared._ImageApiModel imageApiModel)
{
    var imageText = $"![{imageApiModel.Alt}]" + "({0})".Params(Locations.ShowFile(
        context: context,
        guid: PostedImageHash.Get(columnName).Guid));
    switch (columnName)
    {
        case "Body":
            Body = InsertImageText(
                body: Body,
                imageText: imageText,
                imageApiModel: imageApiModel);
            break;
        case "Comments":
            var comment = Comments.GetCreated(
                context: context,
                ss: ss);
            comment.Body = InsertImageText(
                body: comment.Body,
                imageText: imageText,
                imageApiModel: imageApiModel);
            break;
        default:
            if (Def.ExtendedColumnTypes.Get(columnName) == "Description")
            {
                if (!DescriptionHash.ContainsKey(columnName))
                {
                    DescriptionHash.Add(columnName, string.Empty);
                }
                DescriptionHash[columnName] = InsertImageText(
                    body: DescriptionHash.Get(columnName),
                    imageText: imageText,
                    imageApiModel: imageApiModel);
            }
            break;
    }
}

public string InsertImageText(
    string body,
    string imageText,
    Shared._ImageApiModel imageApiModel)
{
    if (imageApiModel.HeadNewLine == true)
    {
        imageText = $"\n{imageText}";
    }
    if (imageApiModel.EndNewLine == true)
    {
        imageText = $"{imageText}\n";
    }
    var insertedBody = imageApiModel.Position.ToInt() == -1
        ? body + imageText
        : imageApiModel.Position.ToInt() < body.Length
            ? body.Insert(imageApiModel.Position.ToInt(), imageText)
            : body + imageText;
    return insertedBody;
}