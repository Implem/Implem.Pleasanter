public static string DeleteHistory(Context context, SiteSettings ss, long #modelName#Id)
{
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: #modelName#Id);
    var invalid = #ModelName#Validators.OnDeleteHistory(
        context: context,
        ss: ss,
        #modelName#Model: #modelName#Model);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return invalid.MessageJson(context: context);
    }
    var selector = new RecordSelector(context: context);
    var selected = selector
        .Selected
        .Select(o => o.ToInt())
        .ToList();
    var count = 0;
    if (selector.All)
    {
        count = DeleteHistory(
            context: context,
            ss: ss,
            #modelName#Id: #modelName#Id,
            selected: selected,
            negative: true);
    }
    else
    {
        if (selector.Selected.Any())
        {
            count = DeleteHistory(
                context: context,
                ss: ss,
                #modelName#Id: #modelName#Id,
                selected: selected);
        }
        else
        {
            return Messages.ResponseSelectTargets(context: context).ToJson();
        }
    }
    return Histories(
        context: context,
        ss: ss,
        #modelName#Id: #modelName#Id,
        message: Messages.HistoryDeleted(
            context: context,
            data: count.ToString()));
}

private static int DeleteHistory(
    Context context,
    SiteSettings ss,
    long #modelName#Id,
    List<int> selected,
    bool negative = false)
{
    return Repository.ExecuteScalar_response(
        context: context,
        transactional: true,
        statements: new SqlStatement[]
        {
            Rds.PhysicalDelete#TableName#(
                tableType: Sqls.TableTypes.History,
                where: Rds.#TableName#Where()
                    .SiteId(
                        value: ss.SiteId,
                        tableName: "#TableName#_History")
                    .#ModelName#Id(
                        value: #modelName#Id,
                        tableName: "#TableName#_History")
                    .Ver_In(
                        value: selected,
                        tableName: "#TableName#_History",
                        negative: negative,
                        _using: selected.Any())
                    .#ModelName#Id_In(
                        tableName: "#TableName#_History",
                        sub: Rds.Select#TableName#(
                            tableType: Sqls.TableTypes.History,
                            column: Rds.#TableName#Column().#ModelName#Id(),
                            where: new View()
                                .Where(
                                    context: context,
                                    ss: ss)))),
            Rds.RowCount()
        }).Count.ToInt();
}