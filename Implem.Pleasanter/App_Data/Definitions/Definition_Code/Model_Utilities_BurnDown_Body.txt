public static string BurnDown(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "BurnDown"))
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.HasNotPermission));
    }
    var hb = new HtmlBuilder();
    var view = Views.GetBySession(context: context, ss: ss);
    var viewMode = ViewModes.GetSessionData(
        context: context,
        siteId: ss.SiteId);
    var inRange = InRange(
        context: context,
        ss: ss,
        view: view,
        limit: Parameters.General.BurnDownLimit);
    if (!inRange)
    {
        SessionUtilities.Set(
            context: context,
            message: Messages.TooManyCases(
                context: context,
                data: Parameters.General.BurnDownLimit.ToString()));
    }
    var serverScriptModelRow = ss.GetServerScriptModelRow(
        context: context,
        view: view);
    return hb.ViewModeTemplate(
        context: context,
        ss: ss,
        view: view,
        viewMode: viewMode,
        serverScriptModelRow: serverScriptModelRow,
        viewModeBody: () =>
        {
            if (inRange)
            {
                hb.BurnDown(
                    context: context,
                    ss: ss,
                    dataRows: BurnDownDataRows(context: context, ss: ss, view: view),
                    ownerLabelText: ss.GetColumn(context: context, columnName: "Owner").GridLabelText,
                    column: ss.GetColumn(context: context, columnName: "WorkValue"));
            }
        });
}

public static string BurnDownJson(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "BurnDown"))
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
    var view = Views.GetBySession(
        context: context,
        ss: ss);
    return InRange(
        context: context,
        ss: ss,
        view: view,
        limit: Parameters.General.BurnDownLimit)
            ? new ResponseCollection()
                .ViewMode(
                    context: context,
                    ss: ss,
                    view: view,
                    invoke: "drawBurnDown",
                    body: new HtmlBuilder()
                        .BurnDown(
                            context: context,
                            ss: ss,
                            dataRows: BurnDownDataRows(
                                context: context,
                                ss: ss,
                                view: view),
                            ownerLabelText: ss.GetColumn(
                                context: context,
                                columnName: "Owner").GridLabelText,
                            column: ss.GetColumn(
                                context: context,
                                columnName: "WorkValue")))
                .Events("on_burndown_load")
                .ToJson()
            : new ResponseCollection()
                .ViewMode(
                    context: context,
                    ss: ss,
                    view: view,
                    message: Messages.TooManyCases(
                        context: context,
                        data: Parameters.General.BurnDownLimit.ToString()),
                    body: new HtmlBuilder())
                .Events("on_burndown_load")
                .ToJson();
}

public static string BurnDownRecordDetails(Context context, SiteSettings ss)
{
    var date = context.Forms.DateTime("BurnDownDate");
    return new ResponseCollection()
        .After(string.Empty, new HtmlBuilder().BurnDownRecordDetails(
            context: context,
            elements: new Libraries.ViewModes.BurnDown(
                context: context,
                ss: ss,
                dataRows: BurnDownDataRows(
                    context: context,
                    ss: ss,
                    view: Views.GetBySession(context: context, ss: ss)))
                        .Where(o => o.UpdatedTime == date),
            progressRateColumn: ss.GetColumn(
                context: context,
                columnName: "ProgressRate"),
            statusColumn: ss.GetColumn(
                context: context,
                columnName: "Status"),
            colspan: context.Forms.Int("BurnDownColspan"),
            unit: ss.GetColumn(
                context: context,
                columnName: "WorkValue").Unit)).ToJson();
}

private static EnumerableRowCollection<DataRow> BurnDownDataRows(
    Context context, SiteSettings ss, View view)
{
    var where = view.Where(
        context: context,
        ss: ss);
    var param = view.Param(
        context: context,
        ss: ss);
    var join = ss.Join(
        context: context,
        join: where);
    return Repository.ExecuteTable(
        context: context,
        statements: new SqlStatement[]
        {
            Rds.Select#TableName#(
                column: Rds.#TableName#TitleColumn(context: context, ss: ss)
                    .#ModelName#Id()
                    .Ver()
                    .Title()
                    .WorkValue()
                    .StartTime()
                    .CompletionTime()
                    .ProgressRate()
                    .Status()
                    .Updator()
                    .CreatedTime()
                    .UpdatedTime(),
                join: join,
                where: where,
                param: param),
            Rds.Select#TableName#(
                unionType: Sqls.UnionTypes.Union,
                tableType: Sqls.TableTypes.HistoryWithoutFlag,
                column: Rds.#TableName#TitleColumn(context: context, ss: ss)
                    .#ModelName#Id(_as: "Id")
                    .Ver()
                    .Title()
                    .WorkValue()
                    .StartTime()
                    .CompletionTime()
                    .ProgressRate()
                    .Status()
                    .Updator()
                    .CreatedTime()
                    .UpdatedTime(),
                join: join,
                where: Rds.#TableName#Where()
                    .#ModelName#Id_In(sub: Rds.Select#TableName#(
                        column: Rds.#TableName#Column().#ModelName#Id(),
                        where: where)),
                param: param,
                orderBy: Rds.#TableName#OrderBy()
                    .#ModelName#Id()
                    .Ver())
        }).AsEnumerable();
}