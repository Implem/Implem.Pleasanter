public static string ReplaceLineBy#ModelName#Model(
    this #ModelName#Model #modelName#Model,
    Context context,
    SiteSettings ss,
    string line,
    string itemTitle,
    bool checkColumnAccessControl = false)
{
    ss.IncludedColumns(line).ForEach(column =>
    {
        var allowed = checkColumnAccessControl == false
            || ss.ReadColumnAccessControls.Allowed(
                context: context,
                ss: ss,
                column: column,
                mine: #modelName#Model.Mine(context: context));
        switch (column.ColumnName)
        {
            case "Title":
                line = line.Replace("[Title]",
                    allowed
                        ? itemTitle
                        : string.Empty);
                break;

<!--Reminder_ColumnCases-->

            default:
                switch (Def.ExtendedColumnTypes.Get(column?.Name ?? string.Empty))
                {
                    case "Class":
                        line = line.Replace(
                            $"[{column.Name}]",
                            allowed
                                ? #modelName#Model.GetClass(column: column).ToExport(
                                    context: context,
                                    column: column)
                                : string.Empty);
                        break;
                    case "Num":
                        line = line.Replace(
                            $"[{column.Name}]",
                            allowed
                                ? #modelName#Model.GetNum(column: column).ToExport(
                                    context: context,
                                    column: column)
                                : string.Empty);
                        break;
                    case "Date":
                        line = line.Replace(
                            $"[{column.Name}]",
                            allowed
                                ? #modelName#Model.GetDate(column: column).ToExport(
                                    context: context,
                                    column: column)
                                : string.Empty);
                        break;
                    case "Description":
                        line = line.Replace(
                            $"[{column.Name}]",
                            allowed
                                ? #modelName#Model.GetDescription(column: column).ToExport(
                                    context: context,
                                    column: column)
                                : string.Empty);
                        break;
                    case "Check":
                        line = line.Replace(
                            $"[{column.Name}]",
                            allowed
                                ? #modelName#Model.GetCheck(column: column).ToExport(
                                    context: context,
                                    column: column)
                                : string.Empty);
                        break;
                }
                break;
        }
    });
    return line;
}