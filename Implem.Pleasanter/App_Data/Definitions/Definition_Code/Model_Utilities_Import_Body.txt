public static string Import(Context context, SiteModel siteModel)
{
    var updatableImport = context.Forms.Bool("UpdatableImport");
    var ss = siteModel.#TableName#SiteSettings(
        context: context,
        referenceId: siteModel.SiteId,
        setAllChoices: true);
    var invalid = #ModelName#Validators.OnImporting(
        context: context,
        ss: ss);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return invalid.MessageJson(context: context);
    }
    var idInTitle = ss.TitleColumns?.Contains("#ModelName#Id") == true;
    var res = new ResponseCollection(context: context);
    Csv csv;
    try
    {
        csv = new Csv(
            csv: context.PostedFiles.FirstOrDefault().Byte(),
            encoding: context.Forms.Data("Encoding"));
    }
    catch
    {
        return Messages.ResponseFailedReadFile(context: context).ToJson();
    }
    var count = csv.Rows.Count();
    if (Parameters.General.ImportMax > 0 && Parameters.General.ImportMax < count)
    {
        return Error.Types.ImportMax.MessageJson(
            context: context,
            data: Parameters.General.ImportMax.ToString());
    }
    if (context.ContractSettings.ItemsLimit(
        context: context,
        siteId: ss.SiteId,
        number: count))
    {
        return Error.Types.ItemsLimit.MessageJson(context: context);
    }
    if (csv != null && count > 0)
    {
        var columnHash = ImportUtilities.GetColumnHash(ss, csv);
        var idColumn = columnHash
            .Where(o => o.Value.Column.ColumnName == "#ModelName#Id")
            .Select(o => new { Id = o.Key })
            .FirstOrDefault()?.Id ?? -1;
        if (updatableImport && idColumn > -1)
        {
            var exists = ExistsLockedRecord(
                context: context,
                ss: ss,
                targets: csv.Rows.Select(o => o[idColumn].ToLong()).ToList());
            switch (exists.Type)
            {
                case Error.Types.None: break;
                default: return exists.MessageJson(context: context);
            }
        }
        var invalidColumn = Imports.ColumnValidate(context, ss, columnHash.Values.Select(o => o.Column.ColumnName)<!--Model_Utilities_ImportValidatorHeaders-->);
        if (invalidColumn != null) return invalidColumn;
        Repository.ExecuteNonQuery(
            context: context,
            transactional: true,
            statements: new List<SqlStatement>()
                .OnImportingExtendedSqls(
                    context: context,
                    siteId: ss.SiteId)
                        .ToArray());
        var #modelName#Hash = new Dictionary<int, #ModelName#Model>();
        var previousTitle = string.Empty;
        var importKeyColumnName = context.Forms.Data("Key");
        var importKeyColumn = columnHash
            .FirstOrDefault(column => column.Value.Column.ColumnName == importKeyColumnName);
        if (updatableImport && importKeyColumn.Value == null)
        {
            return Messages.ResponseNotContainKeyColumn(context: context).ToJson();
        }
        var csvRows = csv.Rows
            .Select((o, i) => new { Index = i, Row = o })
            .ToDictionary(o => o.Index, o => o.Row);
        foreach (var data in csvRows)
        {
            var #modelName#Model = new #ModelName#Model(
                context: context,
                ss: ss);
            if (updatableImport
                && !data.Value[importKeyColumn.Key].IsNullOrEmpty())
            {
                var view = new View();
                view.AddColumnFilterHash(
                    context: context,
                    ss: ss,
                    column: importKeyColumn.Value.Column,
                    objectValue: data.Value[importKeyColumn.Key]);
                view.AddColumnFilterSearchTypes(
                    columnName: importKeyColumnName,
                    searchType: Column.SearchTypes.ExactMatch);
                var model = new #ModelName#Model(
                    context: context,
                    ss: ss,
                    #modelName#Id: 0,
                    view: view);
                if (model.AccessStatus == Databases.AccessStatuses.Selected)
                {
                    #modelName#Model = model;
                }
                else if(model.AccessStatus == Databases.AccessStatuses.Overlap)
                {
                    return new ErrorData(
                        type: Error.Types.OverlapCsvImport,
                        data: new string[] {
                            (data.Key + 1).ToString(),
                            importKeyColumn.Value.Column.GridLabelText,
                            data.Value[importKeyColumn.Key]
                        })
                        .MessageJson(context: context);
                }
            }
            previousTitle = #modelName#Model.Title.DisplayValue;
            #modelName#Model.SetByCsvRow(
                context: context,
                ss: ss,
                columnHash: columnHash,
                row: data.Value);
            #modelName#Hash.Add(data.Key, #modelName#Model);
        }

<!--Model_Utilities_ImportValidatorCases-->
<!--Model_Utilities_InputValidator-->

        var insertCount = 0;
        var updateCount = 0;
        var processed = new HashSet<long>();
        foreach (var data in #modelName#Hash)
        {
            var #modelName#Model = data.Value;
            #modelName#Model.SetBySettings(
                context: context,
                ss: ss);
            #modelName#Model.SetByFormula(
                context: context,
                ss: ss);
            #modelName#Model.SetTitle(
                context: context,
                ss: ss);
            if (#modelName#Model.AccessStatus == Databases.AccessStatuses.Selected)
            {
                if (#modelName#Model.Updated(context: context))
                {
                    if (processed.Contains(#modelName#Model.#ModelName#Id))
                    {
                        #modelName#Model.Get(
                            context: context,
                            ss: ss);
                        #modelName#Model.SetByCsvRow(
                            context: context,
                            ss: ss,
                            columnHash: columnHash,
                            row: csvRows[data.Key]);
                    }
                    else
                    {
                        processed.Add(#modelName#Model.#ModelName#Id);
                    }
                    #modelName#Model.VerUp = Versions.MustVerUp(
                        context: context,
                        ss: ss,
                        baseModel: #modelName#Model);
                    var errorData = #modelName#Model.Update(
                        context: context,
                        ss: ss,
                        extendedSqls: false,
                        previousTitle: previousTitle,
                        get: false,
                        checkConflict: false);
                    switch (errorData.Type)
                    {
                        case Error.Types.None:
                            break;

<!--Model_Utilities_DuplicatedMessage (Indent = 8) -->

                        default:
                            return errorData.MessageJson(context: context);
                    }
                    updateCount++;
                }
            }
            else
            {
                var errorData = #modelName#Model.Create(
                    context: context,
                    ss: ss,
                    extendedSqls: false);
                switch (errorData.Type)
                {
                    case Error.Types.None:
                        if (idInTitle)
                        {
                            #modelName#Model.Update(
                                context: context,
                                ss: ss,
                                extendedSqls: false,
                                previousTitle: previousTitle,
                                get: false);
                        }
                        break;

<!--Model_Utilities_DuplicatedMessage (Indent = 7) -->

                    default:
                        return errorData.MessageJson(context: context);
                }
                insertCount++;
            }
        }
        Repository.ExecuteNonQuery(
            context: context,
            transactional: true,
            statements: new List<SqlStatement>()
                .OnImportedExtendedSqls(
                    context: context,
                    siteId: ss.SiteId)
                        .ToArray());
        ss.Notifications.ForEach(notification =>
        {
            var body = new System.Text.StringBuilder();
            body.Append(Locations.ItemIndexAbsoluteUri(
                context: context,
                ss.SiteId) + "\n");
            body.Append(
                $"{Displays.#TableName#_Updator(context: context)}: ",
                $"{context.User.Name}\n");
            if (notification.AfterImport != false)
            {
                notification.Send(
                    context: context,
                    ss: ss,
                    title: Displays.Imported(
                        context: context,
                        data: new string[]
                        {
                            ss.Title,
                            insertCount.ToString(),
                            updateCount.ToString()
                        }),
                    body: body.ToString());
            }
        });
        return GridRows(
            context: context,
            ss: ss,
            res: res.WindowScrollTop(),
            message: Messages.Imported(
                context: context,
                data: new string[]
                {
                    ss.Title,
                    insertCount.ToString(),
                    updateCount.ToString()
                }));
    }
    else
    {
        return Messages.ResponseFileNotFound(context: context).ToJson();
    }
}