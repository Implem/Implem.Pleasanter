using Implem.DefinitionAccessor;
using Implem.DisplayAccessor;
using Implem.Libraries.Utilities;
using Implem.ParameterAccessor.Parts;
using Implem.Pleasanter.Libraries.Requests;
using System.Collections.Generic;
using System.Linq;
namespace Implem.Pleasanter.Libraries.Responses
{
    public static class Displays
    {
        public static Dictionary<string, string> DisplayHash = GetDisplayHash();

        private static Dictionary<string, string> GetDisplayHash()
        {
            var data = new Dictionary<string, string>();
            DisplayAccessor.Displays.DisplayHash.ForEach(display =>
                display.Value.Languages.ForEach(element =>
                    data.Add(
                        display.Key + (!element.Language.IsNullOrEmpty()
                            ? "_" + element.Language
                            : string.Empty),
                        element.Body)));
            Def.ColumnDefinitionCollection
                .Where(o => !o.ExtendedColumnType.IsNullOrEmpty())
                .ForEach(columnDefinition =>
                {
                    data.AddIfNotConainsKey(
                        columnDefinition.Id,
                        columnDefinition.ColumnName);
                    data.AddIfNotConainsKey(
                        columnDefinition.Id + "_ja",
                        columnDefinition.LabelText);
                });
            return data;
        }

        public static string Get(Context context, string id, params string[] data)
        {
            return Get(
                id: id,
                language: context.Language,
                data: data);
        }

        public static string Get(string id, string language, params string[] data)
        {
            var screen = id;
            var kay = id + "_" + language;
            if (DisplayHash.ContainsKey(kay))
            {
                screen = DisplayHash[kay];
            }
            else if (DisplayHash.ContainsKey(id))
            {
                screen = DisplayHash[id];
            }
            return data?.Any() == true
                ? screen.Params(data)
                : screen;
        }

        public static string Display(this PasswordPolicy policy, Context context)
        {
            return policy.Languages.FirstOrDefault(o => o.Language == context.Language)?.Body
                ?? policy.Languages.FirstOrDefault(o => o.Language.IsNullOrEmpty())?.Body
                ?? policy.Languages.FirstOrDefault()?.Body;
        }

        public static string Display(this List<DisplayElement> languages, Context context)
        {
            return languages?.FirstOrDefault(o => o.Language == context.Language)?.Body
                ?? languages?.FirstOrDefault(o => o.Language.IsNullOrEmpty())?.Body
                ?? languages?.FirstOrDefault()?.Body;
        }

        public static string Display(this Dictionary<string, List<DisplayElement>> languages, Context context, string id)
        {
            return languages?.Get(id)?.Display(context: context);
        }

<!--Displays_Parts-->

    }
}