public static string TimeSeries(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "TimeSeries"))
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.HasNotPermission));
    }
    var hb = new HtmlBuilder();
    var view = Views.GetBySession(context: context, ss: ss);
    var viewMode = ViewModes.GetSessionData(
        context: context,
        siteId: ss.SiteId);
    var inRange = InRange(
        context: context,
        ss: ss,
        view: view,
        limit: Parameters.General.TimeSeriesLimit);
    if (!inRange)
    {
        SessionUtilities.Set(
            context: context,
            message: Messages.TooManyCases(
                context: context,
                data: Parameters.General.TimeSeriesLimit.ToString()));
    }
    var serverScriptModelRow = ss.GetServerScriptModelRow(
        context: context,
        view: view);
    return hb.ViewModeTemplate(
        context: context,
        ss: ss,
        view: view,
        viewMode: viewMode,
        serverScriptModelRow: serverScriptModelRow,
        viewModeBody: () => hb
            .TimeSeries(
                context: context,
                ss: ss,
                view: view,
                bodyOnly: false,
                inRange: inRange));
}

public static string TimeSeriesJson(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "TimeSeries"))
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
    var view = Views.GetBySession(context: context, ss: ss);
    var bodyOnly = context.Forms.ControlId().StartsWith("TimeSeries");
    return InRange(
        context: context,
        ss: ss,
        view: view,
        limit: Parameters.General.TimeSeriesLimit)
            ? new ResponseCollection()
                .ViewMode(
                    context: context,
                    ss: ss,
                    view: view,
                    invoke: "drawTimeSeries",
                    bodyOnly: bodyOnly,
                    bodySelector: "#TimeSeriesBody",
                    body: new HtmlBuilder()
                        .TimeSeries(
                            context: context,
                            ss: ss,
                            view: view,
                            bodyOnly: bodyOnly,
                            inRange: true))
                .Events("on_timeseries_load")
                .ToJson()
            : new ResponseCollection()
                .ViewMode(
                    context: context,
                    ss: ss,
                    view: view,
                    message: Messages.TooManyCases(
                        context: context,
                        data: Parameters.General.TimeSeriesLimit.ToString()),
                    bodyOnly: bodyOnly,
                    bodySelector: "#TimeSeriesBody",
                    body: new HtmlBuilder()
                        .TimeSeries(
                            context: context,
                            ss: ss,
                            view: view,
                            bodyOnly: bodyOnly,
                            inRange: false))
                .Events("on_timeseries_load")
                .ToJson();
}

private static HtmlBuilder TimeSeries(
    this HtmlBuilder hb,
    Context context,
    SiteSettings ss,
    View view,
    bool bodyOnly,
    bool inRange)
{
    var groupBy = ss.GetColumn(
        context: context,
        columnName: view.GetTimeSeriesGroupBy(
            context: context,
            ss: ss));
    var aggregationType = view.GetTimeSeriesAggregationType(
        context: context,
        ss: ss);
    var value = ss.GetColumn(
        context: context,
        columnName: view.GetTimeSeriesValue(
            context: context,
            ss: ss));
    var dataRows = TimeSeriesDataRows(
        context: context,
        ss: ss,
        view: view,
        groupBy: groupBy,
        value: value);
    if (groupBy == null)
    {
        return hb;
    }
    return !bodyOnly
        ? hb.TimeSeries(
            context: context,
            ss: ss,
            groupBy: groupBy,
            aggregationType: aggregationType,
            value: value,
            dataRows: dataRows,
            inRange: inRange)
        : hb.TimeSeriesBody(
            context: context,
            ss: ss,
            groupBy: groupBy,
            aggregationType: aggregationType,
            value: value,
            dataRows: dataRows,
            inRange: inRange);
}

private static EnumerableRowCollection<DataRow> TimeSeriesDataRows(
    Context context, SiteSettings ss, View view, Column groupBy, Column value)
{
    if (groupBy != null && value != null)
    {
        var column = Rds.#TableName#Column()
            .#ModelName#Id(_as: "Id")
            .Ver()
            .UpdatedTime()
            .Add(
                context: context,
                column: groupBy)
            .Add(
                context: context,
                column: value);
        var where = view.Where(
            context: context,
            ss: ss);
        var param = view.Param(
            context: context,
            ss: ss);
        var join = ss.Join(
            context: context,
            join: new IJoin[]
            {
                column,
                where
            });
        var dataRows = Repository.ExecuteTable(
            context: context,
            statements: Rds.Select#TableName#(
                tableType: Sqls.TableTypes.NormalAndHistory,
                column: column,
                join: join,
                where: Rds.#TableName#Where()
                    .#ModelName#Id_In(sub: Rds.Select#TableName#(
                        column: Rds.#TableName#Column().#ModelName#Id(),
                        join: join,
                        where: where)),
                param: param))
                    .AsEnumerable();
        ss.SetChoiceHash(
            context: context,
            dataRows: dataRows);
        return dataRows;
    }
    else
    {
        return null;
    }
}