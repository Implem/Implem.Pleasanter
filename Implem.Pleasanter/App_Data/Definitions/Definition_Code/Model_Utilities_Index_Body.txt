public static string Index(Context context, SiteSettings ss)
{
    var hb = new HtmlBuilder();

<!--Model_Utilities_View-->
<!--Model_Utilities_DashboardView-->

    var gridData = GetGridData(
        context: context,
        ss: ss,
        view: view);
    var viewMode = ViewModes.GetSessionData(
        context: context,
        siteId: ss.SiteId);
    var serverScriptModelRow = ss.GetServerScriptModelRow(
        context: context,
        view: view,
        gridData: gridData);
    
<!--Model_Utilities_DashboardSuffix-->
<!--Model_Utilities_Return-->
<!--Model_Utilities_DashboardReturn-->

}

private static string ViewModeTemplate(
    this HtmlBuilder hb,
    Context context,
    SiteSettings ss,
    View view,
    string viewMode,
    ServerScriptModelRow serverScriptModelRow,
    Action viewModeBody)
{
    var invalid = #ModelName#Validators.OnEntry(
        context: context,
        ss: ss);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return HtmlTemplates.Error(
            context: context,
            errorData: invalid);
    }
    return hb.Template(
        context: context,
        ss: ss,
        view: view,
        siteId: ss.SiteId,
        parentId: ss.ParentId,
        referenceType: "#TableName#",

<!--Model_Utilities_UseTitle-->
<!--Model_Utilities_TemplateTitle-->

        script: JavaScripts.ViewMode(viewMode),
        userScript: ss.ViewModeScripts(context: context),
        userStyle: ss.ViewModeStyles(context: context),
        serverScriptModelRow: serverScriptModelRow,
        action: () => hb
            .Form(
                attributes: new HtmlAttributes()
                    .Id("MainForm")
                    .Class("main-form")
                    .Action(Locations.Action(
                        context: context,
                        controller: context.Controller,
                        id: ss.SiteId)),
                action: () => hb

<!--Model_Utilities_ViewSelectorField-->
<!--Model_Utilities_ViewSelectorFieldWithShowHistory-->

                    .ViewFilters(
                        context: context,
                        ss: ss,
                        view: view)
                    .Aggregations(
                        context: context,
                        ss: ss,
                        view: view)
                    .ViewExtensions(
                        context: context,
                        ss: ss,
                        view: view)
                    .Div(id: "ViewModeContainer", action: () => viewModeBody())
                    .MainCommands(
                        context: context,
                        ss: ss,
                        view: view,
                        verType: Versions.VerTypes.Latest,
                        backButton: !context.Publish,
                        serverScriptModelRow: serverScriptModelRow)
                    .Div(css: "margin-bottom")
                    .Hidden(
                        controlId: "BaseUrl",
                        value: Locations.BaseUrl(context: context))
                    .Hidden(
                        controlId: "EditOnGrid",
                        css: "always-send",
                        value: context.Forms.Data("EditOnGrid"))
                    .Hidden(
                        controlId: "NewRowId",
                        css: "always-send",
                        value: context.Forms.Data("NewRowId")))

<!--Model_Utilities_EditorDialog-->
<!--Model_Utilities_DropDownSearchDialog-->

            .MoveDialog(context: context, bulk: true)

<!--Model_Utilities_ImportSettings-->
<!--Model_Utilities_SetNumericRangeDialog-->
<!--Model_Utilities_SetDateRangeDialog-->

            .Div(attributes: new HtmlAttributes()
                .Id("ExportSelectorDialog")
                .Class("dialog")
                .Title(Displays.Export(context: context)))
            .Div(attributes: new HtmlAttributes()
                .Id("ExportSitePackageDialog")
                .Class("dialog")
                .Title(Displays.ExportSitePackage(context: context)))
            .Div(attributes: new HtmlAttributes()
                .Id("BulkUpdateSelectorDialog")
                .Class("dialog")
                .Title(Displays.BulkUpdate(context: context)))
            .Div(attributes: new HtmlAttributes()
                .Id("AnalyPartDialog")
                .Class("dialog")
                .Title(Displays.AnalyPart(context: context))))
            .ToString();
}

public static string IndexJson(Context context, SiteSettings ss)
{
    var view = Views.GetBySession(
        context: context,
        ss: ss);
    var gridData = GetGridData(
        context: context,
        ss: ss,
        view: view);
    var serverScriptModelRow = ss.GetServerScriptModelRow(
        context: context,
        view: view,
        gridData: gridData);
    var body = new HtmlBuilder().Grid(
        context: context,
        ss: ss,
        gridData: gridData,
        view: view,
        serverScriptModelRow: serverScriptModelRow);
    return new ResponseCollection(context: context)
        .ViewMode(
            context: context,
            ss: ss,
            view: view,
            invoke: "setGrid",
            editOnGrid: context.Forms.Bool("EditOnGrid"),
            serverScriptModelRow: serverScriptModelRow,
            body: body)
        .Events("on_grid_load")
        .ToJson();
}

private static GridData GetGridData(
    Context context, SiteSettings ss, View view, int offset = 0)
{
    return new GridData(
        context: context,
        ss: ss,
        view: view,

<!--Model_Utilities_WhereTenantId-->

        offset: offset,
        pageSize: ss.GridPageSize.ToInt());
}

private static HtmlBuilder Grid(
    this HtmlBuilder hb,
    Context context,
    SiteSettings ss,
    GridData gridData,
    View view,
    string action = "GridRows",
    ServerScriptModelRow serverScriptModelRow = null,
    string suffix = "")
{
    var columns = ss.GetGridColumns(
        context: context,
        view: view,
        checkPermission: true);
    return hb
        .GridTable(
            attributes: new HtmlAttributes()
                .Id($"Grid{suffix}")
                .Class(ss.GridCss(context: context))
                .DataValue("back", _using: ss?.IntegratedSites?.Any() == true)
                .DataAction(action)
                .DataMethod("post"),
            action: () => hb
                .GridRows(
                    context: context,
                    ss: ss,
                    gridData: gridData,
                    columns: columns,
                    view: view,

<!--Model_Utilities_SetEditRowParameterByContext-->

                    serverScriptModelRow: serverScriptModelRow,
                    action: action,
                    suffix: suffix))
        .GridHeaderMenus(
            context: context,
            ss: ss,
            view: view,
            columns: columns,
            suffix: suffix)
        .Hidden(
            controlId: $"GridOffset{suffix}",
            value: ss.GridNextOffset(
                0,
                gridData.DataRows.Count(),
                gridData.TotalCount)
                    .ToString())
        .Hidden(
            controlId: "GridRowIds",
            value: gridData.DataRows.Select(g => g.Long("#ModelName#Id")).ToJson())
        .Hidden(
            controlId: "GridColumns",
            value: columns.Select(o => o.ColumnName).ToJson())
        .Button(
            controlId: "ViewSorters_Reset",
            controlCss: "hidden",
            action: action,
            method: "post");
}

public static string GridRows(
    Context context,
    SiteSettings ss,
    int offset = 0,
    bool windowScrollTop = false,
    bool clearCheck = false,
    string action = "GridRows",
    Message message = null,
    string suffix = "")
{

<!--Model_Utilities_View-->
<!--Model_Utilities_DashboardView-->

    GridData gridData = null;
    try
    {
        gridData = GetGridData(
            context: context,
            ss: ss,
            view: view,
            offset: offset);
    }
    catch (Implem.Libraries.Exceptions.CanNotGridSortException)
    {
        return new ResponseCollection(context: context)
            .Message(context.Messages.Last())
            .Log(context.GetLog())
            .ToJson();
    }

<!--Model_Utilities_GetServerScriptModelRow-->

    var columns = ss.GetGridColumns(
        context: context,
        view: view,
        checkPermission: true);

<!--Model_Utilities_GridNewRowParameters-->
<!--Model_Utilities_GridRowsReturn-->
<!--Model_Utilities_DashboardGridRowsReturn-->

}

private static HtmlBuilder GridRows(
    this HtmlBuilder hb,
    Context context,
    SiteSettings ss,
    GridData gridData,
    List<Column> columns,
    View view,

<!--Model_Utilities_NewRowParameters-->

    int offset = 0,
    bool clearCheck = false,
    string action = "GridRows",
    ServerScriptModelRow serverScriptModelRow = null,
    string suffix = "")
{

<!--Model_Utilities_CheckRow-->
<!--Model_Utilities_DashboardCheckRow-->

    var checkAll = clearCheck
        ? false
        : context.Forms.Bool("GridCheckAll");

<!--Model_Utilities_GetFormDataSet-->

    return hb
        .THead(
<!--Model_Utilities_DashboardHeaderCss-->
            _using: offset == 0,
            action: () => hb
                .GridHeader(
                    context: context,
                    ss: ss,
                    columns: columns,
                    view: view,

<!--Model_Utilities_Index_NoSort-->
<!--Model_Utilities_SetEditRowParameter (Indent = 7) -->

                    checkRow: checkRow,
                    checkAll: checkAll,
                    action: action,
                    serverScriptModelRow: serverScriptModelRow,
                    suffix: suffix))
        .TBody(action: () => hb

<!--Model_Utilities_ExecGridNewRows-->

            .GridRows(
                context: context,
                ss: ss,
                view: view,
                dataRows: gridData.DataRows,
                columns: columns,

<!--Model_Utilities_FormDataSet-->
<!--Model_Utilities_SetEditRowParameter-->

                checkRow: checkRow,
                clearCheck: clearCheck));
}

<!--Model_Utilities_GridNewRows-->
<!--Model_Utilities_GridCopyRowFormData-->

private static SqlWhereCollection SelectedWhere(
    Context context,
    SiteSettings ss)
{
    var selector = new RecordSelector(context: context);
    return !selector.Nothing
        ? Rds.#TableName#Where().#ModelName#Id_In(
            value: selector.Selected.Select(o => o#CastIdType#),
            negative: selector.All)
        : null;
}

private static SqlWhereCollection SelectedWhereByApi(
    SiteSettings ss,
    RecordSelector recordSelector)
{
    return !recordSelector.Nothing
        ? Rds.#TableName#Where().#ModelName#Id_In(
            value: recordSelector.Selected?.Select(o => o#CastIdType#) ?? new List<#IdType#>(),
            negative: recordSelector.All)
        : null;
}

public static string ReloadRow(Context context, SiteSettings ss, long #modelName#Id)
{
    var view = Views.GetBySession(
        context: context,
        ss: ss);
    var dataRow = new GridData(
        context: context,
        ss: ss,
        view: view,
        tableType: Sqls.TableTypes.Normal,
        where: Rds.#TableName#Where().#ModelName#Id(#modelName#Id))
            .DataRows
            .FirstOrDefault();
    var res = ItemUtilities.ClearItemDataResponse(
        context: context,
        ss: ss,
        id: #modelName#Id);
    return dataRow == null
        ? res
            .Remove($"[data-id=\"{#modelName#Id}\"][data-latest]")
            .Message(
                message: Messages.NotFound(context: context),
                target: "row_" + #modelName#Id)
            .Messages(context.Messages)
            .ToJson()
        : res
            .ReplaceAll(
                $"[data-id=\"{dataRow.Long("#ModelName#Id")}\"][data-latest]",
                new HtmlBuilder().Tr(
                    context: context,
                    ss: ss,
                    view: view,
                    dataRow: dataRow,
                    columns: ss.GetGridColumns(
                        context: context,
                        view: view,
                        checkPermission: true),
                    recordSelector: null,
                    editRow: true,
                    checkRow: false,
                    idColumn: "#ModelName#Id"))
            .Messages(context.Messages)
            .ToJson();
}