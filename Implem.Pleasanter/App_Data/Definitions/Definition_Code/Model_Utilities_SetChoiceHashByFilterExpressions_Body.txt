public static void SetChoiceHashByFilterExpressions(
    Context context,
    SiteSettings ss,
    Column column,
    #ModelName#Model #modelName#Model,
    string searchText = null,
    int offset = 0,
    bool search = false,
    bool searchFormat = false)
{
    var link = ss.ColumnFilterExpressionsLink(
        context: context,
        column: column);
    if (link != null)
    {
        var view = link.View;
        var targetSs = ss.GetLinkedSiteSettings(
            context: context,
            link: link);
        if (targetSs != null)
        {
            if (view.ColumnFilterHash == null)
            {
                view.ColumnFilterHash = new Dictionary<string, string>();
            }
            view.ColumnFilterExpressions.ForEach(data =>
            {
                var columnName = data.Key;
                var targetColumn = targetSs?.GetFilterExpressionsColumn(
                    context: context,
                    link: link,
                    columnName: columnName);
                if (targetColumn != null)
                {
                    var expression = data.Value;
                    var raw = expression.StartsWith("=");
                    var hash = new Dictionary<string, Column>();
                    ss.IncludedColumns(value: data.Value).ForEach(includedColumn =>
                    {
                        var guid = Strings.NewGuid();
                        expression = expression.Replace(
                            $"[{includedColumn.ExpressionColumnName()}]",
                            guid);
                        hash.Add(guid, includedColumn);
                    });
                    hash.ForEach(hashData =>
                    {
                        var guid = hashData.Key;
                        var includedColumn = hashData.Value;
                        expression = expression.Replace(
                            guid,
                            includedColumn.OutputType == Column.OutputTypes.DisplayValue
                                ? #modelName#Model.ToDisplay(
                                    context: context,
                                    ss: ss,
                                    column: includedColumn,
                                    mine: #modelName#Model.Mine(context: context))
                                : #modelName#Model.ToValue(
                                    context: context,
                                    ss: ss,
                                    column: includedColumn,
                                    mine: #modelName#Model.Mine(context: context)));
                    });
                    view.SetColumnFilterHashByExpression(
                        ss: targetSs,
                        targetColumn: targetColumn,
                        columnName: columnName,
                        expression: expression,
                        raw: raw);
                }
            });
            column.SetChoiceHash(
                context: context,
                ss: ss,
                link: link,
                searchText: searchText,
                offset: offset,
                search: search,
                searchFormat: searchFormat,
                setChoices: true);
        }
    }
}