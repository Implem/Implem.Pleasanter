public static string OpenAnalyPartDialog(Context context, SiteSettings ss)
{
    if (context.ContractSettings.Export == false)
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.InvalidRequest));
    }
    var invalid = #ModelName#Validators.OnExporting(
        context: context,
        ss: ss);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return invalid.MessageJson(context: context);
    }
    return new ResponseCollection(context: context)
        .Html(
            "#AnalyPartDialog",
            new HtmlBuilder().AnalyPartDialog(
                context: context,
                ss: ss))
        .CloseDialog()
        .ToJson();
}

public static string Analy(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "TimeSeries"))
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.HasNotPermission));
    }
    var hb = new HtmlBuilder();
    var view = Views.GetBySession(context: context, ss: ss);
    var horizontalAxis = view.GetTimeSeriesHorizontalAxis(
        context: context,
        ss: ss);
    if (horizontalAxis == null)
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.BadRequest));
    }
    var viewMode = ViewModes.GetSessionData(
        context: context,
        siteId: ss.SiteId);
    var inRange = InRange(
        context: context,
        ss: ss,
        view: view,
        limit: Parameters.General.TimeSeriesLimit);
    if (!inRange)
    {
        SessionUtilities.Set(
            context: context,
            message: Messages.TooManyCases(
                context: context,
                data: Parameters.General.TimeSeriesLimit.ToString()));
    }
    var serverScriptModelRow = ss.GetServerScriptModelRow(
        context: context,
        view: view);
    return hb.ViewModeTemplate(
        context: context,
        ss: ss,
        view: view,
        viewMode: viewMode,
        serverScriptModelRow: serverScriptModelRow,
        viewModeBody: () => hb
            .Analy(
                context: context,
                ss: ss,
                view: view,
                horizontalAxis: horizontalAxis,
                bodyOnly: false,
                inRange: inRange));
}

public static string AnalyJson(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "TimeSeries"))
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
    var view = Views.GetBySession(context: context, ss: ss);
    var horizontalAxis = view.GetTimeSeriesHorizontalAxis(
        context: context,
        ss: ss);
    if (horizontalAxis == null)
    {
        return Messages.ResponseBadRequest(context: context).ToJson();
    }
    var bodyOnly = context.Forms.ControlId().StartsWith("TimeSeries");
    if (InRange(
        context: context,
        ss: ss,
        view: view,
        limit: Parameters.General.TimeSeriesLimit))
    {
        var body = new HtmlBuilder().Analy(
            context: context,
            ss: ss,
            view: view,
            horizontalAxis: horizontalAxis,
            bodyOnly: bodyOnly,
            inRange: true);
        return new ResponseCollection(context: context)
            .ViewMode(
                context: context,
                ss: ss,
                view: view,
                invoke: "drawTimeSeries",
                bodyOnly: bodyOnly,
                bodySelector: "#TimeSeriesBody",
                body: body)
            .Events("on_timeseries_load")
            .CloseDialog(_using: context.Forms.ControlId() == "AddAnalyPart")
            .ToJson();
    }
    else
    {
        var body = new HtmlBuilder().Analy(
            context: context,
            ss: ss,
            view: view,
            horizontalAxis: horizontalAxis,
            bodyOnly: bodyOnly,
            inRange: false);
        return new ResponseCollection(context: context)
            .ViewMode(
                context: context,
                ss: ss,
                view: view,
                message: Messages.TooManyCases(
                    context: context,
                    data: Parameters.General.TimeSeriesLimit.ToString()),
                bodyOnly: bodyOnly,
                bodySelector: "#TimeSeriesBody",
                body: body)
            .Events("on_timeseries_load")
            .CloseDialog(_using: context.Forms.ControlId() == "AddAnalyPart")
            .ToJson();
    }
}

private static HtmlBuilder Analy(
    this HtmlBuilder hb,
    Context context,
    SiteSettings ss,
    View view,
    string horizontalAxis,
    bool bodyOnly,
    bool inRange)
{
    var dataRowsSet = new List<EnumerableRowCollection<DataRow>>();
    view.AnalyParts?.ForEach(analyPart =>
    {
        var groupBy = ss.GetColumn(
            context: context,
            columnName: view.GetAnalyGroupBy(
                context: context,
                ss: ss,
                value: analyPart.GroupBy));
        var aggregationTarget = ss.GetColumn(
            context: context,
            columnName: analyPart.AggregationTarget);
        var dataRows = AnalyDataRows(
            context: context,
            ss: ss,
            view: view,
            groupBy: groupBy,
            value: analyPart.Value,
            period: analyPart.Period,
            pastOrFuture: analyPart.PastOrFuture,
            aggregationTarget: aggregationTarget);
        dataRowsSet.Add(dataRows);
    });
    return !bodyOnly
        ? hb.Analy(
            context: context,
            ss: ss,
            dataRowsSet: dataRowsSet,
            inRange: inRange)
        : hb.AnalyBody(
            context: context,
            ss: ss,
            dataRowsSet: dataRowsSet,
            inRange: inRange);
}

private static EnumerableRowCollection<DataRow> AnalyDataRows(
    Context context,
    SiteSettings ss,
    View view,
    Column groupBy,
    decimal value,
    string period,
    int pastOrFuture,
    Column aggregationTarget)
{
    if (groupBy != null)
    {
        var column = Rds.#TableName#Column();
        column.#TableName#Column(
            columnName: groupBy.ColumnName,
            _as: "GroupBy");
        if (aggregationTarget != null)
        {
            column.#TableName#Column(
                columnName: aggregationTarget.ColumnName,
                _as: "Value");
        }
        else
        {
            column.#TableName#Count(_as: "Value");
        }
        var where = view.Where(
            context: context,
            ss: ss);
        var param = view.Param(
            context: context,
            ss: ss);
        var join = ss.Join(
            context: context,
            join: new IJoin[]
            {
                column,
                where
            });
        var dataRows = Repository.ExecuteTable(
            context: context,
            statements: Rds.Select#TableName#(
                tableType: (value != 0
                    ? Sqls.TableTypes.NormalAndHistory
                    : Sqls.TableTypes.Normal),
                column: column,
                join: join,
                where: new Rds.#TableName#WhereCollection()
                    .#ModelName#Id_In(sub: Rds.Select#TableName#(
                        column: Rds.#TableName#Column().#ModelName#Id(),
                        join: join,
                        where: where))
                    .Ver(
                        sub: Rds.Select#TableName#(
                            column: Rds.#TableName#Column().Ver(function: Sqls.Functions.Max),
                            join: join,
                            where: where,
                            groupBy: Rds.#TableName#GroupBy().#ModelName#Id()),
                        _using: value != 0),
                groupBy: Rds.#TableName#GroupBy().Add(groupBy),
                param: param))
                    .AsEnumerable();
        ss.SetChoiceHash(
            context: context,
            dataRows: dataRows);
        return dataRows;
    }
    else
    {
        return null;
    }
}