public static string OpenAnalyPartDialog(Context context, SiteSettings ss)
{
    if (context.ContractSettings.Export == false)
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.InvalidRequest));
    }
    var invalid = #ModelName#Validators.OnExporting(
        context: context,
        ss: ss);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return invalid.MessageJson(context: context);
    }
    var view = Views.GetBySession(
        context: context,
        ss: ss);
    return new ResponseCollection(context: context)
        .Html(
            "#AnalyPartDialog",
            new HtmlBuilder().AnalyPartDialog(
                context: context,
                ss: ss,
                view: view,
                analyPartId: context.Forms.Int("AnalyPartId")))
        .CloseDialog()
        .ToJson();
}

public static string Analy(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(
        context: context,
        name: "Analy"))
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.HasNotPermission));
    }
    var hb = new HtmlBuilder();
    var view = Views.GetBySession(
        context: context,
        ss: ss);
    var viewMode = ViewModes.GetSessionData(
        context: context,
        siteId: ss.SiteId);
    var serverScriptModelRow = ss.GetServerScriptModelRow(
        context: context,
        view: view);
    return hb.ViewModeTemplate(
        context: context,
        ss: ss,
        view: view,
        viewMode: viewMode,
        serverScriptModelRow: serverScriptModelRow,
        viewModeBody: () => hb
            .Analy(
                context: context,
                ss: ss,
                view: view,
                bodyOnly: false,
                inRange: true));
}

public static string AnalyJson(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "Analy"))
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
    var view = Views.GetBySession(
        context: context,
        ss: ss);
    var bodyOnly = context.Forms.ControlId().StartsWith("Analy");
    var body = new HtmlBuilder().Analy(
        context: context,
        ss: ss,
        view: view,
        bodyOnly: bodyOnly,
        inRange: true);
    return new ResponseCollection(context: context)
        .ViewMode(
            context: context,
            ss: ss,
            view: view,
            invoke: "drawAnaly",
            bodyOnly: bodyOnly,
            bodySelector: "#AnalyBody",
            body: body)
        .Events("on_analy_load")
        .CloseDialog(_using: context.Forms.ControlId() == "AddAnalyPart")
        .ToJson();
}

private static HtmlBuilder Analy(
    this HtmlBuilder hb,
    Context context,
    SiteSettings ss,
    View view,
    bool bodyOnly,
    bool inRange)
{
    var analyDataList = new List<Libraries.ViewModes.AnalyData>();
    view.AnalyPartSettings?.ForEach(analyPart =>
    {
        var groupBy = ss.GetColumn(
            context: context,
            columnName: view.GetAnalyGroupBy(
                context: context,
                ss: ss,
                value: analyPart.GroupBy));
        var aggregationTarget = ss.GetColumn(
            context: context,
            columnName: analyPart.AggregationTarget);
        var analyData = AnalyDat(
            context: context,
            ss: ss,
            view: view,
            analyPartSetting: analyPart,
            groupBy: groupBy,
            timePeriodValue: analyPart.TimePeriodValue,
            timePeriod: analyPart.TimePeriod,
            aggregationTarget: aggregationTarget);
        analyDataList.Add(analyData);
    });
    return !bodyOnly
        ? hb.Analy(
            context: context,
            ss: ss,
            analyDataList: analyDataList,
            inRange: inRange)
        : hb.AnalyBody(
            context: context,
            ss: ss,
            analyDataList: analyDataList,
            inRange: inRange);
}

private static Libraries.ViewModes.AnalyData AnalyDat(
    Context context,
    SiteSettings ss,
    View view,
    AnalyPartSetting analyPartSetting,
    Column groupBy,
    decimal timePeriodValue,
    string timePeriod,
    Column aggregationTarget)
{
    if (groupBy != null)
    {
        var column = Rds.#TableName#Column()
            .#TableName#Column(
                columnName: Rds.IdColumn(tableName: "#TableName#"),
                _as: "Id")
            .#TableName#Column(columnName: "Ver")
            .#TableName#Column(
                columnName: groupBy.ColumnName,
                _as: "GroupBy");
        if (aggregationTarget != null)
        {
            column.#TableName#Column(
                columnName: aggregationTarget.ColumnName,
                _as: "Value");
        }
        var where = view.Where(
            context: context,
            ss: ss);
        if (timePeriodValue > 0)
        {
            where.#TableName#_UpdatedTime(
                value: DateTime.Now.DateAdd(
                    timePeriod: timePeriod,
                    timePeriodValue: (timePeriodValue * -1).ToInt()),
                _operator: "<=");
        }
        var param = view.Param(
            context: context,
            ss: ss);
        var join = ss.Join(
            context: context,
            join: new IJoin[]
            {
                column,
                where
            });
        var dataSet = Repository.ExecuteDataSet(
            context: context,
            statements: new SqlStatement[]
            {
                Rds.Select#TableName#(
                    dataTableName: "Normal",
                    column: column,
                    join: join,
                    where: new Rds.#TableName#WhereCollection()
                        .#ModelName#Id_In(sub: Rds.Select#TableName#(
                            column: Rds.#TableName#Column().#ModelName#Id(),
                            join: join,
                            where: where)),
                    param: param),
                Rds.Select#TableName#(
                    dataTableName: "History",
                    tableType: Sqls.TableTypes.History,
                    column: column,
                    join: join,
                    where: new Rds.#TableName#WhereCollection()
                        .#ModelName#Id_In(sub: Rds.Select#TableName#(
                            column: Rds.#TableName#Column().#ModelName#Id(),
                            join: join,
                            where: where))
                        .Ver(
                            sub: Rds.Select#TableName#(
                                tableType: Sqls.TableTypes.History,
                                _as: "b",
                                column: Rds.#TableName#Column().Ver(
                                    tableName: "b",
                                    function: Sqls.Functions.Max),
                                where: Rds.#TableName#Where().#ModelName#Id(
                                    tableName: "b",
                                    raw: "\"#TableName#\".\"#ModelName#Id\""),
                                groupBy: Rds.#TableName#GroupBy().#ModelName#Id(tableName: "b"))),
                    param: param,
                    _using: timePeriodValue > 0)
            });
        return new Libraries.ViewModes.AnalyData(
            analyPartSetting: analyPartSetting,
            dataSet: dataSet);
    }
    else
    {
        return null;
    }
}
