public static ContentResultInheritance UpsertByApi(
    Context context,
    SiteSettings ss,
    string previousTitle)
{
    if (!Mime.ValidateOnApi(contentType: context.ContentType))
    {
        return ApiResults.BadRequest(context: context);
    }
    var api = context.RequestDataString.Deserialize<Api>();
    var data = context.RequestDataString.Deserialize<#ModelName#ApiModel>();
    if (api?.Keys?.Any() != true || data == null)
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.InvalidJsonData));
    }
    var error = new ErrorData(Error.Types.None);
    api.View = api.View ?? new View();
    api.Keys.ForEach(columnName =>
    {
        if (error.Type != Error.Types.None) return;
        var objectValue = data.ObjectValue(columnName: columnName);
        if (objectValue != null)
        {
            var column = ss.GetColumn(
                context: context,
                columnName: columnName);
            if (column?.TypeName == "datetime"
                && objectValue.ToDateTime().InRange() == false)
            {
                error = new ErrorData(
                    type: Error.Types.invalidUpsertKey,
                    data: $"('{columnName}'='{objectValue.ToStr()}')");
                return;
            }
            api.View.AddColumnFilterHash(
                context: context,
                ss: ss,
                column: column,
                objectValue: objectValue);
            api.View.AddColumnFilterSearchTypes(
                columnName: columnName,
                searchType: Column.SearchTypes.ExactMatch);
        }
    });
    if (error.Type != Error.Types.None)
    {
        return ApiResults.Error(
            context: context,
            errorData: error);
    }
    var #modelName#ApiModel = context.RequestDataString.Deserialize<#ModelName#ApiModel>();
    if (#modelName#ApiModel == null)
    {
        context.InvalidJsonData = !context.RequestDataString.IsNullOrEmpty();
    }
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: 0,
        view: api.View,
        #modelName#ApiModel: #modelName#ApiModel);
    switch (#modelName#Model.AccessStatus)
    {
        case Databases.AccessStatuses.Selected:
            return UpdateByApi(
                context: context, 
                ss: ss, 
                #modelName#Id: #modelName#Model.#ModelName#Id, 
                previousTitle: #modelName#Model.Title.DisplayValue);
        case Databases.AccessStatuses.NotFound:
            return CreateByApi(context: context, ss: ss);
        case Databases.AccessStatuses.Overlap:
            return ApiResults.Get(ApiResponses.Overlap(context: context));
        default:
            return ApiResults.Get(ApiResponses.NotFound(context: context));
    }
}