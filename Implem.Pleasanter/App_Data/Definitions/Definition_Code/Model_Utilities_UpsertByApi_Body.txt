public static ContentResultInheritance UpsertByApi(
    Context context,
    SiteSettings ss,
    string previousTitle)
{
    if (!Mime.ValidateOnApi(contentType: context.ContentType))
    {
        return ApiResults.BadRequest(context: context);
    }
    var api = context.RequestDataString.Deserialize<Api>();
    var data = context.RequestDataString.Deserialize<#ModelName#ApiModel>();
    if (api?.Keys?.Any() != true || data == null)
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.InvalidJsonData));
    }
    api.View = api.View ?? new View();
    api.Keys.ForEach(columnName =>
    {
        var objectValue = data.ObjectValue(columnName: columnName);
        if (objectValue != null)
        {
            api.View.AddColumnFilterHash(
                context: context,
                ss: ss,
                column: ss.GetColumn(
                    context: context,
                    columnName: columnName),
                objectValue: objectValue);
            api.View.AddColumnFilterSearchTypes(
                columnName: columnName,
                searchType: Column.SearchTypes.ExactMatch);
        }
    });
    var #modelName#ApiModel = context.RequestDataString.Deserialize<#ModelName#ApiModel>();
    if (#modelName#ApiModel == null)
    {
        context.InvalidJsonData = !context.RequestDataString.IsNullOrEmpty();
    }
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: 0,
        view: api.View,
        #modelName#ApiModel: #modelName#ApiModel);
    switch (#modelName#Model.AccessStatus)
    {
        case Databases.AccessStatuses.Selected:
            break;
        case Databases.AccessStatuses.NotFound:
            return CreateByApi(context: context, ss: ss);
        case Databases.AccessStatuses.Overlap:
            return ApiResults.Get(ApiResponses.Overlap(context: context));
        default:
            return ApiResults.Get(ApiResponses.NotFound(context: context));
    }
    var invalid = #ModelName#Validators.OnUpdating(
        context: context,
        ss: ss,
        #modelName#Model: #modelName#Model,
        api: true,
        serverScript: true);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default:
            return ApiResults.Error(
        context: context,
        errorData: invalid);
    }
    #modelName#Model.SiteId = ss.SiteId;
    #modelName#Model.SetTitle(
        context: context,
        ss: ss);
    #modelName#Model.VerUp = Versions.MustVerUp(
        context: context,
        ss: ss,
        baseModel: #modelName#Model);
    var errorData = #modelName#Model.Update(
        context: context,
        ss: ss,
        notice: true,
        previousTitle: previousTitle);
    BinaryUtilities.UploadImage(
        context: context,
        ss: ss,
        id: #modelName#Model.#ModelName#Id,
        postedFileHash: #modelName#Model.PostedImageHash);
    switch (errorData.Type)
    {
        case Error.Types.None:
            return ApiResults.Success(
                #modelName#Model.#ModelName#Id,
                limitPerDate: context.ContractSettings.ApiLimit(),
                limitRemaining: context.ContractSettings.ApiLimit() - ss.ApiCount,
                message: Displays.Updated(
                    context: context,
                    data: #modelName#Model.Title.MessageDisplay(context: context)));

<!--Model_Utilities_ApiDuplicatedMessage-->

        default:
            return ApiResults.Error(
                context: context,
                errorData: errorData);
    }
}