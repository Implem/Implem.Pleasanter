public static ContentResultInheritance UpsertByApi(
    Context context,
    SiteSettings ss,
    string previousTitle)
{
    if (!Mime.ValidateOnApi(contentType: context.ContentType))
    {
        return ApiResults.BadRequest(context: context);
    }
    var api = context.RequestDataString.Deserialize<Api>();
    var #modelName#ApiModel = context.RequestDataString.Deserialize<#ModelName#ApiModel>();
    if (api?.Keys?.Any() != true ||#modelName#ApiModel == null)
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.InvalidJsonData));
    }
    var (isValid, missingKeys) = ValidateJsonKeys(jsonString: context.RequestDataString, ss: ss);
    if (!isValid)
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(
                type: Error.Types.InvalidUpsertKey,
                data: $"({string.Join(", ", missingKeys)})"));
    }
    var error = new ErrorData(Error.Types.None);
    var view = api.View ?? new View();
    var errorData = new List<string>();
    foreach (var columnName in api.Keys)
    {
        var objectValue = #modelName#ApiModel.ObjectValue(columnName: columnName);
        if (objectValue == null) continue;
        var column = ss.GetColumn(
            context: context,
            columnName: columnName);
        if (column?.TypeName == "datetime"
            && objectValue.ToDateTime().InRange() == false)
        {
            errorData.Add($"'{columnName}'='{objectValue.ToStr()}'");
            continue;
        }
        view.AddColumnFilterHash(
            context: context,
            ss: ss,
            column: column,
            objectValue: objectValue);
        view.AddColumnFilterSearchTypes(
            columnName: columnName,
            searchType: Column.SearchTypes.ExactMatch);
    }
    if (errorData.Any())
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(
                type: Error.Types.InvalidUpsertKey,
                data: $"({errorData.Join()})"));
    }
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: 0,
        view: view,
        #modelName#ApiModel: #modelName#ApiModel);
    switch (#modelName#Model.AccessStatus)
    {
        case Databases.AccessStatuses.Selected:
            return UpdateByApi(
                context: context, 
                ss: ss, 
                #modelName#Id: #modelName#Model.#ModelName#Id, 
                previousTitle: previousTitle);
        case Databases.AccessStatuses.NotFound:
            return CreateByApi(context: context, ss: ss);
        case Databases.AccessStatuses.Overlap:
            return ApiResults.Get(ApiResponses.Overlap(context: context));
        default:
            return ApiResults.Get(ApiResponses.NotFound(context: context));
    }
}

//Upsert, BulkUpsert時に、JSONデータとしてKeysに定義したものが、正しい名称かまたは条件として設定されているかを確認する。
private static bool CheckKeyExists(string key, Newtonsoft.Json.Linq.JToken elementToCheck, SiteSettings ss)
{
    if (!ss.ColumnDefinitionHash.ContainsKey(key))
    {
        // ColumnDefinitionHash に定義されている名称のみKeysに指定可能とする。
        return false;
    }

    // チェック対象がオブジェクトでない場合はキーを検索できない
    if (elementToCheck?.Type != Newtonsoft.Json.Linq.JTokenType.Object)
    {
        return false;
    }
    var objToCheck = (Newtonsoft.Json.Linq.JObject)elementToCheck;
    bool found = false;
    Newtonsoft.Json.Linq.JToken hashToken;
    Newtonsoft.Json.Linq.JToken valueToken = null;

    switch (Def.ExtendedColumnTypes.Get(key))
    {
        case "Class":
            if (objToCheck.TryGetValue("ClassHash", StringComparison.OrdinalIgnoreCase, out hashToken) && hashToken?.Type == Newtonsoft.Json.Linq.JTokenType.Object)
            {
                var hashObj = (Newtonsoft.Json.Linq.JObject)hashToken;
                if (hashObj.ContainsKey(key))
                {
                    valueToken = hashObj[key];
                    if (valueToken?.Type == Newtonsoft.Json.Linq.JTokenType.String)
                    {
                        found = !string.IsNullOrEmpty((string)valueToken);
                    }
                    else
                    {
                        found = (valueToken?.Type != Newtonsoft.Json.Linq.JTokenType.Null);
                    }
                }
            }
            break;

        case "Num":
            if (objToCheck.TryGetValue("NumHash", StringComparison.OrdinalIgnoreCase, out hashToken) && hashToken?.Type == Newtonsoft.Json.Linq.JTokenType.Object)
            {
                var hashObj = (Newtonsoft.Json.Linq.JObject)hashToken;
                if (hashObj.ContainsKey(key))
                {
                    valueToken = hashObj[key];
                    found = (valueToken?.Type != Newtonsoft.Json.Linq.JTokenType.Null);
                }
            }
            break;

        case "Date":
            if (objToCheck.TryGetValue("DateHash", StringComparison.OrdinalIgnoreCase, out hashToken) && hashToken?.Type == Newtonsoft.Json.Linq.JTokenType.Object)
            {
                var hashObj = (Newtonsoft.Json.Linq.JObject)hashToken;
                if (hashObj.ContainsKey(key))
                {
                    valueToken = hashObj[key];
                    found = (valueToken?.Type != Newtonsoft.Json.Linq.JTokenType.Null);
                }
            }
            break;

        case "Description":
            if (objToCheck.TryGetValue("DescriptionHash", StringComparison.OrdinalIgnoreCase, out hashToken) && hashToken?.Type == Newtonsoft.Json.Linq.JTokenType.Object)
            {
                var hashObj = (Newtonsoft.Json.Linq.JObject)hashToken;
                if (hashObj.ContainsKey(key))
                {
                    valueToken = hashObj[key];
                    if (valueToken?.Type == Newtonsoft.Json.Linq.JTokenType.String)
                    {
                        found = !string.IsNullOrEmpty((string)valueToken);
                    }
                    else
                    {
                        found = (valueToken?.Type != Newtonsoft.Json.Linq.JTokenType.Null);
                    }
                }
            }
            break;

        case "Check":
            if (objToCheck.TryGetValue("CheckHash", StringComparison.OrdinalIgnoreCase, out hashToken) && hashToken?.Type == Newtonsoft.Json.Linq.JTokenType.Object)
            {
                var hashObj = (Newtonsoft.Json.Linq.JObject)hashToken;
                if (hashObj.ContainsKey(key))
                {
                    valueToken = hashObj[key];
                    found = (valueToken?.Type != Newtonsoft.Json.Linq.JTokenType.Null);
                }
            }
            break;

        case "Attachments":
            // AttachmentsAなどは何も該当しない条件でWhere句を生成するので検索条件に含めてはいけない。
            return false;

        default:
            if (objToCheck.TryGetValue(key, StringComparison.OrdinalIgnoreCase, out valueToken))
            {
                found = (valueToken?.Type != Newtonsoft.Json.Linq.JTokenType.Null);
            }
            break;
    }
    return found;
}
//Upsert, BulkUpsert時に、JSONデータとしてKeysに定義したものが、正しい名称かまたは条件として設定されているかを確認する。
//他箇所の処理による前提条件あり（JSONデシリアライズ可能、Keys配列定義有り【BulkUpsertの場合は"KeyNotFoundCreate": falseの場合に限る】）
public static (bool isValid, List<string> missingKeys) ValidateJsonKeys(string jsonString, SiteSettings ss)
{
    var missingKeys = new List<string>();

    bool allKeysValid = true;
    var root = Newtonsoft.Json.Linq.JObject.Parse(jsonString);

    root.TryGetValue("Keys", StringComparison.OrdinalIgnoreCase, out var keysToken);
    var keysArray = (Newtonsoft.Json.Linq.JArray)keysToken ?? new Newtonsoft.Json.Linq.JArray();
    bool hasDataArray = root.TryGetValue("Data", StringComparison.OrdinalIgnoreCase, out var dataToken) && dataToken?.Type == Newtonsoft.Json.Linq.JTokenType.Array;
    var dataArray = hasDataArray ? (Newtonsoft.Json.Linq.JArray)dataToken : null;
    bool keyNotFoundCreateIsTrue = root.TryGetValue("KeyNotFoundCreate", StringComparison.OrdinalIgnoreCase, out var knfcToken)
                                        && knfcToken?.Type == Newtonsoft.Json.Linq.JTokenType.Boolean
                                        && (bool)knfcToken;
    foreach (var keyElement in keysArray)
    {
        if (keyElement?.Type != Newtonsoft.Json.Linq.JTokenType.String)
        {
            allKeysValid = false;
            missingKeys.Add($"{keyElement}");
            continue;
        }
        var key = (string)keyElement;
        bool currentKeyIsValid = false;

        // Data配列が存在するパターン(BulkUpsert)
        if (hasDataArray)
        {
            // Data配列が空の場合は検索条件がが存在しえない
            if (dataArray.Count == 0)
            {
                currentKeyIsValid = false;
            }
            else
            {
                // Data配列内の各要素でキーが存在および妥当性をチェックする
                currentKeyIsValid = dataArray.All(dataItem => CheckKeyExists(
                                                                        key: key,
                                                                        elementToCheck: dataItem,
                                                                        ss: ss));
            }
        }
        // Data配列が存在しないパターン (Upsert)
        else
        {
            currentKeyIsValid = CheckKeyExists(
                                            key: key,
                                            elementToCheck: root,
                                            ss: ss);
        }
        // 現在のキーが無効だった場合、全体の結果を無効にし、リストに追加
        if (!currentKeyIsValid)
        {
            allKeysValid = false;
            missingKeys.Add(key);
        }
    }
    return (allKeysValid, missingKeys);
}