public static string BulkProcess(Context context, SiteSettings ss)
{
    if (!context.CanUpdate(ss: ss))
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
    var processId = context.Forms.Int("BulkProcessingItems");
    var process = ss.Processes
        .Where(o => o.Accessable(context: context))
        .FirstOrDefault(o => o.Id == processId);
    if (process == null)
    {
        return Messages.NotFound(context: context).ToJson();
    }
    var selectedWhere = SelectedWhere(
        context: context,
        ss: ss);
    if (selectedWhere == null)
    {
        return Messages.ResponseSelectTargets(context: context).ToJson();
    }
    var view = Views.GetBySession(
        context: context,
        ss: ss);
    var where = view.Where(
        context: context,
        ss: ss,
        where: selectedWhere,
        itemJoin: false);
    var param = view.Param(
        context: context,
        ss: ss);
    var invalid = ExistsLockedRecord(
        context: context,
        ss: ss,
        where: where,
        param: param,
        orderBy: view.OrderBy(
            context: context,
            ss: ss));
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return invalid.MessageJson(context: context);
    }
    var count = 0;
    foreach (var #modelName#Model in new #ModelName#Collection(
        context: context,
        ss: ss,
        where: where))
    {
        var match = #modelName#Model.GetProcessMatchConditions(
            context: context,
            ss: ss,
            process: process);
        if (match)
        {
            var previousTitle = #modelName#Model.Title.DisplayValue;
            #modelName#Model.SetByProcess(
                context: context,
                ss: ss,
                process: process);
            var errorData = #modelName#Model.Update(
                context: context,
                ss: ss,
                processes: process.ToSingleList(),
                notice: true,
                previousTitle: previousTitle);
            count++;
        }
        else
        {
            context.Messages.Add(
                Messages.BulkProcessed(
                    context: context,
                    data: new string[]
                    {
                        process.GetSuccessMessage(context:context).Text,
                        count.ToString()
                    }));
            context.Messages.Add(process.GetErrorMessage(context: context));
            var errorResult = GridRows(
                context: context,
                ss: ss,
                clearCheck: true);
            return errorResult;
        }
    };
    context.Messages.Add(
        Messages.BulkProcessed(
            context: context,
            data: new string[]
            {
                process.GetSuccessMessage(context:context).Text,
                count.ToString()
            }));
    var res = GridRows(
        context: context,
        ss: ss,
        clearCheck: true);
    return res;
}