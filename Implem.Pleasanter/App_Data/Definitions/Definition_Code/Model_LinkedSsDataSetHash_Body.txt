private Dictionary<long, DataSet> LinkedSsDataSetHash(Context context)
{
    return LinkedSsDataSetHash(context: context, siteId: SiteId);
}

public static Dictionary<long, DataSet> LinkedSsDataSetHash(Context context, long siteId)
{
    var (destinationIds, sourceIds) = LinkIds(
        context: context,
        siteIds: new[] { siteId },
        destinationIds: new Dictionary<long, long[]>(),
        sourceIds: new Dictionary<long, long[]>());
    return SiteSettingsCache(
        context: context,
        siteIds: new[] { siteId }
            .Union(destinationIds.SelectMany(ids => ids.Value))
            .Union(sourceIds.SelectMany(ids => ids.Value))
            .ToArray(),
        destinationIds: destinationIds,
        sourceIds: sourceIds);
}

private static Dictionary<long, DataSet> SiteSettingsCache(
    Context context,
    long[] siteIds,
    Dictionary<long, long[]> destinationIds,
    Dictionary<long, long[]> sourceIds)
{
    var dataSets = new Dictionary<long, DataSet>();
    var dataTable = Repository.ExecuteTable(
        context: context,
        statements:
            Rds.SelectSites(
                column: Rds.SitesColumn()
                    .SiteId()
                    .Title()
                    .Body()
                    .SiteName()
                    .SiteGroupName()
                    .GridGuide()
                    .EditorGuide()
                    .ReferenceType()
                    .ParentId()
                    .InheritPermission()
                    .SiteSettings(),
                where: Rds.SitesWhere()
                    .TenantId(context.TenantId)
                    .SiteId_In(siteIds)
                    .ReferenceType("Wikis", _operator: "<>")));
    var dataRows = dataTable.AsEnumerable().ToDictionary(r => r.Field<long>(0), r => r);
    siteIds.ForEach(siteId =>
    {
        var dataSet = new DataSet();
        dataSets.Add(siteId, dataSet);
        new[]
        {
            (direction: "Destinations", links: sourceIds),
            (direction: "Sources", links: destinationIds)
        }.ForEach(ids =>
        {
            var clonedDataTable = dataTable.Clone();
            clonedDataTable.TableName = ids.direction;
            dataSet.Tables.Add(clonedDataTable);
            ids
                .links
                .Get(siteId)?
                .Select(id => dataRows.Get(id))
                .Where(row => row != null)
                .ForEach(row => clonedDataTable
                    .Rows
                    .Add(row.ItemArray));
        });
    });
    return dataSets;
}

private static  (Dictionary<long, long[]> destinationIds, Dictionary<long, long[]> sourceIds) LinkIds(
    Context context,
    long[] siteIds,
    Dictionary<long, long[]> destinationIds,
    Dictionary<long, long[]> sourceIds)
{
    (destinationIds, sourceIds) = DestinationIds(
        context: context,
        siteIds: siteIds,
        destinationIds: destinationIds,
        sourceIds: sourceIds);
    (destinationIds, sourceIds) = SourceIds(
        context: context,
        siteIds: siteIds,
        destinationIds: destinationIds,
        sourceIds: sourceIds);
    return (destinationIds, sourceIds);
}

private static  (Dictionary<long, long[]> destinationIds, Dictionary<long, long[]> sourceIds) DestinationIds(
    Context context,
    long[] siteIds,
    Dictionary<long, long[]> destinationIds,
    Dictionary<long, long[]> sourceIds)
{
    var ids = siteIds.Where(id => destinationIds.Get(id) == null).ToArray();
    if (!ids.Any())
    {
        return (destinationIds, sourceIds);
    }
    var dataTable = Repository.ExecuteTable(
        context: context,
        statements: Rds.SelectLinks(
            column: Rds.LinksColumn()
                .SourceId()
                .DestinationId(),
            join: LinkUtilities.LinkJoins(),
            where: Rds.LinksWhere()
                .DestinationId_In(ids)
                .LinksWhere(
                    context: context,
                    ids: ids)));
    var newLinks = dataTable.AsEnumerable()
        .Select(r => (sourceId: r.Field<long>(0), destinationId: r.Field<long>(1)))
        .GroupBy(r => r.destinationId, r => r.sourceId)
        .ToDictionary(r => r.Key, r => r.ToArray());
    destinationIds.AddRange(newLinks);
    return LinkIds(
        context: context,
        siteIds: newLinks.SelectMany(o => o.Value).Distinct().ToArray(),
        destinationIds: destinationIds,
        sourceIds: sourceIds);
}

private static  (Dictionary<long, long[]> destinationIds, Dictionary<long, long[]> sourceIds) SourceIds(
    Context context,
    long[] siteIds,
    Dictionary<long, long[]> destinationIds,
    Dictionary<long, long[]> sourceIds)
{
    var ids = siteIds.Where(id => sourceIds.Get(id) == null).ToArray();
    if (!ids.Any())
    {
        return (destinationIds, sourceIds);
    }
    var dataTable = Repository.ExecuteTable(
        context: context,
        statements: Rds.SelectLinks(
            column: Rds.LinksColumn()
                .DestinationId()
                .SourceId(),
            join: LinkUtilities.LinkJoins(),
            where: Rds.LinksWhere()
                .SourceId_In(ids)
                .LinksWhere(
                    context: context,
                    ids: ids)));
    var newLinks = dataTable.AsEnumerable()
        .Select(r => (destinationId: r.Field<long>(0), sourceId: r.Field<long>(1)))
        .GroupBy(r => r.sourceId, r => r.destinationId)
        .ToDictionary(r => r.Key, r => r.ToArray());
    sourceIds.AddRange(newLinks);
    return LinkIds(
        context: context,
        siteIds: newLinks.SelectMany(o => o.Value).Distinct().ToArray(),
        destinationIds: destinationIds,
        sourceIds: sourceIds);
}