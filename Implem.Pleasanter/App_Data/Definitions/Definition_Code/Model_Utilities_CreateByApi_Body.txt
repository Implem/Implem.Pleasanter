public static ContentResultInheritance CreateByApi(Context context, SiteSettings ss)
{
    if (!Mime.ValidateOnApi(contentType: context.ContentType))
    {
        return ApiResults.BadRequest(context: context);
    }
    if (context.ContractSettings.ItemsLimit(context: context, siteId: ss.SiteId))
    {
        return ApiResults.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.ItemsLimit));
    }
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: 0,
        setByApi: true);
    var invalid = #ModelName#Validators.OnCreating(
        context: context,
        ss: ss,
        #modelName#Model: #modelName#Model,
        api: true);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return ApiResults.Error(
            context: context,
            errorData: invalid);
    }
    #modelName#Model.SiteId = ss.SiteId;
    #modelName#Model.SetTitle(context: context, ss: ss);
    var errorData = #modelName#Model.Create(
        context: context,
        ss: ss,
        notice: true);
    switch (errorData.Type)
    {
        case Error.Types.None:
            return ApiResults.Success(
                id: #modelName#Model.#ModelName#Id,
                limitPerDate: context.ContractSettings.ApiLimit(),
                limitRemaining: context.ContractSettings.ApiLimit() - ss.ApiCount,
                message: Displays.Created(
                    context: context,
                    data: #modelName#Model.Title.MessageDisplay(context: context)));

<!--Model_Utilities_ApiDuplicatedMessage-->

        default:
            return ApiResults.Error(
                context: context,
                errorData: errorData);
    }
}

public static bool CreateByServerScript(Context context, SiteSettings ss, object model)
{
    if (context.ContractSettings.ItemsLimit(context: context, siteId: ss.SiteId))
    {
        return false;
    }
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: 0,
        setByApi: true);
    var invalid = #ModelName#Validators.OnCreating(
        context: context,
        ss: ss,
        #modelName#Model: #modelName#Model,
        api: true);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default:
            return false;
    }
    #modelName#Model.SiteId = ss.SiteId;
    #modelName#Model.SetTitle(context: context, ss: ss);
    var errorData = #modelName#Model.Create(
        context: context,
        ss: ss,
        notice: true);
    switch (errorData.Type)
    {
        case Error.Types.None:
            if (model is Libraries.ServerScripts.ServerScriptModelApiModel serverScriptModelApiModel)
            {
                if (serverScriptModelApiModel.Model is #ModelName#Model data)
                {
                    data.#ModelName#Id = #modelName#Model.#ModelName#Id;
                    data.SetByModel(#modelName#Model: #modelName#Model);
                }
            }
            return true;
        case Error.Types.Duplicated:
            return false;
        default:
            return false;
    }
}