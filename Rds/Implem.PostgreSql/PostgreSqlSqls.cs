using Implem.IRds;
using System;
namespace Implem.PostgreSql
{
    internal class PostgreSqlSqls : ISqls
    {
        public string TrueString { get; } = "true";

        public string FalseString { get; } = "false";

        public string IsNotTrue { get; } = " is not true ";

        public string CurrentDateTime { get; } = " CURRENT_TIMESTAMP ";

        public string Like { get; } = " ilike ";

        public string WhereLikeTemplateForward { get; } = "'%' || ";

        public string WhereLikeTemplate { get; } = "#ParamCount#_#CommandCount# || '%')";

        public string GenerateIdentity { get; } = " generated by default as identity (start with {0} increment by 1)";

        public object DateTimeValue(object value)
        {
            return value != null &&
                !(value is DateTime) &&
                DateTime.TryParse(value.ToString(), out var data)
                ? data
                : value;
        }

        public string BooleanString(string bit)
        {
            return bit == "1" ? TrueString : FalseString;
        }

        public string IntegerColumnLike(string tableName, string columnName)
        {
            return "(cast(\"" + tableName + "\".\"" + columnName + "\" as text) like ";
        }

        public string DateAddHour(int hour, string columnBracket)
        {
            return $"{columnBracket} + interval '{hour} hour'";
        }

        public string DateGroupYearly { get; } = "to_char({0}, 'YYYY')";

        public string DateGroupMonthly { get; } = "to_char({0}, 'YYYY/MM')";

        public string DateGroupWeeklyPart { get; } = "case date_part('dow',{0}) when 0 then {0} + '-6 days' else {0} + CAST((1-date_part('dow',{0})) || 'days' as interval) end";

        public string DateGroupWeekly { get; } ="date_part('year',{0}) * 100 + date_part('week',{0})";

        public string DateGroupDaily { get; } = "to_char({0}, 'YYYY/MM/DD')";
    }
}
